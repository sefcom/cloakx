// Generated by CoffeeScript 1.11.0
(function() {
  var KeyboardUtils, mapKeyRegistry, root,
    slice = [].slice;

  mapKeyRegistry = {};

  if (typeof Utils !== "undefined" && Utils !== null) {
    Utils.monitorChromeStorage("mapKeyRegistry", (function(_this) {
      return function(value) {
        return mapKeyRegistry = value;
      };
    })(this));
  }

  KeyboardUtils = {
    keyCodes: {
      ESC: 27,
      backspace: 8,
      deleteKey: 46,
      enter: 13,
      ctrlEnter: 10,
      space: 32,
      shiftKey: 16,
      ctrlKey: 17,
      f1: 112,
      f12: 123,
      tab: 9,
      downArrow: 40,
      upArrow: 38
    },
    keyNames: {
      37: "left",
      38: "up",
      39: "right",
      40: "down",
      32: "space",
      8: "backspace"
    },
    keyIdentifierCorrectionMap: {
      "U+00C0": ["U+0060", "U+007E"],
      "U+00BD": ["U+002D", "U+005F"],
      "U+00BB": ["U+003D", "U+002B"],
      "U+00DB": ["U+005B", "U+007B"],
      "U+00DD": ["U+005D", "U+007D"],
      "U+00DC": ["U+005C", "U+007C"],
      "U+00BA": ["U+003B", "U+003A"],
      "U+00DE": ["U+0027", "U+0022"],
      "U+00BC": ["U+002C", "U+003C"],
      "U+00BE": ["U+002E", "U+003E"],
      "U+00BF": ["U+002F", "U+003F"]
    },
    init: function() {
      if (navigator.userAgent.indexOf("Mac") !== -1) {
        return this.platform = "Mac";
      } else if (navigator.userAgent.indexOf("Linux") !== -1) {
        return this.platform = "Linux";
      } else {
        return this.platform = "Windows";
      }
    },
    getKeyChar: function(event) {
      if (event.keyIdentifier != null) {
        return this.getKeyCharUsingKeyIdentifier(event);
      } else {
        return this.getKeyCharUsingKey(event);
      }
    },
    getKeyCharUsingKey: function(event) {
      var ref, ref1;
      if (event.keyCode in this.keyNames) {
        return this.keyNames[event.keyCode];
      } else if (event.key == null) {
        return "";
      } else if (event.key.length === 1) {
        return event.key;
      } else if (event.key.length === 2 && ("F1" <= (ref = event.key) && ref <= "F9")) {
        return event.key.toLowerCase();
      } else if (event.key.length === 3 && ("F10" <= (ref1 = event.key) && ref1 <= "F12")) {
        return event.key.toLowerCase();
      } else {
        return "";
      }
    },
    getKeyCharUsingKeyIdentifier: function(event) {
      var character, correctedIdentifiers, keyCode, keyIdentifier, unicodeKeyInHex;
      keyCode = event.keyCode;
      if (keyCode) {
        if (keyCode in this.keyNames) {
          return this.keyNames[keyCode];
        }
        if ((this.keyCodes.f1 <= keyCode && keyCode <= this.keyCodes.f12)) {
          return "f" + (1 + keyCode - keyCodes.f1);
        }
      }
      keyIdentifier = event.keyIdentifier;
      if (!keyIdentifier.startsWith("U+")) {
        return "";
      }
      if ((this.platform === "Windows" || this.platform === "Linux") && this.keyIdentifierCorrectionMap[keyIdentifier]) {
        correctedIdentifiers = this.keyIdentifierCorrectionMap[keyIdentifier];
        keyIdentifier = event.shiftKey ? correctedIdentifiers[1] : correctedIdentifiers[0];
      }
      unicodeKeyInHex = "0x" + keyIdentifier.substring(2);
      character = String.fromCharCode(parseInt(unicodeKeyInHex)).toLowerCase();
      if (event.shiftKey) {
        return character.toUpperCase();
      } else {
        return character;
      }
    },
    isPrimaryModifierKey: function(event) {
      if (this.platform === "Mac") {
        return event.metaKey;
      } else {
        return event.ctrlKey;
      }
    },
    isEscape: (function() {
      return function(event) {
        return event.keyCode === this.keyCodes.ESC || (function(_this) {
          return function() {
            var keyChar;
            keyChar = _this.getKeyCharString(event);
            return keyChar === "<c-[>";
          };
        })(this)();
      };
    })(),
    isPrintable: function(event) {
      var keyChar;
      if (event.metaKey || event.ctrlKey || event.altKey) {
        return false;
      }
      keyChar = event.type === "keypress" ? String.fromCharCode(event.charCode) : this.getKeyChar(event);
      return keyChar.length === 1;
    },
    getKeyCharString: function(event) {
      var keyChar, modifiers, ref;
      switch (event.type) {
        case "keypress":
          if (31 < event.keyCode) {
            return String.fromCharCode(event.charCode);
          }
          break;
        case "keydown":
          if (keyChar = this.getKeyChar(event)) {
            modifiers = [];
            if (event.shiftKey && keyChar.length === 1) {
              keyChar = keyChar.toUpperCase();
            }
            if (event.altKey) {
              modifiers.push("a");
            }
            if (event.ctrlKey) {
              modifiers.push("c");
            }
            if (event.metaKey) {
              modifiers.push("m");
            }
            keyChar = slice.call(modifiers).concat([keyChar]).join("-");
            if (1 < keyChar.length) {
              keyChar = "<" + keyChar + ">";
            }
            keyChar = (ref = mapKeyRegistry[keyChar]) != null ? ref : keyChar;
            return keyChar;
          }
      }
    }
  };

  KeyboardUtils.init();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.KeyboardUtils = KeyboardUtils;

  root.keyCodes = KeyboardUtils.keyCodes;

}).call(this);
