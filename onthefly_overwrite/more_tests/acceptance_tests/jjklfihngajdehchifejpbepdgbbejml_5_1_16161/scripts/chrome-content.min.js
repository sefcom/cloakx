var SSO_URL = "https://devlab-api.betasabrina.com";
var WEB_VPS = false;
var PUSHER_KEY = "637003f8185c4a167178";
var DISCOVERY_LOCK = false;
var APP_TYPE = "webapp";

window.SSO_URL = SSO_URL;
window.WEB_VPS = WEB_VPS;
window.PUSHER_KEY = PUSHER_KEY;
window.DISCOVERY_LOCK = DISCOVERY_LOCK;
window.APP_TYPE = APP_TYPE;

var POC = true;

var Version = {
    office:'1.0',
    chrome:'2.1',
    time:'2016.06.09.20.15',
    VERSION: '5.0.16161.9'
};


/* global define, module */
(function() {

    /**
     * Constructor for new Vent object
     */
    var Vent = function() {
        this.__subscriptions = {};
    };

    /**
     * Retrieves the subscription object.
     * @param {String}   name     the event name
     * @param {Function} callback the callback to check
     * @param {Object}   bind     the originally bound object [optional]
     * @return {Object}           the subscription object or null
     */
    Vent.prototype.retrieveSubscription = function (name, callback, bind) {
        this.__subscriptions = this.__subscriptions || {};
        bind = bind || this;

        if(name in this.__subscriptions) {
            for(var i in this.__subscriptions[name]) {
                var sub = this.__subscriptions[name][i];
                var cb = sub.callback;
                var b  = sub.bind;

                if(cb === callback && b === bind) return sub;
            }
        }

        return null;
    };

    /**
     * Checks if a callback is already subscribed to an event.
     * @param {String}   name     the event name
     * @param {Function} callback the callback to check
     * @param {Object}   bind     the originally bound object [optional]
     * @return {Boolean}          whether or not the callback is already subscribed
     */
    Vent.prototype.isSubscribed = function(name, callback, bind) {
        return (this.retrieveSubscription(name, callback, bind) !== null);
    };

    /**
     * Subscribe to an event
     * @param  {String}   name     the event name
     * @param  {Function} callback the callback to trigger
     * @param  {Object}   bind     an object to bind to (e.g. class instance)
     * @return {Object}            subscription object
     */
    Vent.prototype.subscribe = function(name, callback, bind) {
        this.__subscriptions = this.__subscriptions || {};
        if(!(name in this.__subscriptions)) {
            this.__subscriptions[name] = [];
        }

        bind = bind || this;

        var sub = this.retrieveSubscription(name, callback, bind);

        if(sub === null) {
            sub = {
                callback: callback,
                bind:     bind,
                once:     false
            };
            this.__subscriptions[name].push(sub);
        }

        return sub;
    };

    /**
     * Subscribe to an event once only
     * @param {String}   name     the event name
     * @param {Function} callback the callback to trigger
     * @param {Object}   bind     an object to bind to (e.g. class instance)
     * @return {Object}           subscription object
     */
    Vent.prototype.subscribeOnce = function (name, callback, bind) {
        var sub = this.subscribe(name, callback, bind);
        sub.once = true;
        return sub;
    };

    /**
     * Unsubscribe from an event
     * @param  {String}   name     the event name
     * @param  {Function} callback the callback to unsubscribe
     * @param  {Object}   bind     the original object binding
     */
    Vent.prototype.unsubscribe = function(name, callback, bind) {
        this.__subscriptions = this.__subscriptions || {};
        bind = bind || this;

        if(this.isSubscribed(name, callback, bind)) {
            var sub;
            for(sub in this.__subscriptions[name]) {
                var cb = this.__subscriptions[name][sub].callback;
                var b  = this.__subscriptions[name][sub].bind;

                if(cb === callback && b === bind) break;
            }

            this.__subscriptions[name].splice(sub, 1);
        }
    };

    /**
     * Publish an event, all aguments after name are passed to the callbacks
     * @param  {String} name  the event name
     */
    Vent.prototype.publish = function(/* name, args */) {
        this.__subscriptions = this.__subscriptions || {};
        var args = Array.prototype.slice.call(arguments);
        var name = args.shift();

        if(name in this.__subscriptions) {
            var l = this.__subscriptions[name];
            var c = l.length;
            var delete_queue = [];

            for(var i = 0; i < c; i++) {
                var sub  = l[i];
                if (typeof sub == 'undefined') {
                    continue;
                }
                var cb   = sub.callback;
                var b    = sub.bind;
                var once = sub.once || false;

                if(typeof cb == 'function') {
                    cb.apply(b, args);
                }

                if(once) {
                    delete_queue.push(i);
                }
            }

            if(delete_queue.length > 0) {
                var clean = l.filter(function(item, index) {
                    return (delete_queue.indexOf(index) == -1);
                });

                this.__subscriptions[name] = clean;
            }
        }
    };

    /**
     * Implement Vent's functionality on another class
     * @param {Object} klass the object (e.g. class.prototype) to implement on.
     */
    Vent.implementOn = function(klass) {
        var methods = ['retrieveSubscription', 'subscribe', 'subscribeOnce', 'unsubscribe', 'publish', 'isSubscribed'];
        methods.forEach(function(m) {
            klass[m] = Vent.prototype[m];
        });

        return klass;
    };

    // AMD - requirejs
    if(typeof define === 'function' && define.amd) {
        define([], function() { return Vent; });
    }
    // Node.js / CommonJS module
    else if (typeof module === 'object' && module.exports) {
        module.exports = Vent;
    }
    //Browser
    else
    {
        window.Vent = Vent;
    }
})();

var htmlEnDeCode = (function() {
    var charToEntityRegex, entityToCharRegex, charToEntity, entityToChar;

    function resetCharacterEntities() {
        charToEntity = {};
        entityToChar = {};
        // add the default set
        addCharacterEntities({
            '&amp;' : '&',
            '&gt;' : '>',
            '&lt;' : '<',
            '&quot;' : '"',
            '&#39;' : "'"
        });
    }

    function addCharacterEntities(newEntities) {
        var charKeys = [], entityKeys = [], key, echar;
        for(key in newEntities) {
            echar = newEntities[key];
            entityToChar[key] = echar;
            charToEntity[echar] = key;
            charKeys.push(echar);
            entityKeys.push(key);
        }
        charToEntityRegex = new RegExp('(' + charKeys.join('|') + ')', 'g');
        entityToCharRegex = new RegExp('(' + entityKeys.join('|') + '|&#[0-9]{1,5};' + ')', 'g');
    }

    function htmlEncode(value) {
        var htmlEncodeReplaceFn = function(match, capture) {
            return charToEntity[capture];
        };

        return (!value) ? value : String(value).replace(charToEntityRegex, htmlEncodeReplaceFn);
    }

    function htmlDecode(value) {
        var htmlDecodeReplaceFn = function(match, capture) {
            return (capture in entityToChar) ? entityToChar[capture] : String.fromCharCode(parseInt(capture.substr(2), 10));
        };

        return (!value) ? value : String(value).replace(entityToCharRegex, htmlDecodeReplaceFn);
    }

    resetCharacterEntities();

    return {
        htmlEncode : htmlEncode,
        htmlDecode : htmlDecode
    };
})();

var Base64 = {

    _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

    encode : function(input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        input = Base64._utf8_encode(input);

        while (i < input.length) {

            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

        }

        return output;
    },

    decode : function(input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        while (i < input.length) {

            enc1 = this._keyStr.indexOf(input.charAt(i++));
            enc2 = this._keyStr.indexOf(input.charAt(i++));
            enc3 = this._keyStr.indexOf(input.charAt(i++));
            enc4 = this._keyStr.indexOf(input.charAt(i++));

            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;

            output = output + String.fromCharCode(chr1);

            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }

        }

        output = Base64._utf8_decode(output);

        return output;

    },

    _utf8_encode : function(string) {
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";

        for(var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            } else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            } else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    },

    _utf8_decode : function(utftext) {
        var string = "";
        var i = 0;
        var c = c1 = c2 = 0;

        while (i < utftext.length) {

            c = utftext.charCodeAt(i);

            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            } else if ((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i + 1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            } else {
                c2 = utftext.charCodeAt(i + 1);
                c3 = utftext.charCodeAt(i + 2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }

        }

        return string;
    }

};

Date.prototype.clearTime = function() {
    this.setHours(0);
    this.setMinutes(0);
    this.setSeconds(0);
    this.setMilliseconds(0);
    return this;
};

Date.prototype.getTodayNoon = function() {
    var day = 86400 * 1000;
    var hour = 60 * 60 * 1000;
    var thisday = new Date(this);
    thisday.clearTime();
    thisday -= 0;
    thisday += 12 * hour;
    return new Date(thisday);
};

Date.prototype.getTodayEvening = function() {
    var day = 86400 * 1000;
    var hour = 60 * 60 * 1000;
    var thisday = new Date(this);
    thisday.clearTime();
    thisday -= 0;
    thisday += 18 * hour;
    return new Date(thisday);
};

Date.prototype.getToday = function() {
    var day = 86400 * 1000;
    var thisday = new Date(this);
    thisday.clearTime();
    return new Date(thisday);
};

Date.prototype.getYesterday = function() {
    var day = 86400 * 1000;
    var thisday = new Date(this);
    thisday.clearTime();
    thisday -= day;
    return new Date(thisday);
};

Date.prototype.getLastWeek = function() {
    var day = 86400 * 1000;
    var thisday = new Date(this);
    // thisday.clearTime();
    thisday -= 7 * day;
    return new Date(thisday);
};

Date.prototype.getFirstDay = function() {
    var day = 86400 * 1000;
    var thisday = new Date(this);
    thisday.clearTime();
    thisday -= thisday.getDay() * day;
    return new Date(thisday);
};

String.prototype.splice = function(index, count, add) {
    var ar = this.split('');
    ar.splice(index, count, add);
    return ar.join('');
};

//Provides document.currentScript support
//Support: IE, Chrome<29.
(function checkCurrentScript() {
    if ('currentScript' in document) {
     return;
    }
    Object.defineProperty(document, 'currentScript', {
     get: function () {
       var scripts = document.getElementsByTagName('script');
       return scripts[scripts.length - 1];
     },
     enumerable: true,
     configurable: true
    });
})();
/**
 * Created by IntelliJ IDEA.
 * User: mythz
 * Date: 16-Jun-2010
 * Time: 00:51:17
 * To change this template use File | Settings | File Templates.
 */

var JSV = {};
/**
 * parses JSV text into a JavaScript type 
 * @param str
 */
JSV.parse = function(str)
{
    if (!str) return str;
    if (str[0] == '{')
    {
        return JSV.parseObject_(str);
    }
    else if (str[0] == '[')
    {
        return JSV.parseArray_(str);
    }
    else
    {
        return JSV.parseString(str);
    }
}

JSV.ESCAPE_CHARS = ['"', ',', '{', '}', '[', ']'];

JSV.parseArray_ = function(str)
{
    var to = [], value = JSV.stripList_(str);
    if (!value) return to;

    if (value[0] == '{')
    {
        var ref = {i:0};
        do
        {
            var itemValue = JSV.eatMapValue_(value, ref);
            to.push(JSV.parse(itemValue));
        } while (++ref.i < value.length);
    }
    else
    {
        for (var ref={i:0}; ref.i < value.length; ref.i++)
        {
            var elementValue = JSV.eatElementValue_(value, ref);
            to.push(JSV.parse(elementValue));
        }
    }
    return to;
};

JSV.parseObject_ = function(str)
{
    if (str[0] != '{')
    {
        throw "Type definitions should start with a '{', got string starting with: "
            + str.substr(0, str.length < 50 ? str.length : 50);
    }

    var name, obj = {};

    if (str == '{}') return null;
    for (var ref={i:1}, strTypeLength = str.length; ref.i < strTypeLength; ref.i++)
    {
        name = JSV.eatMapKey_(str, ref);
        ref.i++;
        var value = JSV.eatMapValue_(str, ref);
        obj[name]= JSV.parse(value);
    }
    return obj;
}

JSV.eatElementValue_ = function(value, ref)
{
    return JSV.eatUntilCharFound_(value, ref, ',');
}

JSV.containsAny_ = function(str, tests)
{
    if (!is.String(str)) return;
    for (var i = 0, len = tests.length; i < len; i++)
    {
        if (str.indexOf(tests[i]) != -1) return true;
    }
    return false;
};

JSV.toCsvField = function(text)
{
    return !text || JSV.containsAny_(JSV.ESCAPE_CHARS)
        ? text
        : '"' + text.replace(/"/g, '""') + '"';
}

JSV.parseString = JSV.fromCsvField = function(text)
{
    return !text || text[0] != '"'
        ? text
        : text.substr(1, text.length - 2).replace(/""/g, '"');
}

JSV.stripList_ = function(value)
{
    if (!value) return null;
    return value[0] == '['
        ? value.substr(1, value.length - 2)
        : value;
};

/**
 * @param value {string}
 * @param ref {ref int}
 * @param findChar {char}
 */
JSV.eatUntilCharFound_ = function(value, ref, findChar)
{
    var tokenStartPos = ref.i;
    var valueLength = value.length;
    if (value[tokenStartPos] != '"')
    {
        ref.i = value.indexOf(findChar, tokenStartPos);
        if (ref.i == -1) ref.i = valueLength;
        return value.substr(tokenStartPos, ref.i - tokenStartPos);
    }

    while (++ref.i < valueLength)
    {
        if (value[ref.i] == '"')
        {
            if (ref.i + 1 >= valueLength)
            {
                return value.substr(tokenStartPos, ++ref.i - tokenStartPos);
            }
            if (value[ref.i + 1] == '"')
            {
                ref.i++;
            }
            else if (value[ref.i + 1] == findChar)
            {
                return value.substr(tokenStartPos, ++ref.i - tokenStartPos);
            }
        }
    }

    throw "Could not find ending quote";
}

/**
 *
 * @param value {string}
 * @param i {ref int}
 */
JSV.eatMapKey_ = function(value, ref)
{
    var tokenStartPos = ref.i;
    while (value[++ref.i] != ':' && ref.i < value.length) { }
    return value.substr(tokenStartPos, ref.i - tokenStartPos);
}

/**
 *
 * @param value {string}
 * @param ref {ref int}
 */
JSV.eatMapValue_ = function(value, ref)
{
    var tokenStartPos = ref.i;
    var valueLength = value.length;
    if (ref.i == valueLength) return null;

    var valueChar = value[ref.i];

    //If we are at the end, return.
    if (valueChar == ',' || valueChar == '}')
    {
        return null;
    }

    //Is List, i.e. [...]
    var withinQuotes = false;
    if (valueChar == '[')
    {
        var endsToEat = 1;
        while (++ref.i < valueLength && endsToEat > 0)
        {
            valueChar = value[ref.i];
            if (valueChar == '"')
                withinQuotes = !withinQuotes;
            if (withinQuotes)
                continue;
            if (valueChar == '[')
                endsToEat++;
            if (valueChar == ']')
                endsToEat--;
        }
        return value.substr(tokenStartPos, ref.i - tokenStartPos);
    }

    //Is Type/Map, i.e. {...}
    if (valueChar == '{')
    {
        var endsToEat = 1;
        while (++ref.i < valueLength && endsToEat > 0)
        {
            valueChar = value[ref.i];

            if (valueChar == '"')
                withinQuotes = !withinQuotes;
            if (withinQuotes)
                continue;
            if (valueChar == '{')
                endsToEat++;
            if (valueChar == '}')
                endsToEat--;
        }
        return value.substr(tokenStartPos, ref.i - tokenStartPos);
    }

    //Is Within Quotes, i.e. "..."
    if (valueChar == '"')
    {
        while (++ref.i < valueLength)
        {
            valueChar = value[ref.i];
            if (valueChar != '"') continue;
            var isLiteralQuote = ref.i + 1 < valueLength && value[ref.i + 1] == '"';
            ref.i++; //skip quote
            if (!isLiteralQuote)
                break;
        }
        return value.substr(tokenStartPos, ref.i - tokenStartPos);
    }

    //Is Value
    while (++ref.i < valueLength)
    {
        valueChar = value[ref.i];
        if (valueChar == ',' || valueChar == '}')
            break;
    }

    return value.substr(tokenStartPos, ref.i - tokenStartPos);
}

JSV.isEmpty_ = function(a)
{
    return (a === null || a === undefined || a === "");
}
JSV.isFunction_ = function(a)
{
    return (typeof (a) === 'function') ? a.constructor.toString().match(/Function/) !== null : false;
};
JSV.isString_ = function(a)
{
    if (a === null || a === undefined) return false;
    return (typeof (a) === 'string') ? true : (typeof (a) === 'object') ? a.constructor.toString().match(/string/i) !== null : false;
};
JSV.isDate_ = function(a)
{
    if (JSV.isEmpty_(a)) return false;
    return (typeof (a) === 'date') ? true : (typeof (a) === 'object') ? a.constructor.toString().match(/date/i) !== null : false;
};

JSV.isArray_ = function(a)
{
    if (a === null || a === undefined || a === "") return false;
    return (typeof (a) === 'object') ? a.constructor.toString().match(/array/i) !== null || a.length !== undefined : false;
};
JSV.toXsdDateTime = function(date)
{
    function pad(n) {
        var s = n.toString();
        return s.length < 2 ? '0'+s : s;
    };
    var yyyy = date.getUTCFullYear();
    var MM = pad(date.getUTCMonth()+1);
    var dd = pad(date.getUTCDate());
    var hh = pad(date.getUTCHours());
    var mm = pad(date.getUTCMinutes());
    var ss = pad(date.getUTCSeconds());
    var ms = pad(date.getUTCMilliseconds());

  return yyyy +'-' + MM + '-' + dd + 'T' + hh + ':' + mm + ':' + ss + '.' + ms + 'Z';
}
JSV.serialize = JSV.stringify = function(obj)
{
    if (obj === null || obj === undefined) return null;

    var typeOf = typeof(obj);
    if (obj === 'function') return null;

    if (typeOf === 'object')
    {
        var ctorStr = obj.constructor.toString().toLowerCase();
        if (ctorStr.indexOf('string') != -1)
            return JSV.escapeString(obj);
        if (ctorStr.indexOf('boolean') != -1)
            return obj ? "True" : "False";
        if (ctorStr.indexOf('number') != -1)
            return obj;
        if (ctorStr.indexOf('date') != -1)
            return JSV.escapeString(JSV.toXsdDateTime(obj));
        if (ctorStr.indexOf('array') != -1)
            return JSV.serializeArray(obj);

        return JSV.serializeObject(obj);
    }
    else
    {
        switch(typeOf)
        {
            case 'string':
                return JSV.escapeString(obj);
                break;
            case 'boolean':
                return obj ? "True" : "False";
                break;
            case 'date':
            return JSV.escapeString(JSV.toXsdDateTime(obj));
                break;
            case 'array':
                return JSV.serializeArray(obj);
                break;
            case 'number':
            default:
                return obj;
        }
    }
};
JSV.serializeObject = function(obj)
{
    var value, sb = new StringBuffer();
    for (var key in obj)
    {
        value = obj[key];
        if (!obj.hasOwnProperty(key) || JSV.isEmpty_(value) || JSV.isFunction_(value)) continue;

        if (sb.getLength() > 0)
            sb.append(',');

        sb.append(JSV.escapeString(key));
        sb.append(':');
        sb.append(JSV.serialize(value));
    }
    return '{' + sb.toString() + '}';
};
JSV.serializeArray = function(array)
{
    var value, sb = new StringBuffer();
    for (var i=0, len=array.length; i<len; i++)
    {
        value = array[i];
        if (JSV.isEmpty_(value) || JSV.isFunction_(value)) continue;

        if (sb.getLength() > 0)
            sb.append(',');

        sb.append(JSV.serialize(value));
    }
    return '[' + sb.toString() + ']';
};
JSV.escapeString = function(str)
{
	if (str === undefined || str === null) return null;
    if (str === '') return '""';

    if (str.indexOf('"'))
    {
        str = str.replace(/"/g,'""');
    }
	if (JSV.containsAny_(str, JSV.ESCAPE_CHARS))
	{
		return '"' + str + '"';
	}
	return str;
};
JSV.containsAny_ = function(str, tests)
{
	if (!JSV.isString_(str)) return;
	for (var i = 0, len = tests.length; i < len; i++)
	{
		if (str.indexOf(tests[i]) != -1) return true;
	}
	return false;
};

/* Closure Library StringBuffer for efficient string concatenation */
var hasScriptEngine = 'ScriptEngine' in window;
var HAS_JSCRIPT = hasScriptEngine && window['ScriptEngine']() == 'JScript';

StringBuffer = function(opt_a1, var_args) {
  this.buffer_ = HAS_JSCRIPT ? [] : '';

  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
StringBuffer.prototype.set = function(s) {
  this.clear();
  this.append(s);
};
if (HAS_JSCRIPT) {
  StringBuffer.prototype.bufferLength_ = 0;
  StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
    // IE version.
    if (opt_a2 == null) { // second argument is undefined (null == undefined)
      // Array assignment is 2x faster than Array push.  Also, use a1
      // directly to avoid arguments instantiation, another 2x improvement.
      this.buffer_[this.bufferLength_++] = a1;
    } else {
      this.buffer_.push.apply(/** @type {Array} */ (this.buffer_), arguments);
      this.bufferLength_ = this.buffer_.length;
    }
    return this;
  };
} else {
  StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
    // W3 version.
    this.buffer_ += a1;
    if (opt_a2 != null) { // second argument is undefined (null == undefined)
      for (var i = 1; i < arguments.length; i++) {
        this.buffer_ += arguments[i];
      }
    }
    return this;
  };
}
StringBuffer.prototype.clear = function() {
  if (HAS_JSCRIPT) {
     this.buffer_.length = 0;  // Reuse the array to avoid creating new object.
     this.bufferLength_ = 0;
   } else {
     this.buffer_ = '';
   }
};
StringBuffer.prototype.getLength = function() {
   return this.toString().length;
};
StringBuffer.prototype.toString = function() {
  if (HAS_JSCRIPT) {
    var str = this.buffer_.join('');
    this.clear();
    if (str) {
      this.append(str);
    }
    return str;
  } else {
    return /** @type {string} */ (this.buffer_);
  }
};


/**
 * Considering pulling this out
 * @param baseUri
 * @param type
 */
function JsvServiceClient(baseUri)
{
	this.baseSyncReplyUri = JsvServiceClient.combine_(baseUri, "jsv/reply");
	this.baseAsyncOneWayUri = JsvServiceClient.combine_(baseUri, "jsv/oneway");
}
JsvServiceClient.prototype.send = function(webMethod, request, onSuccess, onError, ajaxOptions) {
	var startCallTime = new Date();
	var requestUrl = JsvServiceClient.combine_(this.baseSyncReplyUri, webMethod);
	var id = JsvServiceClient.id++;

	var options = {
		type: "GET",
		url: requestUrl,
		data: request,
		dataType: "text",
		success: function(responseText)
		{
			var endCallTime = new Date();
			var callDuration = endCallTime.getTime() - startCallTime.getTime();

            var response = JSV.parse(responseText);
			if (!response)
			{
				if (onSuccess) onSuccess(null);
				return;
			}

            var status = JsvServiceClient.parseResponseStatus_(response.ResponseStatus);
			if (status.isSuccess)
			{
				if (onSuccess) onSuccess(response);
				JsvServiceClient.onSuccess({ id: id, webMethod: webMethod, request: request,
					response: response, durationMs: callDuration
				});
			}
			else
			{
                if (onError) onError(status);
				JsvServiceClient.onError({ id: id, webMethod: webMethod, request: request,
					error: status, durationMs: callDuration
                });
			}
		},
		error: function(xhr, desc, exObj)
		{
			var endCallTime = new Date();
			var callDuration = endCallTime.getTime() - startCallTime.getTime();

			try
			{
				if (onError) onError(xhr.responseText);
			}
			catch (e) {}
			JsvServiceClient.onError({ id: id, webMethod: webMethod, request: request,
				error: xhr.responseText, durationMs: callDuration
			});
		}
	};

    for (var k in ajaxOptions) options[k] = ajaxOptions[k];

	var ajax = $.ajax(options);
};

JsvServiceClient.combine_ = function() {
    var paths = "";
    for (var i = 0, len = arguments.length; i < len; i++) {
        if (paths.length > 0)
            paths += "/";
        paths += arguments[i].replace(/[/]+$/g, "");
    }
    return paths;
};

//Sends a HTTP 'GET' request on the QueryString
JsvServiceClient.prototype.getFromService = function(webMethod, request, onSuccess, onError) {
	this.send(webMethod, request, onSuccess, onError);
};

//Sends a HTTP 'POST' request as key value pair formData
JsvServiceClient.prototype.postFormDataToService = function(webMethod, request, onSuccess, onError) {
	this.send(webMethod, request, onSuccess, onError, { type: "POST" });
};

//Sends a HTTP 'POST' request as JSV @requires jQuery
JsvServiceClient.prototype.postToService = function(webMethod, request, onSuccess, onError) {
	var jsvRequest = JSV.serialize(request);
	this.send(webMethod, jsvRequest, onSuccess, onError, { type: "POST", processData: false, contentType: "application/jsv; charset=utf-8" });
};

JsvServiceClient.id = 0;
JsvServiceClient.onError = function() { };
JsvServiceClient.onSuccess = function() { };

JsvServiceClient.parseResponseStatus_ = function(status)
{
    if (!status) return {isSuccess:true};

	var result =
    {
        isSuccess: status.ErrorCode === undefined || status.ErrorCode === null,
        errorCode: status.ErrorCode,
        message: status.Message,
        errorMessage: status.ErrorMessage,
        stackTrace: status.StackTrace,
        fieldErrors: [],
        fieldErrorMap: {}
    };

    if (status.FieldErrors)
    {
        for (var i=0, len = status.FieldErrors.length; i<len; i++)
        {
            var err = status.FieldErrors[i];
            var error = {errorCode: err.ErrorCode, fieldName:err.FieldName, errorMessage:err.ErrorMessage||''};
            result.fieldErrors.push(error);

            if (error.fieldName)
            {
                result.fieldErrorMap[error.fieldName] = error;
            }
        }
    }
	return result;
};

'use strict';

/**
 * Customised version of https://github.com/ericnorris/striptags
 * - added support for identifying and removing potentially unsafe attributes
 *
 * @example
 *
 * var htmlStr = '<a href="javascript:dangerous" ONCLICK="danger()" onblur="danger()">lorem ipsum <b style="expression:danger;">dolor</b> sit amet</a><p>consectetur</p> some text';
 * striptags(htmlStr,['a','b'],true);
 * 	returns
 * 	'<a href="#">lorem ipsum <b>dolor</b> sit amet</a>consectetur some text'
 *
 */
(function (root, factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as an anonymous module.
		define([], factory);
	} else if (typeof module === 'object' && module.exports) {
		// Node. Does not work with strict CommonJS, but
		// only CommonJS-like environments that support module.exports,
		// like Node.
		module.exports = factory();
	} else {
		// Browser globals (root is window)
		root.striptags = factory();
	}
}(this, function () {
	var STATE_OUTPUT = 0,
		STATE_HTML = 1,
		STATE_PRE_COMMENT = 2,
		STATE_COMMENT = 3,
		WHITESPACE = /\s/,
		ALLOWED_TAGS_REGEX = /<(\w*)>/g;

	/**
	 *
	 * @param {string} html
	 * @param {string[]|string} allowableTags
	 * @param {boolean} sanitiseAttributes - custom feature to strip potentially harmful
	 *                                       attributes from the returned HTML
	 * @returns {string}
	 */
	function striptags(html, allowableTags, sanitiseAttributes) {
		var html = html || '',
			state = STATE_OUTPUT,
			depth = 0,
			output = '',
			tagBuffer = '',
			inQuote = false,
			i, length, c;

		if (typeof allowableTags === 'string') {
			// Parse the string into an array of tags
			allowableTags = parseAllowableTags(allowableTags);
		} else if (!Array.isArray(allowableTags)) {
			// If it is not an array, explicitly set to null
			allowableTags = null;
		}

		for (i = 0, length = html.length; i < length; i++) {
			c = html[i];

			switch (c) {
				case '<':
				{
					// ignore '<' if inside a quote
					if (inQuote) {
						break;
					}

					// '<' followed by a space is not a valid tag, continue
					if (html[i + 1] == ' ') {
						consumeCharacter(c);
						break;
					}

					// '<' followed by a '<' is not a valid tag, continue
					if (html[i + 1] == '<') {
						consumeCharacter(c);
						break;
					}

					// '<' followed by a '>' is not a valid tag, continue
					if (html[i + 1] == '>') {
						consumeCharacter(c);
						break;
					}

					// handle '<' at the end of the string
					if (i + 1 == length) {
						consumeCharacter(c);
						break;
					}

					// change to STATE_HTML
					if (state == STATE_OUTPUT) {
						state = STATE_HTML;

						consumeCharacter(c);
						break;
					}

					// ignore additional '<' characters when inside a tag
					if (state == STATE_HTML) {
						depth++;
						break;
					}

					consumeCharacter(c);
					break;
				}

				case '>':
				{
					// something like this is happening: '<<>>'
					if (depth) {
						depth--;
						break;
					}

					// ignore '>' if inside a quote
					if (inQuote) {
						break;
					}

					// an HTML tag was closed
					if (state == STATE_HTML) {
						inQuote = state = 0;

						if (allowableTags) {
							tagBuffer += '>';
							flushTagBuffer();
						}

						break;
					}

					// '<!' met its ending '>'
					if (state == STATE_PRE_COMMENT) {
						inQuote = state = 0;
						tagBuffer = '';
						break;
					}

					// if last two characters were '--', then end comment
					if (state == STATE_COMMENT &&
						html[i - 1] == '-' &&
						html[i - 2] == '-') {

						inQuote = state = 0;
						tagBuffer = '';
						break;
					}

					consumeCharacter(c);
					break;
				}

				// catch both single and double quotes
				case '"':
				case '\'':
				{
					if (state == STATE_HTML) {
						if (inQuote == c) {
							// end quote found
							inQuote = false;
						} else if (!inQuote) {
							// start quote only if not already in one
							inQuote = c;
						}
					}

					consumeCharacter(c);
					break;
				}

				case '!':
				{
					if (state == STATE_HTML &&
						html[i - 1] == '<') {

						// looks like we might be starting a comment
						state = STATE_PRE_COMMENT;
						break;
					}

					consumeCharacter(c);
					break;
				}

				case '-':
				{
					// if the previous two characters were '!-', this is a comment
					if (state == STATE_PRE_COMMENT &&
						html[i - 1] == '-' &&
						html[i - 2] == '!') {

						state = STATE_COMMENT;
						break;
					}

					consumeCharacter(c);
					break;
				}

				case 'E':
				case 'e':
				{
					// check for DOCTYPE, because it looks like a comment and isn't
					if (state == STATE_PRE_COMMENT &&
						html.substr(i - 6, 7).toLowerCase() == 'doctype') {

						state = STATE_HTML;
						break;
					}

					consumeCharacter(c);
					break;
				}

				default:
				{
					consumeCharacter(c);
				}
			}
		}

		function consumeCharacter(c) {
			if (state == STATE_OUTPUT) {
				output += c;
			} else if (allowableTags && state == STATE_HTML) {
				tagBuffer += c;
			}
		}

		function flushTagBuffer() {
			var normalized = '',
				nonWhitespaceSeen = false,
				i, length, c;

			normalizeTagBuffer:
				for (i = 0, length = tagBuffer.length; i < length; i++) {
					c = tagBuffer[i].toLowerCase();

					switch (c) {
						case '<':
						{
							break;
						}

						case '>':
						{
							break normalizeTagBuffer;
						}

						case '/':
						{
							nonWhitespaceSeen = true;
							break;
						}

						default:
						{
							if (!c.match(WHITESPACE)) {
								nonWhitespaceSeen = true;
								normalized += c;
							} else if (nonWhitespaceSeen) {
								break normalizeTagBuffer;
							}
						}
					}
				}

			if (allowableTags.indexOf(normalized) !== -1) {
				output += tagBuffer;
			}

			tagBuffer = '';
		}

		/**
		 * Helper function to test if a string begins with any one of an array of strings.
		 * Useful for checking if attribute values begin with a dangerous string.
		 *
		 * @param {string} haystackStr
		 * @param {string[]} needleArr - array of strings to match
		 * @returns {boolean}
		 */
		function startsWithArrayItem(haystackStr, needleArr) {
			for (var i = needleArr.length; i--;) {
				// value starts with a dangerous string
				if (haystackStr.indexOf(needleArr[i]) === 0) {
					return true
				}
			}
			return false;
		}

		/**
		 * Removes potentially harmful HTML attributes
		 * @param {string} htmlStr
		 */
		function sanitiseAttributes(htmlStr) {
			var div,
				elements;

			// convert string to array of HTML elements
			div = document.createElement('div');
			div.innerHTML = htmlStr;

			// excludes text nodes
			elements = div.getElementsByTagName('*');

			for (var i = elements.length; i--;) {

				for (var j = elements[i].attributes.length; j--;) {
					var currentAttr = elements[i].attributes[j];
					var currentAttrName = currentAttr.name;
					var currentAttrValue;
					var dangerousStrings = ['javascript', 'jscript', 'vbscript'];

					// remove on* event attributes
					if (currentAttrName.slice(0, 2) === 'on') {
						elements[i].removeAttribute(currentAttrName);
						continue;
					}

					currentAttrValue = currentAttr.value.toLowerCase();

					switch (currentAttrName) {
						case 'href':
							//remove hrefs to java/j/vbscript URLs
							if (startsWithArrayItem(currentAttrValue, dangerousStrings)) {
								elements[i].setAttribute(currentAttrName, '#');
							}
							break;
						case 'style':
							// remove any style attributes that contain the word expression (IE evaluates this as script)
							if (currentAttrValue.indexOf('expression') !== -1) {
								elements[i].removeAttribute(currentAttrName);
							}
							break;
						case 'src':
							//remove img with refs to java/j/vbscript URLs
							if (startsWithArrayItem(currentAttrValue, dangerousStrings)) {
								elements[i].setAttribute(currentAttrName, '#');
							}
							break;
					}
				}
			}

			return div.innerHTML;
		}

		// optionally sanitise attributes in the processed HTML
		return sanitiseAttributes ? sanitiseAttributes(output) : output;
	}

	/**
	 * Return an array containing tags that are allowed to pass through the
	 * algorithm.
	 *
	 * @param string allowableTags A string of tags to allow (e.g. "<b><strong>").
	 * @return array|null An array of allowed tags or null if none.
	 */
	function parseAllowableTags(allowableTags) {
		var tagsArray = [],
			match;

		while ((match = ALLOWED_TAGS_REGEX.exec(allowableTags)) !== null) {
			tagsArray.push(match[1]);
		}

		return tagsArray.length !== 0 ? tagsArray : null;
	}

	return striptags;
}));

/*!

 handlebars v1.3.0

Copyright (C) 2011 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

@license
*/
/* exported Handlebars */
var Handlebars = (function() {
// handlebars/safe-string.js
var __module4__ = (function() {
  "use strict";
  var __exports__;
  // Build out our basic SafeString type
  function SafeString(string) {
    this.string = string;
  }

  SafeString.prototype.toString = function() {
    return "" + this.string;
  };

  __exports__ = SafeString;
  return __exports__;
})();

// handlebars/utils.js
var __module3__ = (function(__dependency1__) {
  "use strict";
  var __exports__ = {};
  /*jshint -W004 */
  var SafeString = __dependency1__;

  var escape = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#x27;",
    "`": "&#x60;"
  };

  var badChars = /[&<>"'`]/g;
  var possible = /[&<>"'`]/;

  function escapeChar(chr) {
    return escape[chr] || "&amp;";
  }

  function extend(obj, value) {
    for(var key in value) {
      if(Object.prototype.hasOwnProperty.call(value, key)) {
        obj[key] = value[key];
      }
    }
  }

  __exports__.extend = extend;var toString = Object.prototype.toString;
  __exports__.toString = toString;
  // Sourced from lodash
  // https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
  var isFunction = function(value) {
    return typeof value === 'function';
  };
  // fallback for older versions of Chrome and Safari
  if (isFunction(/x/)) {
    isFunction = function(value) {
      return typeof value === 'function' && toString.call(value) === '[object Function]';
    };
  }
  var isFunction;
  __exports__.isFunction = isFunction;
  var isArray = Array.isArray || function(value) {
    return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;
  };
  __exports__.isArray = isArray;

  function escapeExpression(string) {
    // don't escape SafeStrings, since they're already safe
    if (string instanceof SafeString) {
      return string.toString();
    } else if (!string && string !== 0) {
      return "";
    }

    // Force a string conversion as this will be done by the append regardless and
    // the regex test will do this transparently behind the scenes, causing issues if
    // an object's to string has escaped characters in it.
    string = "" + string;

    if(!possible.test(string)) { return string; }
    return string.replace(badChars, escapeChar);
  }

  __exports__.escapeExpression = escapeExpression;function isEmpty(value) {
    if (!value && value !== 0) {
      return true;
    } else if (isArray(value) && value.length === 0) {
      return true;
    } else {
      return false;
    }
  }

  __exports__.isEmpty = isEmpty;
  return __exports__;
})(__module4__);

// handlebars/exception.js
var __module5__ = (function() {
  "use strict";
  var __exports__;

  var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

  function Exception(message, node) {
    var line;
    if (node && node.firstLine) {
      line = node.firstLine;

      message += ' - ' + line + ':' + node.firstColumn;
    }

    var tmp = Error.prototype.constructor.call(this, message);

    // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
    for (var idx = 0; idx < errorProps.length; idx++) {
      this[errorProps[idx]] = tmp[errorProps[idx]];
    }

    if (line) {
      this.lineNumber = line;
      this.column = node.firstColumn;
    }
  }

  Exception.prototype = new Error();

  __exports__ = Exception;
  return __exports__;
})();

// handlebars/base.js
var __module2__ = (function(__dependency1__, __dependency2__) {
  "use strict";
  var __exports__ = {};
  var Utils = __dependency1__;
  var Exception = __dependency2__;

  var VERSION = "1.3.0";
  __exports__.VERSION = VERSION;var COMPILER_REVISION = 4;
  __exports__.COMPILER_REVISION = COMPILER_REVISION;
  var REVISION_CHANGES = {
    1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
    2: '== 1.0.0-rc.3',
    3: '== 1.0.0-rc.4',
    4: '>= 1.0.0'
  };
  __exports__.REVISION_CHANGES = REVISION_CHANGES;
  var isArray = Utils.isArray,
      isFunction = Utils.isFunction,
      toString = Utils.toString,
      objectType = '[object Object]';

  function HandlebarsEnvironment(helpers, partials) {
    this.helpers = helpers || {};
    this.partials = partials || {};

    registerDefaultHelpers(this);
  }

  __exports__.HandlebarsEnvironment = HandlebarsEnvironment;HandlebarsEnvironment.prototype = {
    constructor: HandlebarsEnvironment,

    logger: logger,
    log: log,

    registerHelper: function(name, fn, inverse) {
      if (toString.call(name) === objectType) {
        if (inverse || fn) { throw new Exception('Arg not supported with multiple helpers'); }
        Utils.extend(this.helpers, name);
      } else {
        if (inverse) { fn.not = inverse; }
        this.helpers[name] = fn;
      }
    },

    registerPartial: function(name, str) {
      if (toString.call(name) === objectType) {
        Utils.extend(this.partials,  name);
      } else {
        this.partials[name] = str;
      }
    }
  };

  function registerDefaultHelpers(instance) {
    instance.registerHelper('helperMissing', function(arg) {
      if(arguments.length === 2) {
        return undefined;
      } else {
        throw new Exception("Missing helper: '" + arg + "'");
      }
    });

    instance.registerHelper('blockHelperMissing', function(context, options) {
      var inverse = options.inverse || function() {}, fn = options.fn;

      if (isFunction(context)) { context = context.call(this); }

      if(context === true) {
        return fn(this);
      } else if(context === false || context == null) {
        return inverse(this);
      } else if (isArray(context)) {
        if(context.length > 0) {
          return instance.helpers.each(context, options);
        } else {
          return inverse(this);
        }
      } else {
        return fn(context);
      }
    });

    instance.registerHelper('each', function(context, options) {
      var fn = options.fn, inverse = options.inverse;
      var i = 0, ret = "", data;

      if (isFunction(context)) { context = context.call(this); }

      if (options.data) {
        data = createFrame(options.data);
      }

      if(context && typeof context === 'object') {
        if (isArray(context)) {
          for(var j = context.length; i<j; i++) {
            if (data) {
              data.index = i;
              data.first = (i === 0);
              data.last  = (i === (context.length-1));
            }
            ret = ret + fn(context[i], { data: data });
          }
        } else {
          for(var key in context) {
            if(context.hasOwnProperty(key)) {
              if(data) { 
                data.key = key; 
                data.index = i;
                data.first = (i === 0);
              }
              ret = ret + fn(context[key], {data: data});
              i++;
            }
          }
        }
      }

      if(i === 0){
        ret = inverse(this);
      }

      return ret;
    });

    instance.registerHelper('if', function(conditional, options) {
      if (isFunction(conditional)) { conditional = conditional.call(this); }

      // Default behavior is to render the positive path if the value is truthy and not empty.
      // The `includeZero` option may be set to treat the condtional as purely not empty based on the
      // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
      if ((!options.hash.includeZero && !conditional) || Utils.isEmpty(conditional)) {
        return options.inverse(this);
      } else {
        return options.fn(this);
      }
    });

    instance.registerHelper('unless', function(conditional, options) {
      return instance.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn, hash: options.hash});
    });

    instance.registerHelper('with', function(context, options) {
      if (isFunction(context)) { context = context.call(this); }

      if (!Utils.isEmpty(context)) return options.fn(context);
    });

    instance.registerHelper('log', function(context, options) {
      var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
      instance.log(level, context);
    });
  }

  var logger = {
    methodMap: { 0: 'debug', 1: 'info', 2: 'warn', 3: 'error' },

    // State enum
    DEBUG: 0,
    INFO: 1,
    WARN: 2,
    ERROR: 3,
    level: 3,

    // can be overridden in the host environment
    log: function(level, obj) {
      if (logger.level <= level) {
        var method = logger.methodMap[level];
        if (typeof console !== 'undefined' && console[method]) {
          console[method].call(console, obj);
        }
      }
    }
  };
  __exports__.logger = logger;
  function log(level, obj) { logger.log(level, obj); }

  __exports__.log = log;var createFrame = function(object) {
    var obj = {};
    Utils.extend(obj, object);
    return obj;
  };
  __exports__.createFrame = createFrame;
  return __exports__;
})(__module3__, __module5__);

// handlebars/runtime.js
var __module6__ = (function(__dependency1__, __dependency2__, __dependency3__) {
  "use strict";
  var __exports__ = {};
  var Utils = __dependency1__;
  var Exception = __dependency2__;
  var COMPILER_REVISION = __dependency3__.COMPILER_REVISION;
  var REVISION_CHANGES = __dependency3__.REVISION_CHANGES;

  function checkRevision(compilerInfo) {
    var compilerRevision = compilerInfo && compilerInfo[0] || 1,
        currentRevision = COMPILER_REVISION;

    if (compilerRevision !== currentRevision) {
      if (compilerRevision < currentRevision) {
        var runtimeVersions = REVISION_CHANGES[currentRevision],
            compilerVersions = REVISION_CHANGES[compilerRevision];
        throw new Exception("Template was precompiled with an older version of Handlebars than the current runtime. "+
              "Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").");
      } else {
        // Use the embedded version info since the runtime doesn't know about this revision yet
        throw new Exception("Template was precompiled with a newer version of Handlebars than the current runtime. "+
              "Please update your runtime to a newer version ("+compilerInfo[1]+").");
      }
    }
  }

  __exports__.checkRevision = checkRevision;// TODO: Remove this line and break up compilePartial

  function template(templateSpec, env) {
    if (!env) {
      throw new Exception("No environment passed to template");
    }

    // Note: Using env.VM references rather than local var references throughout this section to allow
    // for external users to override these as psuedo-supported APIs.
    var invokePartialWrapper = function(partial, name, context, helpers, partials, data) {
      var result = env.VM.invokePartial.apply(this, arguments);
      if (result != null) { return result; }

      if (env.compile) {
        var options = { helpers: helpers, partials: partials, data: data };
        partials[name] = env.compile(partial, { data: data !== undefined }, env);
        return partials[name](context, options);
      } else {
        throw new Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
      }
    };

    // Just add water
    var container = {
      escapeExpression: Utils.escapeExpression,
      invokePartial: invokePartialWrapper,
      programs: [],
      program: function(i, fn, data) {
        var programWrapper = this.programs[i];
        if(data) {
          programWrapper = program(i, fn, data);
        } else if (!programWrapper) {
          programWrapper = this.programs[i] = program(i, fn);
        }
        return programWrapper;
      },
      merge: function(param, common) {
        var ret = param || common;

        if (param && common && (param !== common)) {
          ret = {};
          Utils.extend(ret, common);
          Utils.extend(ret, param);
        }
        return ret;
      },
      programWithDepth: env.VM.programWithDepth,
      noop: env.VM.noop,
      compilerInfo: null
    };

    return function(context, options) {
      options = options || {};
      var namespace = options.partial ? options : env,
          helpers,
          partials;

      if (!options.partial) {
        helpers = options.helpers;
        partials = options.partials;
      }
      var result = templateSpec.call(
            container,
            namespace, context,
            helpers,
            partials,
            options.data);

      if (!options.partial) {
        env.VM.checkRevision(container.compilerInfo);
      }

      return result;
    };
  }

  __exports__.template = template;function programWithDepth(i, fn, data /*, $depth */) {
    var args = Array.prototype.slice.call(arguments, 3);

    var prog = function(context, options) {
      options = options || {};

      return fn.apply(this, [context, options.data || data].concat(args));
    };
    prog.program = i;
    prog.depth = args.length;
    return prog;
  }

  __exports__.programWithDepth = programWithDepth;function program(i, fn, data) {
    var prog = function(context, options) {
      options = options || {};

      return fn(context, options.data || data);
    };
    prog.program = i;
    prog.depth = 0;
    return prog;
  }

  __exports__.program = program;function invokePartial(partial, name, context, helpers, partials, data) {
    var options = { partial: true, helpers: helpers, partials: partials, data: data };

    if(partial === undefined) {
      throw new Exception("The partial " + name + " could not be found");
    } else if(partial instanceof Function) {
      return partial(context, options);
    }
  }

  __exports__.invokePartial = invokePartial;function noop() { return ""; }

  __exports__.noop = noop;
  return __exports__;
})(__module3__, __module5__, __module2__);

// handlebars.runtime.js
var __module1__ = (function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {
  "use strict";
  var __exports__;
  /*globals Handlebars: true */
  var base = __dependency1__;

  // Each of these augment the Handlebars object. No need to setup here.
  // (This is done to easily share code between commonjs and browse envs)
  var SafeString = __dependency2__;
  var Exception = __dependency3__;
  var Utils = __dependency4__;
  var runtime = __dependency5__;

  // For compatibility and usage outside of module systems, make the Handlebars object a namespace
  var create = function() {
    var hb = new base.HandlebarsEnvironment();

    Utils.extend(hb, base);
    hb.SafeString = SafeString;
    hb.Exception = Exception;
    hb.Utils = Utils;

    hb.VM = runtime;
    hb.template = function(spec) {
      return runtime.template(spec, hb);
    };

    return hb;
  };

  var Handlebars = create();
  Handlebars.create = create;

  __exports__ = Handlebars;
  return __exports__;
})(__module2__, __module4__, __module5__, __module3__, __module6__);

// handlebars/compiler/ast.js
var __module7__ = (function(__dependency1__) {
  "use strict";
  var __exports__;
  var Exception = __dependency1__;

  function LocationInfo(locInfo){
    locInfo = locInfo || {};
    this.firstLine   = locInfo.first_line;
    this.firstColumn = locInfo.first_column;
    this.lastColumn  = locInfo.last_column;
    this.lastLine    = locInfo.last_line;
  }

  var AST = {
    ProgramNode: function(statements, inverseStrip, inverse, locInfo) {
      var inverseLocationInfo, firstInverseNode;
      if (arguments.length === 3) {
        locInfo = inverse;
        inverse = null;
      } else if (arguments.length === 2) {
        locInfo = inverseStrip;
        inverseStrip = null;
      }

      LocationInfo.call(this, locInfo);
      this.type = "program";
      this.statements = statements;
      this.strip = {};

      if(inverse) {
        firstInverseNode = inverse[0];
        if (firstInverseNode) {
          inverseLocationInfo = {
            first_line: firstInverseNode.firstLine,
            last_line: firstInverseNode.lastLine,
            last_column: firstInverseNode.lastColumn,
            first_column: firstInverseNode.firstColumn
          };
          this.inverse = new AST.ProgramNode(inverse, inverseStrip, inverseLocationInfo);
        } else {
          this.inverse = new AST.ProgramNode(inverse, inverseStrip);
        }
        this.strip.right = inverseStrip.left;
      } else if (inverseStrip) {
        this.strip.left = inverseStrip.right;
      }
    },

    MustacheNode: function(rawParams, hash, open, strip, locInfo) {
      LocationInfo.call(this, locInfo);
      this.type = "mustache";
      this.strip = strip;

      // Open may be a string parsed from the parser or a passed boolean flag
      if (open != null && open.charAt) {
        // Must use charAt to support IE pre-10
        var escapeFlag = open.charAt(3) || open.charAt(2);
        this.escaped = escapeFlag !== '{' && escapeFlag !== '&';
      } else {
        this.escaped = !!open;
      }

      if (rawParams instanceof AST.SexprNode) {
        this.sexpr = rawParams;
      } else {
        // Support old AST API
        this.sexpr = new AST.SexprNode(rawParams, hash);
      }

      this.sexpr.isRoot = true;

      // Support old AST API that stored this info in MustacheNode
      this.id = this.sexpr.id;
      this.params = this.sexpr.params;
      this.hash = this.sexpr.hash;
      this.eligibleHelper = this.sexpr.eligibleHelper;
      this.isHelper = this.sexpr.isHelper;
    },

    SexprNode: function(rawParams, hash, locInfo) {
      LocationInfo.call(this, locInfo);

      this.type = "sexpr";
      this.hash = hash;

      var id = this.id = rawParams[0];
      var params = this.params = rawParams.slice(1);

      // a mustache is an eligible helper if:
      // * its id is simple (a single part, not `this` or `..`)
      var eligibleHelper = this.eligibleHelper = id.isSimple;

      // a mustache is definitely a helper if:
      // * it is an eligible helper, and
      // * it has at least one parameter or hash segment
      this.isHelper = eligibleHelper && (params.length || hash);

      // if a mustache is an eligible helper but not a definite
      // helper, it is ambiguous, and will be resolved in a later
      // pass or at runtime.
    },

    PartialNode: function(partialName, context, strip, locInfo) {
      LocationInfo.call(this, locInfo);
      this.type         = "partial";
      this.partialName  = partialName;
      this.context      = context;
      this.strip = strip;
    },

    BlockNode: function(mustache, program, inverse, close, locInfo) {
      LocationInfo.call(this, locInfo);

      if(mustache.sexpr.id.original !== close.path.original) {
        throw new Exception(mustache.sexpr.id.original + " doesn't match " + close.path.original, this);
      }

      this.type = 'block';
      this.mustache = mustache;
      this.program  = program;
      this.inverse  = inverse;

      this.strip = {
        left: mustache.strip.left,
        right: close.strip.right
      };

      (program || inverse).strip.left = mustache.strip.right;
      (inverse || program).strip.right = close.strip.left;

      if (inverse && !program) {
        this.isInverse = true;
      }
    },

    ContentNode: function(string, locInfo) {
      LocationInfo.call(this, locInfo);
      this.type = "content";
      this.string = string;
    },

    HashNode: function(pairs, locInfo) {
      LocationInfo.call(this, locInfo);
      this.type = "hash";
      this.pairs = pairs;
    },

    IdNode: function(parts, locInfo) {
      LocationInfo.call(this, locInfo);
      this.type = "ID";

      var original = "",
          dig = [],
          depth = 0;

      for(var i=0,l=parts.length; i<l; i++) {
        var part = parts[i].part;
        original += (parts[i].separator || '') + part;

        if (part === ".." || part === "." || part === "this") {
          if (dig.length > 0) {
            throw new Exception("Invalid path: " + original, this);
          } else if (part === "..") {
            depth++;
          } else {
            this.isScoped = true;
          }
        } else {
          dig.push(part);
        }
      }

      this.original = original;
      this.parts    = dig;
      this.string   = dig.join('.');
      this.depth    = depth;

      // an ID is simple if it only has one part, and that part is not
      // `..` or `this`.
      this.isSimple = parts.length === 1 && !this.isScoped && depth === 0;

      this.stringModeValue = this.string;
    },

    PartialNameNode: function(name, locInfo) {
      LocationInfo.call(this, locInfo);
      this.type = "PARTIAL_NAME";
      this.name = name.original;
    },

    DataNode: function(id, locInfo) {
      LocationInfo.call(this, locInfo);
      this.type = "DATA";
      this.id = id;
    },

    StringNode: function(string, locInfo) {
      LocationInfo.call(this, locInfo);
      this.type = "STRING";
      this.original =
        this.string =
        this.stringModeValue = string;
    },

    IntegerNode: function(integer, locInfo) {
      LocationInfo.call(this, locInfo);
      this.type = "INTEGER";
      this.original =
        this.integer = integer;
      this.stringModeValue = Number(integer);
    },

    BooleanNode: function(bool, locInfo) {
      LocationInfo.call(this, locInfo);
      this.type = "BOOLEAN";
      this.bool = bool;
      this.stringModeValue = bool === "true";
    },

    CommentNode: function(comment, locInfo) {
      LocationInfo.call(this, locInfo);
      this.type = "comment";
      this.comment = comment;
    }
  };

  // Must be exported as an object rather than the root of the module as the jison lexer
  // most modify the object to operate properly.
  __exports__ = AST;
  return __exports__;
})(__module5__);

// handlebars/compiler/parser.js
var __module9__ = (function() {
  "use strict";
  var __exports__;
  /* jshint ignore:start */
  /* Jison generated parser */
  var handlebars = (function(){
  var parser = {trace: function trace() { },
  yy: {},
  symbols_: {"error":2,"root":3,"statements":4,"EOF":5,"program":6,"simpleInverse":7,"statement":8,"openInverse":9,"closeBlock":10,"openBlock":11,"mustache":12,"partial":13,"CONTENT":14,"COMMENT":15,"OPEN_BLOCK":16,"sexpr":17,"CLOSE":18,"OPEN_INVERSE":19,"OPEN_ENDBLOCK":20,"path":21,"OPEN":22,"OPEN_UNESCAPED":23,"CLOSE_UNESCAPED":24,"OPEN_PARTIAL":25,"partialName":26,"partial_option0":27,"sexpr_repetition0":28,"sexpr_option0":29,"dataName":30,"param":31,"STRING":32,"INTEGER":33,"BOOLEAN":34,"OPEN_SEXPR":35,"CLOSE_SEXPR":36,"hash":37,"hash_repetition_plus0":38,"hashSegment":39,"ID":40,"EQUALS":41,"DATA":42,"pathSegments":43,"SEP":44,"$accept":0,"$end":1},
  terminals_: {2:"error",5:"EOF",14:"CONTENT",15:"COMMENT",16:"OPEN_BLOCK",18:"CLOSE",19:"OPEN_INVERSE",20:"OPEN_ENDBLOCK",22:"OPEN",23:"OPEN_UNESCAPED",24:"CLOSE_UNESCAPED",25:"OPEN_PARTIAL",32:"STRING",33:"INTEGER",34:"BOOLEAN",35:"OPEN_SEXPR",36:"CLOSE_SEXPR",40:"ID",41:"EQUALS",42:"DATA",44:"SEP"},
  productions_: [0,[3,2],[3,1],[6,2],[6,3],[6,2],[6,1],[6,1],[6,0],[4,1],[4,2],[8,3],[8,3],[8,1],[8,1],[8,1],[8,1],[11,3],[9,3],[10,3],[12,3],[12,3],[13,4],[7,2],[17,3],[17,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,3],[37,1],[39,3],[26,1],[26,1],[26,1],[30,2],[21,1],[43,3],[43,1],[27,0],[27,1],[28,0],[28,2],[29,0],[29,1],[38,1],[38,2]],
  performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

  var $0 = $$.length - 1;
  switch (yystate) {
  case 1: return new yy.ProgramNode($$[$0-1], this._$); 
  break;
  case 2: return new yy.ProgramNode([], this._$); 
  break;
  case 3:this.$ = new yy.ProgramNode([], $$[$0-1], $$[$0], this._$);
  break;
  case 4:this.$ = new yy.ProgramNode($$[$0-2], $$[$0-1], $$[$0], this._$);
  break;
  case 5:this.$ = new yy.ProgramNode($$[$0-1], $$[$0], [], this._$);
  break;
  case 6:this.$ = new yy.ProgramNode($$[$0], this._$);
  break;
  case 7:this.$ = new yy.ProgramNode([], this._$);
  break;
  case 8:this.$ = new yy.ProgramNode([], this._$);
  break;
  case 9:this.$ = [$$[$0]];
  break;
  case 10: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
  break;
  case 11:this.$ = new yy.BlockNode($$[$0-2], $$[$0-1].inverse, $$[$0-1], $$[$0], this._$);
  break;
  case 12:this.$ = new yy.BlockNode($$[$0-2], $$[$0-1], $$[$0-1].inverse, $$[$0], this._$);
  break;
  case 13:this.$ = $$[$0];
  break;
  case 14:this.$ = $$[$0];
  break;
  case 15:this.$ = new yy.ContentNode($$[$0], this._$);
  break;
  case 16:this.$ = new yy.CommentNode($$[$0], this._$);
  break;
  case 17:this.$ = new yy.MustacheNode($$[$0-1], null, $$[$0-2], stripFlags($$[$0-2], $$[$0]), this._$);
  break;
  case 18:this.$ = new yy.MustacheNode($$[$0-1], null, $$[$0-2], stripFlags($$[$0-2], $$[$0]), this._$);
  break;
  case 19:this.$ = {path: $$[$0-1], strip: stripFlags($$[$0-2], $$[$0])};
  break;
  case 20:this.$ = new yy.MustacheNode($$[$0-1], null, $$[$0-2], stripFlags($$[$0-2], $$[$0]), this._$);
  break;
  case 21:this.$ = new yy.MustacheNode($$[$0-1], null, $$[$0-2], stripFlags($$[$0-2], $$[$0]), this._$);
  break;
  case 22:this.$ = new yy.PartialNode($$[$0-2], $$[$0-1], stripFlags($$[$0-3], $$[$0]), this._$);
  break;
  case 23:this.$ = stripFlags($$[$0-1], $$[$0]);
  break;
  case 24:this.$ = new yy.SexprNode([$$[$0-2]].concat($$[$0-1]), $$[$0], this._$);
  break;
  case 25:this.$ = new yy.SexprNode([$$[$0]], null, this._$);
  break;
  case 26:this.$ = $$[$0];
  break;
  case 27:this.$ = new yy.StringNode($$[$0], this._$);
  break;
  case 28:this.$ = new yy.IntegerNode($$[$0], this._$);
  break;
  case 29:this.$ = new yy.BooleanNode($$[$0], this._$);
  break;
  case 30:this.$ = $$[$0];
  break;
  case 31:$$[$0-1].isHelper = true; this.$ = $$[$0-1];
  break;
  case 32:this.$ = new yy.HashNode($$[$0], this._$);
  break;
  case 33:this.$ = [$$[$0-2], $$[$0]];
  break;
  case 34:this.$ = new yy.PartialNameNode($$[$0], this._$);
  break;
  case 35:this.$ = new yy.PartialNameNode(new yy.StringNode($$[$0], this._$), this._$);
  break;
  case 36:this.$ = new yy.PartialNameNode(new yy.IntegerNode($$[$0], this._$));
  break;
  case 37:this.$ = new yy.DataNode($$[$0], this._$);
  break;
  case 38:this.$ = new yy.IdNode($$[$0], this._$);
  break;
  case 39: $$[$0-2].push({part: $$[$0], separator: $$[$0-1]}); this.$ = $$[$0-2]; 
  break;
  case 40:this.$ = [{part: $$[$0]}];
  break;
  case 43:this.$ = [];
  break;
  case 44:$$[$0-1].push($$[$0]);
  break;
  case 47:this.$ = [$$[$0]];
  break;
  case 48:$$[$0-1].push($$[$0]);
  break;
  }
  },
  table: [{3:1,4:2,5:[1,3],8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],22:[1,13],23:[1,14],25:[1,15]},{1:[3]},{5:[1,16],8:17,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],22:[1,13],23:[1,14],25:[1,15]},{1:[2,2]},{5:[2,9],14:[2,9],15:[2,9],16:[2,9],19:[2,9],20:[2,9],22:[2,9],23:[2,9],25:[2,9]},{4:20,6:18,7:19,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,21],20:[2,8],22:[1,13],23:[1,14],25:[1,15]},{4:20,6:22,7:19,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,21],20:[2,8],22:[1,13],23:[1,14],25:[1,15]},{5:[2,13],14:[2,13],15:[2,13],16:[2,13],19:[2,13],20:[2,13],22:[2,13],23:[2,13],25:[2,13]},{5:[2,14],14:[2,14],15:[2,14],16:[2,14],19:[2,14],20:[2,14],22:[2,14],23:[2,14],25:[2,14]},{5:[2,15],14:[2,15],15:[2,15],16:[2,15],19:[2,15],20:[2,15],22:[2,15],23:[2,15],25:[2,15]},{5:[2,16],14:[2,16],15:[2,16],16:[2,16],19:[2,16],20:[2,16],22:[2,16],23:[2,16],25:[2,16]},{17:23,21:24,30:25,40:[1,28],42:[1,27],43:26},{17:29,21:24,30:25,40:[1,28],42:[1,27],43:26},{17:30,21:24,30:25,40:[1,28],42:[1,27],43:26},{17:31,21:24,30:25,40:[1,28],42:[1,27],43:26},{21:33,26:32,32:[1,34],33:[1,35],40:[1,28],43:26},{1:[2,1]},{5:[2,10],14:[2,10],15:[2,10],16:[2,10],19:[2,10],20:[2,10],22:[2,10],23:[2,10],25:[2,10]},{10:36,20:[1,37]},{4:38,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,7],22:[1,13],23:[1,14],25:[1,15]},{7:39,8:17,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,21],20:[2,6],22:[1,13],23:[1,14],25:[1,15]},{17:23,18:[1,40],21:24,30:25,40:[1,28],42:[1,27],43:26},{10:41,20:[1,37]},{18:[1,42]},{18:[2,43],24:[2,43],28:43,32:[2,43],33:[2,43],34:[2,43],35:[2,43],36:[2,43],40:[2,43],42:[2,43]},{18:[2,25],24:[2,25],36:[2,25]},{18:[2,38],24:[2,38],32:[2,38],33:[2,38],34:[2,38],35:[2,38],36:[2,38],40:[2,38],42:[2,38],44:[1,44]},{21:45,40:[1,28],43:26},{18:[2,40],24:[2,40],32:[2,40],33:[2,40],34:[2,40],35:[2,40],36:[2,40],40:[2,40],42:[2,40],44:[2,40]},{18:[1,46]},{18:[1,47]},{24:[1,48]},{18:[2,41],21:50,27:49,40:[1,28],43:26},{18:[2,34],40:[2,34]},{18:[2,35],40:[2,35]},{18:[2,36],40:[2,36]},{5:[2,11],14:[2,11],15:[2,11],16:[2,11],19:[2,11],20:[2,11],22:[2,11],23:[2,11],25:[2,11]},{21:51,40:[1,28],43:26},{8:17,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,3],22:[1,13],23:[1,14],25:[1,15]},{4:52,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,5],22:[1,13],23:[1,14],25:[1,15]},{14:[2,23],15:[2,23],16:[2,23],19:[2,23],20:[2,23],22:[2,23],23:[2,23],25:[2,23]},{5:[2,12],14:[2,12],15:[2,12],16:[2,12],19:[2,12],20:[2,12],22:[2,12],23:[2,12],25:[2,12]},{14:[2,18],15:[2,18],16:[2,18],19:[2,18],20:[2,18],22:[2,18],23:[2,18],25:[2,18]},{18:[2,45],21:56,24:[2,45],29:53,30:60,31:54,32:[1,57],33:[1,58],34:[1,59],35:[1,61],36:[2,45],37:55,38:62,39:63,40:[1,64],42:[1,27],43:26},{40:[1,65]},{18:[2,37],24:[2,37],32:[2,37],33:[2,37],34:[2,37],35:[2,37],36:[2,37],40:[2,37],42:[2,37]},{14:[2,17],15:[2,17],16:[2,17],19:[2,17],20:[2,17],22:[2,17],23:[2,17],25:[2,17]},{5:[2,20],14:[2,20],15:[2,20],16:[2,20],19:[2,20],20:[2,20],22:[2,20],23:[2,20],25:[2,20]},{5:[2,21],14:[2,21],15:[2,21],16:[2,21],19:[2,21],20:[2,21],22:[2,21],23:[2,21],25:[2,21]},{18:[1,66]},{18:[2,42]},{18:[1,67]},{8:17,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,4],22:[1,13],23:[1,14],25:[1,15]},{18:[2,24],24:[2,24],36:[2,24]},{18:[2,44],24:[2,44],32:[2,44],33:[2,44],34:[2,44],35:[2,44],36:[2,44],40:[2,44],42:[2,44]},{18:[2,46],24:[2,46],36:[2,46]},{18:[2,26],24:[2,26],32:[2,26],33:[2,26],34:[2,26],35:[2,26],36:[2,26],40:[2,26],42:[2,26]},{18:[2,27],24:[2,27],32:[2,27],33:[2,27],34:[2,27],35:[2,27],36:[2,27],40:[2,27],42:[2,27]},{18:[2,28],24:[2,28],32:[2,28],33:[2,28],34:[2,28],35:[2,28],36:[2,28],40:[2,28],42:[2,28]},{18:[2,29],24:[2,29],32:[2,29],33:[2,29],34:[2,29],35:[2,29],36:[2,29],40:[2,29],42:[2,29]},{18:[2,30],24:[2,30],32:[2,30],33:[2,30],34:[2,30],35:[2,30],36:[2,30],40:[2,30],42:[2,30]},{17:68,21:24,30:25,40:[1,28],42:[1,27],43:26},{18:[2,32],24:[2,32],36:[2,32],39:69,40:[1,70]},{18:[2,47],24:[2,47],36:[2,47],40:[2,47]},{18:[2,40],24:[2,40],32:[2,40],33:[2,40],34:[2,40],35:[2,40],36:[2,40],40:[2,40],41:[1,71],42:[2,40],44:[2,40]},{18:[2,39],24:[2,39],32:[2,39],33:[2,39],34:[2,39],35:[2,39],36:[2,39],40:[2,39],42:[2,39],44:[2,39]},{5:[2,22],14:[2,22],15:[2,22],16:[2,22],19:[2,22],20:[2,22],22:[2,22],23:[2,22],25:[2,22]},{5:[2,19],14:[2,19],15:[2,19],16:[2,19],19:[2,19],20:[2,19],22:[2,19],23:[2,19],25:[2,19]},{36:[1,72]},{18:[2,48],24:[2,48],36:[2,48],40:[2,48]},{41:[1,71]},{21:56,30:60,31:73,32:[1,57],33:[1,58],34:[1,59],35:[1,61],40:[1,28],42:[1,27],43:26},{18:[2,31],24:[2,31],32:[2,31],33:[2,31],34:[2,31],35:[2,31],36:[2,31],40:[2,31],42:[2,31]},{18:[2,33],24:[2,33],36:[2,33],40:[2,33]}],
  defaultActions: {3:[2,2],16:[2,1],50:[2,42]},
  parseError: function parseError(str, hash) {
      throw new Error(str);
  },
  parse: function parse(input) {
      var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
      this.lexer.setInput(input);
      this.lexer.yy = this.yy;
      this.yy.lexer = this.lexer;
      this.yy.parser = this;
      if (typeof this.lexer.yylloc == "undefined")
          this.lexer.yylloc = {};
      var yyloc = this.lexer.yylloc;
      lstack.push(yyloc);
      var ranges = this.lexer.options && this.lexer.options.ranges;
      if (typeof this.yy.parseError === "function")
          this.parseError = this.yy.parseError;
      function popStack(n) {
          stack.length = stack.length - 2 * n;
          vstack.length = vstack.length - n;
          lstack.length = lstack.length - n;
      }
      function lex() {
          var token;
          token = self.lexer.lex() || 1;
          if (typeof token !== "number") {
              token = self.symbols_[token] || token;
          }
          return token;
      }
      var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
      while (true) {
          state = stack[stack.length - 1];
          if (this.defaultActions[state]) {
              action = this.defaultActions[state];
          } else {
              if (symbol === null || typeof symbol == "undefined") {
                  symbol = lex();
              }
              action = table[state] && table[state][symbol];
          }
          if (typeof action === "undefined" || !action.length || !action[0]) {
              var errStr = "";
              if (!recovering) {
                  expected = [];
                  for (p in table[state])
                      if (this.terminals_[p] && p > 2) {
                          expected.push("'" + this.terminals_[p] + "'");
                      }
                  if (this.lexer.showPosition) {
                      errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                  } else {
                      errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                  }
                  this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
              }
          }
          if (action[0] instanceof Array && action.length > 1) {
              throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
          }
          switch (action[0]) {
          case 1:
              stack.push(symbol);
              vstack.push(this.lexer.yytext);
              lstack.push(this.lexer.yylloc);
              stack.push(action[1]);
              symbol = null;
              if (!preErrorSymbol) {
                  yyleng = this.lexer.yyleng;
                  yytext = this.lexer.yytext;
                  yylineno = this.lexer.yylineno;
                  yyloc = this.lexer.yylloc;
                  if (recovering > 0)
                      recovering--;
              } else {
                  symbol = preErrorSymbol;
                  preErrorSymbol = null;
              }
              break;
          case 2:
              len = this.productions_[action[1]][1];
              yyval.$ = vstack[vstack.length - len];
              yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
              if (ranges) {
                  yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
              }
              r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
              if (typeof r !== "undefined") {
                  return r;
              }
              if (len) {
                  stack = stack.slice(0, -1 * len * 2);
                  vstack = vstack.slice(0, -1 * len);
                  lstack = lstack.slice(0, -1 * len);
              }
              stack.push(this.productions_[action[1]][0]);
              vstack.push(yyval.$);
              lstack.push(yyval._$);
              newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
              stack.push(newState);
              break;
          case 3:
              return true;
          }
      }
      return true;
  }
  };


  function stripFlags(open, close) {
    return {
      left: open.charAt(2) === '~',
      right: close.charAt(0) === '~' || close.charAt(1) === '~'
    };
  }

  /* Jison generated lexer */
  var lexer = (function(){
  var lexer = ({EOF:1,
  parseError:function parseError(str, hash) {
          if (this.yy.parser) {
              this.yy.parser.parseError(str, hash);
          } else {
              throw new Error(str);
          }
      },
  setInput:function (input) {
          this._input = input;
          this._more = this._less = this.done = false;
          this.yylineno = this.yyleng = 0;
          this.yytext = this.matched = this.match = '';
          this.conditionStack = ['INITIAL'];
          this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
          if (this.options.ranges) this.yylloc.range = [0,0];
          this.offset = 0;
          return this;
      },
  input:function () {
          var ch = this._input[0];
          this.yytext += ch;
          this.yyleng++;
          this.offset++;
          this.match += ch;
          this.matched += ch;
          var lines = ch.match(/(?:\r\n?|\n).*/g);
          if (lines) {
              this.yylineno++;
              this.yylloc.last_line++;
          } else {
              this.yylloc.last_column++;
          }
          if (this.options.ranges) this.yylloc.range[1]++;

          this._input = this._input.slice(1);
          return ch;
      },
  unput:function (ch) {
          var len = ch.length;
          var lines = ch.split(/(?:\r\n?|\n)/g);

          this._input = ch + this._input;
          this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
          //this.yyleng -= len;
          this.offset -= len;
          var oldLines = this.match.split(/(?:\r\n?|\n)/g);
          this.match = this.match.substr(0, this.match.length-1);
          this.matched = this.matched.substr(0, this.matched.length-1);

          if (lines.length-1) this.yylineno -= lines.length-1;
          var r = this.yylloc.range;

          this.yylloc = {first_line: this.yylloc.first_line,
            last_line: this.yylineno+1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
                this.yylloc.first_column - len
            };

          if (this.options.ranges) {
              this.yylloc.range = [r[0], r[0] + this.yyleng - len];
          }
          return this;
      },
  more:function () {
          this._more = true;
          return this;
      },
  less:function (n) {
          this.unput(this.match.slice(n));
      },
  pastInput:function () {
          var past = this.matched.substr(0, this.matched.length - this.match.length);
          return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
      },
  upcomingInput:function () {
          var next = this.match;
          if (next.length < 20) {
              next += this._input.substr(0, 20-next.length);
          }
          return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
      },
  showPosition:function () {
          var pre = this.pastInput();
          var c = new Array(pre.length + 1).join("-");
          return pre + this.upcomingInput() + "\n" + c+"^";
      },
  next:function () {
          if (this.done) {
              return this.EOF;
          }
          if (!this._input) this.done = true;

          var token,
              match,
              tempMatch,
              index,
              col,
              lines;
          if (!this._more) {
              this.yytext = '';
              this.match = '';
          }
          var rules = this._currentRules();
          for (var i=0;i < rules.length; i++) {
              tempMatch = this._input.match(this.rules[rules[i]]);
              if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                  match = tempMatch;
                  index = i;
                  if (!this.options.flex) break;
              }
          }
          if (match) {
              lines = match[0].match(/(?:\r\n?|\n).*/g);
              if (lines) this.yylineno += lines.length;
              this.yylloc = {first_line: this.yylloc.last_line,
                             last_line: this.yylineno+1,
                             first_column: this.yylloc.last_column,
                             last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
              this.yytext += match[0];
              this.match += match[0];
              this.matches = match;
              this.yyleng = this.yytext.length;
              if (this.options.ranges) {
                  this.yylloc.range = [this.offset, this.offset += this.yyleng];
              }
              this._more = false;
              this._input = this._input.slice(match[0].length);
              this.matched += match[0];
              token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
              if (this.done && this._input) this.done = false;
              if (token) return token;
              else return;
          }
          if (this._input === "") {
              return this.EOF;
          } else {
              return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                      {text: "", token: null, line: this.yylineno});
          }
      },
  lex:function lex() {
          var r = this.next();
          if (typeof r !== 'undefined') {
              return r;
          } else {
              return this.lex();
          }
      },
  begin:function begin(condition) {
          this.conditionStack.push(condition);
      },
  popState:function popState() {
          return this.conditionStack.pop();
      },
  _currentRules:function _currentRules() {
          return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
      },
  topState:function () {
          return this.conditionStack[this.conditionStack.length-2];
      },
  pushState:function begin(condition) {
          this.begin(condition);
      }});
  lexer.options = {};
  lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {


  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }


  var YYSTATE=YY_START
  switch($avoiding_name_collisions) {
  case 0:
                                     if(yy_.yytext.slice(-2) === "\\\\") {
                                       strip(0,1);
                                       this.begin("mu");
                                     } else if(yy_.yytext.slice(-1) === "\\") {
                                       strip(0,1);
                                       this.begin("emu");
                                     } else {
                                       this.begin("mu");
                                     }
                                     if(yy_.yytext) return 14;
                                   
  break;
  case 1:return 14;
  break;
  case 2:
                                     this.popState();
                                     return 14;
                                   
  break;
  case 3:strip(0,4); this.popState(); return 15;
  break;
  case 4:return 35;
  break;
  case 5:return 36;
  break;
  case 6:return 25;
  break;
  case 7:return 16;
  break;
  case 8:return 20;
  break;
  case 9:return 19;
  break;
  case 10:return 19;
  break;
  case 11:return 23;
  break;
  case 12:return 22;
  break;
  case 13:this.popState(); this.begin('com');
  break;
  case 14:strip(3,5); this.popState(); return 15;
  break;
  case 15:return 22;
  break;
  case 16:return 41;
  break;
  case 17:return 40;
  break;
  case 18:return 40;
  break;
  case 19:return 44;
  break;
  case 20:// ignore whitespace
  break;
  case 21:this.popState(); return 24;
  break;
  case 22:this.popState(); return 18;
  break;
  case 23:yy_.yytext = strip(1,2).replace(/\\"/g,'"'); return 32;
  break;
  case 24:yy_.yytext = strip(1,2).replace(/\\'/g,"'"); return 32;
  break;
  case 25:return 42;
  break;
  case 26:return 34;
  break;
  case 27:return 34;
  break;
  case 28:return 33;
  break;
  case 29:return 40;
  break;
  case 30:yy_.yytext = strip(1,2); return 40;
  break;
  case 31:return 'INVALID';
  break;
  case 32:return 5;
  break;
  }
  };
  lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,/^(?:[\s\S]*?--\}\})/,/^(?:\()/,/^(?:\))/,/^(?:\{\{(~)?>)/,/^(?:\{\{(~)?#)/,/^(?:\{\{(~)?\/)/,/^(?:\{\{(~)?\^)/,/^(?:\{\{(~)?\s*else\b)/,/^(?:\{\{(~)?\{)/,/^(?:\{\{(~)?&)/,/^(?:\{\{!--)/,/^(?:\{\{![\s\S]*?\}\})/,/^(?:\{\{(~)?)/,/^(?:=)/,/^(?:\.\.)/,/^(?:\.(?=([=~}\s\/.)])))/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}(~)?\}\})/,/^(?:(~)?\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\s)])))/,/^(?:false(?=([~}\s)])))/,/^(?:-?[0-9]+(?=([~}\s)])))/,/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)]))))/,/^(?:\[[^\]]*\])/,/^(?:.)/,/^(?:$)/];
  lexer.conditions = {"mu":{"rules":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":false},"emu":{"rules":[2],"inclusive":false},"com":{"rules":[3],"inclusive":false},"INITIAL":{"rules":[0,1,32],"inclusive":true}};
  return lexer;})()
  parser.lexer = lexer;
  function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
  return new Parser;
  })();__exports__ = handlebars;
  /* jshint ignore:end */
  return __exports__;
})();

// handlebars/compiler/base.js
var __module8__ = (function(__dependency1__, __dependency2__) {
  "use strict";
  var __exports__ = {};
  var parser = __dependency1__;
  var AST = __dependency2__;

  __exports__.parser = parser;

  function parse(input) {
    // Just return if an already-compile AST was passed in.
    if(input.constructor === AST.ProgramNode) { return input; }

    parser.yy = AST;
    return parser.parse(input);
  }

  __exports__.parse = parse;
  return __exports__;
})(__module9__, __module7__);

// handlebars/compiler/compiler.js
var __module10__ = (function(__dependency1__) {
  "use strict";
  var __exports__ = {};
  var Exception = __dependency1__;

  function Compiler() {}

  __exports__.Compiler = Compiler;// the foundHelper register will disambiguate helper lookup from finding a
  // function in a context. This is necessary for mustache compatibility, which
  // requires that context functions in blocks are evaluated by blockHelperMissing,
  // and then proceed as if the resulting value was provided to blockHelperMissing.

  Compiler.prototype = {
    compiler: Compiler,

    disassemble: function() {
      var opcodes = this.opcodes, opcode, out = [], params, param;

      for (var i=0, l=opcodes.length; i<l; i++) {
        opcode = opcodes[i];

        if (opcode.opcode === 'DECLARE') {
          out.push("DECLARE " + opcode.name + "=" + opcode.value);
        } else {
          params = [];
          for (var j=0; j<opcode.args.length; j++) {
            param = opcode.args[j];
            if (typeof param === "string") {
              param = "\"" + param.replace("\n", "\\n") + "\"";
            }
            params.push(param);
          }
          out.push(opcode.opcode + " " + params.join(" "));
        }
      }

      return out.join("\n");
    },

    equals: function(other) {
      var len = this.opcodes.length;
      if (other.opcodes.length !== len) {
        return false;
      }

      for (var i = 0; i < len; i++) {
        var opcode = this.opcodes[i],
            otherOpcode = other.opcodes[i];
        if (opcode.opcode !== otherOpcode.opcode || opcode.args.length !== otherOpcode.args.length) {
          return false;
        }
        for (var j = 0; j < opcode.args.length; j++) {
          if (opcode.args[j] !== otherOpcode.args[j]) {
            return false;
          }
        }
      }

      len = this.children.length;
      if (other.children.length !== len) {
        return false;
      }
      for (i = 0; i < len; i++) {
        if (!this.children[i].equals(other.children[i])) {
          return false;
        }
      }

      return true;
    },

    guid: 0,

    compile: function(program, options) {
      this.opcodes = [];
      this.children = [];
      this.depths = {list: []};
      this.options = options;

      // These changes will propagate to the other compiler components
      var knownHelpers = this.options.knownHelpers;
      this.options.knownHelpers = {
        'helperMissing': true,
        'blockHelperMissing': true,
        'each': true,
        'if': true,
        'unless': true,
        'with': true,
        'log': true
      };
      if (knownHelpers) {
        for (var name in knownHelpers) {
          this.options.knownHelpers[name] = knownHelpers[name];
        }
      }

      return this.accept(program);
    },

    accept: function(node) {
      var strip = node.strip || {},
          ret;
      if (strip.left) {
        this.opcode('strip');
      }

      ret = this[node.type](node);

      if (strip.right) {
        this.opcode('strip');
      }

      return ret;
    },

    program: function(program) {
      var statements = program.statements;

      for(var i=0, l=statements.length; i<l; i++) {
        this.accept(statements[i]);
      }
      this.isSimple = l === 1;

      this.depths.list = this.depths.list.sort(function(a, b) {
        return a - b;
      });

      return this;
    },

    compileProgram: function(program) {
      var result = new this.compiler().compile(program, this.options);
      var guid = this.guid++, depth;

      this.usePartial = this.usePartial || result.usePartial;

      this.children[guid] = result;

      for(var i=0, l=result.depths.list.length; i<l; i++) {
        depth = result.depths.list[i];

        if(depth < 2) { continue; }
        else { this.addDepth(depth - 1); }
      }

      return guid;
    },

    block: function(block) {
      var mustache = block.mustache,
          program = block.program,
          inverse = block.inverse;

      if (program) {
        program = this.compileProgram(program);
      }

      if (inverse) {
        inverse = this.compileProgram(inverse);
      }

      var sexpr = mustache.sexpr;
      var type = this.classifySexpr(sexpr);

      if (type === "helper") {
        this.helperSexpr(sexpr, program, inverse);
      } else if (type === "simple") {
        this.simpleSexpr(sexpr);

        // now that the simple mustache is resolved, we need to
        // evaluate it by executing `blockHelperMissing`
        this.opcode('pushProgram', program);
        this.opcode('pushProgram', inverse);
        this.opcode('emptyHash');
        this.opcode('blockValue');
      } else {
        this.ambiguousSexpr(sexpr, program, inverse);

        // now that the simple mustache is resolved, we need to
        // evaluate it by executing `blockHelperMissing`
        this.opcode('pushProgram', program);
        this.opcode('pushProgram', inverse);
        this.opcode('emptyHash');
        this.opcode('ambiguousBlockValue');
      }

      this.opcode('append');
    },

    hash: function(hash) {
      var pairs = hash.pairs, pair, val;

      this.opcode('pushHash');

      for(var i=0, l=pairs.length; i<l; i++) {
        pair = pairs[i];
        val  = pair[1];

        if (this.options.stringParams) {
          if(val.depth) {
            this.addDepth(val.depth);
          }
          this.opcode('getContext', val.depth || 0);
          this.opcode('pushStringParam', val.stringModeValue, val.type);

          if (val.type === 'sexpr') {
            // Subexpressions get evaluated and passed in
            // in string params mode.
            this.sexpr(val);
          }
        } else {
          this.accept(val);
        }

        this.opcode('assignToHash', pair[0]);
      }
      this.opcode('popHash');
    },

    partial: function(partial) {
      var partialName = partial.partialName;
      this.usePartial = true;

      if(partial.context) {
        this.ID(partial.context);
      } else {
        this.opcode('push', 'depth0');
      }

      this.opcode('invokePartial', partialName.name);
      this.opcode('append');
    },

    content: function(content) {
      this.opcode('appendContent', content.string);
    },

    mustache: function(mustache) {
      this.sexpr(mustache.sexpr);

      if(mustache.escaped && !this.options.noEscape) {
        this.opcode('appendEscaped');
      } else {
        this.opcode('append');
      }
    },

    ambiguousSexpr: function(sexpr, program, inverse) {
      var id = sexpr.id,
          name = id.parts[0],
          isBlock = program != null || inverse != null;

      this.opcode('getContext', id.depth);

      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);

      this.opcode('invokeAmbiguous', name, isBlock);
    },

    simpleSexpr: function(sexpr) {
      var id = sexpr.id;

      if (id.type === 'DATA') {
        this.DATA(id);
      } else if (id.parts.length) {
        this.ID(id);
      } else {
        // Simplified ID for `this`
        this.addDepth(id.depth);
        this.opcode('getContext', id.depth);
        this.opcode('pushContext');
      }

      this.opcode('resolvePossibleLambda');
    },

    helperSexpr: function(sexpr, program, inverse) {
      var params = this.setupFullMustacheParams(sexpr, program, inverse),
          name = sexpr.id.parts[0];

      if (this.options.knownHelpers[name]) {
        this.opcode('invokeKnownHelper', params.length, name);
      } else if (this.options.knownHelpersOnly) {
        throw new Exception("You specified knownHelpersOnly, but used the unknown helper " + name, sexpr);
      } else {
        this.opcode('invokeHelper', params.length, name, sexpr.isRoot);
      }
    },

    sexpr: function(sexpr) {
      var type = this.classifySexpr(sexpr);

      if (type === "simple") {
        this.simpleSexpr(sexpr);
      } else if (type === "helper") {
        this.helperSexpr(sexpr);
      } else {
        this.ambiguousSexpr(sexpr);
      }
    },

    ID: function(id) {
      this.addDepth(id.depth);
      this.opcode('getContext', id.depth);

      var name = id.parts[0];
      if (!name) {
        this.opcode('pushContext');
      } else {
        this.opcode('lookupOnContext', id.parts[0]);
      }

      for(var i=1, l=id.parts.length; i<l; i++) {
        this.opcode('lookup', id.parts[i]);
      }
    },

    DATA: function(data) {
      this.options.data = true;
      if (data.id.isScoped || data.id.depth) {
        throw new Exception('Scoped data references are not supported: ' + data.original, data);
      }

      this.opcode('lookupData');
      var parts = data.id.parts;
      for(var i=0, l=parts.length; i<l; i++) {
        this.opcode('lookup', parts[i]);
      }
    },

    STRING: function(string) {
      this.opcode('pushString', string.string);
    },

    INTEGER: function(integer) {
      this.opcode('pushLiteral', integer.integer);
    },

    BOOLEAN: function(bool) {
      this.opcode('pushLiteral', bool.bool);
    },

    comment: function() {},

    // HELPERS
    opcode: function(name) {
      this.opcodes.push({ opcode: name, args: [].slice.call(arguments, 1) });
    },

    declare: function(name, value) {
      this.opcodes.push({ opcode: 'DECLARE', name: name, value: value });
    },

    addDepth: function(depth) {
      if(depth === 0) { return; }

      if(!this.depths[depth]) {
        this.depths[depth] = true;
        this.depths.list.push(depth);
      }
    },

    classifySexpr: function(sexpr) {
      var isHelper   = sexpr.isHelper;
      var isEligible = sexpr.eligibleHelper;
      var options    = this.options;

      // if ambiguous, we can possibly resolve the ambiguity now
      if (isEligible && !isHelper) {
        var name = sexpr.id.parts[0];

        if (options.knownHelpers[name]) {
          isHelper = true;
        } else if (options.knownHelpersOnly) {
          isEligible = false;
        }
      }

      if (isHelper) { return "helper"; }
      else if (isEligible) { return "ambiguous"; }
      else { return "simple"; }
    },

    pushParams: function(params) {
      var i = params.length, param;

      while(i--) {
        param = params[i];

        if(this.options.stringParams) {
          if(param.depth) {
            this.addDepth(param.depth);
          }

          this.opcode('getContext', param.depth || 0);
          this.opcode('pushStringParam', param.stringModeValue, param.type);

          if (param.type === 'sexpr') {
            // Subexpressions get evaluated and passed in
            // in string params mode.
            this.sexpr(param);
          }
        } else {
          this[param.type](param);
        }
      }
    },

    setupFullMustacheParams: function(sexpr, program, inverse) {
      var params = sexpr.params;
      this.pushParams(params);

      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);

      if (sexpr.hash) {
        this.hash(sexpr.hash);
      } else {
        this.opcode('emptyHash');
      }

      return params;
    }
  };

  function precompile(input, options, env) {
    if (input == null || (typeof input !== 'string' && input.constructor !== env.AST.ProgramNode)) {
      throw new Exception("You must pass a string or Handlebars AST to Handlebars.precompile. You passed " + input);
    }

    options = options || {};
    if (!('data' in options)) {
      options.data = true;
    }

    var ast = env.parse(input);
    var environment = new env.Compiler().compile(ast, options);
    return new env.JavaScriptCompiler().compile(environment, options);
  }

  __exports__.precompile = precompile;function compile(input, options, env) {
    if (input == null || (typeof input !== 'string' && input.constructor !== env.AST.ProgramNode)) {
      throw new Exception("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input);
    }

    options = options || {};

    if (!('data' in options)) {
      options.data = true;
    }

    var compiled;

    function compileInput() {
      var ast = env.parse(input);
      var environment = new env.Compiler().compile(ast, options);
      var templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
      return env.template(templateSpec);
    }

    // Template is only compiled on first use and cached after that point.
    return function(context, options) {
      if (!compiled) {
        compiled = compileInput();
      }
      return compiled.call(this, context, options);
    };
  }

  __exports__.compile = compile;
  return __exports__;
})(__module5__);

// handlebars/compiler/javascript-compiler.js
var __module11__ = (function(__dependency1__, __dependency2__) {
  "use strict";
  var __exports__;
  var COMPILER_REVISION = __dependency1__.COMPILER_REVISION;
  var REVISION_CHANGES = __dependency1__.REVISION_CHANGES;
  var log = __dependency1__.log;
  var Exception = __dependency2__;

  function Literal(value) {
    this.value = value;
  }

  function JavaScriptCompiler() {}

  JavaScriptCompiler.prototype = {
    // PUBLIC API: You can override these methods in a subclass to provide
    // alternative compiled forms for name lookup and buffering semantics
    nameLookup: function(parent, name /* , type*/) {
      var wrap,
          ret;
      if (parent.indexOf('depth') === 0) {
        wrap = true;
      }

      if (/^[0-9]+$/.test(name)) {
        ret = parent + "[" + name + "]";
      } else if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
        ret = parent + "." + name;
      }
      else {
        ret = parent + "['" + name + "']";
      }

      if (wrap) {
        return '(' + parent + ' && ' + ret + ')';
      } else {
        return ret;
      }
    },

    compilerInfo: function() {
      var revision = COMPILER_REVISION,
          versions = REVISION_CHANGES[revision];
      return "this.compilerInfo = ["+revision+",'"+versions+"'];\n";
    },

    appendToBuffer: function(string) {
      if (this.environment.isSimple) {
        return "return " + string + ";";
      } else {
        return {
          appendToBuffer: true,
          content: string,
          toString: function() { return "buffer += " + string + ";"; }
        };
      }
    },

    initializeBuffer: function() {
      return this.quotedString("");
    },

    namespace: "Handlebars",
    // END PUBLIC API

    compile: function(environment, options, context, asObject) {
      this.environment = environment;
      this.options = options || {};

      log('debug', this.environment.disassemble() + "\n\n");

      this.name = this.environment.name;
      this.isChild = !!context;
      this.context = context || {
        programs: [],
        environments: [],
        aliases: { }
      };

      this.preamble();

      this.stackSlot = 0;
      this.stackVars = [];
      this.registers = { list: [] };
      this.hashes = [];
      this.compileStack = [];
      this.inlineStack = [];

      this.compileChildren(environment, options);

      var opcodes = environment.opcodes, opcode;

      this.i = 0;

      for(var l=opcodes.length; this.i<l; this.i++) {
        opcode = opcodes[this.i];

        if(opcode.opcode === 'DECLARE') {
          this[opcode.name] = opcode.value;
        } else {
          this[opcode.opcode].apply(this, opcode.args);
        }

        // Reset the stripNext flag if it was not set by this operation.
        if (opcode.opcode !== this.stripNext) {
          this.stripNext = false;
        }
      }

      // Flush any trailing content that might be pending.
      this.pushSource('');

      if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
        throw new Exception('Compile completed with content left on stack');
      }

      return this.createFunctionContext(asObject);
    },

    preamble: function() {
      var out = [];

      if (!this.isChild) {
        var namespace = this.namespace;

        var copies = "helpers = this.merge(helpers, " + namespace + ".helpers);";
        if (this.environment.usePartial) { copies = copies + " partials = this.merge(partials, " + namespace + ".partials);"; }
        if (this.options.data) { copies = copies + " data = data || {};"; }
        out.push(copies);
      } else {
        out.push('');
      }

      if (!this.environment.isSimple) {
        out.push(", buffer = " + this.initializeBuffer());
      } else {
        out.push("");
      }

      // track the last context pushed into place to allow skipping the
      // getContext opcode when it would be a noop
      this.lastContext = 0;
      this.source = out;
    },

    createFunctionContext: function(asObject) {
      var locals = this.stackVars.concat(this.registers.list);

      if(locals.length > 0) {
        this.source[1] = this.source[1] + ", " + locals.join(", ");
      }

      // Generate minimizer alias mappings
      if (!this.isChild) {
        for (var alias in this.context.aliases) {
          if (this.context.aliases.hasOwnProperty(alias)) {
            this.source[1] = this.source[1] + ', ' + alias + '=' + this.context.aliases[alias];
          }
        }
      }

      if (this.source[1]) {
        this.source[1] = "var " + this.source[1].substring(2) + ";";
      }

      // Merge children
      if (!this.isChild) {
        this.source[1] += '\n' + this.context.programs.join('\n') + '\n';
      }

      if (!this.environment.isSimple) {
        this.pushSource("return buffer;");
      }

      var params = this.isChild ? ["depth0", "data"] : ["Handlebars", "depth0", "helpers", "partials", "data"];

      for(var i=0, l=this.environment.depths.list.length; i<l; i++) {
        params.push("depth" + this.environment.depths.list[i]);
      }

      // Perform a second pass over the output to merge content when possible
      var source = this.mergeSource();

      if (!this.isChild) {
        source = this.compilerInfo()+source;
      }

      if (asObject) {
        params.push(source);

        return Function.apply(this, params);
      } else {
        var functionSource = 'function ' + (this.name || '') + '(' + params.join(',') + ') {\n  ' + source + '}';
        log('debug', functionSource + "\n\n");
        return functionSource;
      }
    },
    mergeSource: function() {
      // WARN: We are not handling the case where buffer is still populated as the source should
      // not have buffer append operations as their final action.
      var source = '',
          buffer;
      for (var i = 0, len = this.source.length; i < len; i++) {
        var line = this.source[i];
        if (line.appendToBuffer) {
          if (buffer) {
            buffer = buffer + '\n    + ' + line.content;
          } else {
            buffer = line.content;
          }
        } else {
          if (buffer) {
            source += 'buffer += ' + buffer + ';\n  ';
            buffer = undefined;
          }
          source += line + '\n  ';
        }
      }
      return source;
    },

    // [blockValue]
    //
    // On stack, before: hash, inverse, program, value
    // On stack, after: return value of blockHelperMissing
    //
    // The purpose of this opcode is to take a block of the form
    // `{{#foo}}...{{/foo}}`, resolve the value of `foo`, and
    // replace it on the stack with the result of properly
    // invoking blockHelperMissing.
    blockValue: function() {
      this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';

      var params = ["depth0"];
      this.setupParams(0, params);

      this.replaceStack(function(current) {
        params.splice(1, 0, current);
        return "blockHelperMissing.call(" + params.join(", ") + ")";
      });
    },

    // [ambiguousBlockValue]
    //
    // On stack, before: hash, inverse, program, value
    // Compiler value, before: lastHelper=value of last found helper, if any
    // On stack, after, if no lastHelper: same as [blockValue]
    // On stack, after, if lastHelper: value
    ambiguousBlockValue: function() {
      this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';

      var params = ["depth0"];
      this.setupParams(0, params);

      var current = this.topStack();
      params.splice(1, 0, current);

      this.pushSource("if (!" + this.lastHelper + ") { " + current + " = blockHelperMissing.call(" + params.join(", ") + "); }");
    },

    // [appendContent]
    //
    // On stack, before: ...
    // On stack, after: ...
    //
    // Appends the string value of `content` to the current buffer
    appendContent: function(content) {
      if (this.pendingContent) {
        content = this.pendingContent + content;
      }
      if (this.stripNext) {
        content = content.replace(/^\s+/, '');
      }

      this.pendingContent = content;
    },

    // [strip]
    //
    // On stack, before: ...
    // On stack, after: ...
    //
    // Removes any trailing whitespace from the prior content node and flags
    // the next operation for stripping if it is a content node.
    strip: function() {
      if (this.pendingContent) {
        this.pendingContent = this.pendingContent.replace(/\s+$/, '');
      }
      this.stripNext = 'strip';
    },

    // [append]
    //
    // On stack, before: value, ...
    // On stack, after: ...
    //
    // Coerces `value` to a String and appends it to the current buffer.
    //
    // If `value` is truthy, or 0, it is coerced into a string and appended
    // Otherwise, the empty string is appended
    append: function() {
      // Force anything that is inlined onto the stack so we don't have duplication
      // when we examine local
      this.flushInline();
      var local = this.popStack();
      this.pushSource("if(" + local + " || " + local + " === 0) { " + this.appendToBuffer(local) + " }");
      if (this.environment.isSimple) {
        this.pushSource("else { " + this.appendToBuffer("''") + " }");
      }
    },

    // [appendEscaped]
    //
    // On stack, before: value, ...
    // On stack, after: ...
    //
    // Escape `value` and append it to the buffer
    appendEscaped: function() {
      this.context.aliases.escapeExpression = 'this.escapeExpression';

      this.pushSource(this.appendToBuffer("escapeExpression(" + this.popStack() + ")"));
    },

    // [getContext]
    //
    // On stack, before: ...
    // On stack, after: ...
    // Compiler value, after: lastContext=depth
    //
    // Set the value of the `lastContext` compiler value to the depth
    getContext: function(depth) {
      if(this.lastContext !== depth) {
        this.lastContext = depth;
      }
    },

    // [lookupOnContext]
    //
    // On stack, before: ...
    // On stack, after: currentContext[name], ...
    //
    // Looks up the value of `name` on the current context and pushes
    // it onto the stack.
    lookupOnContext: function(name) {
      this.push(this.nameLookup('depth' + this.lastContext, name, 'context'));
    },

    // [pushContext]
    //
    // On stack, before: ...
    // On stack, after: currentContext, ...
    //
    // Pushes the value of the current context onto the stack.
    pushContext: function() {
      this.pushStackLiteral('depth' + this.lastContext);
    },

    // [resolvePossibleLambda]
    //
    // On stack, before: value, ...
    // On stack, after: resolved value, ...
    //
    // If the `value` is a lambda, replace it on the stack by
    // the return value of the lambda
    resolvePossibleLambda: function() {
      this.context.aliases.functionType = '"function"';

      this.replaceStack(function(current) {
        return "typeof " + current + " === functionType ? " + current + ".apply(depth0) : " + current;
      });
    },

    // [lookup]
    //
    // On stack, before: value, ...
    // On stack, after: value[name], ...
    //
    // Replace the value on the stack with the result of looking
    // up `name` on `value`
    lookup: function(name) {
      this.replaceStack(function(current) {
        return current + " == null || " + current + " === false ? " + current + " : " + this.nameLookup(current, name, 'context');
      });
    },

    // [lookupData]
    //
    // On stack, before: ...
    // On stack, after: data, ...
    //
    // Push the data lookup operator
    lookupData: function() {
      this.pushStackLiteral('data');
    },

    // [pushStringParam]
    //
    // On stack, before: ...
    // On stack, after: string, currentContext, ...
    //
    // This opcode is designed for use in string mode, which
    // provides the string value of a parameter along with its
    // depth rather than resolving it immediately.
    pushStringParam: function(string, type) {
      this.pushStackLiteral('depth' + this.lastContext);

      this.pushString(type);

      // If it's a subexpression, the string result
      // will be pushed after this opcode.
      if (type !== 'sexpr') {
        if (typeof string === 'string') {
          this.pushString(string);
        } else {
          this.pushStackLiteral(string);
        }
      }
    },

    emptyHash: function() {
      this.pushStackLiteral('{}');

      if (this.options.stringParams) {
        this.push('{}'); // hashContexts
        this.push('{}'); // hashTypes
      }
    },
    pushHash: function() {
      if (this.hash) {
        this.hashes.push(this.hash);
      }
      this.hash = {values: [], types: [], contexts: []};
    },
    popHash: function() {
      var hash = this.hash;
      this.hash = this.hashes.pop();

      if (this.options.stringParams) {
        this.push('{' + hash.contexts.join(',') + '}');
        this.push('{' + hash.types.join(',') + '}');
      }

      this.push('{\n    ' + hash.values.join(',\n    ') + '\n  }');
    },

    // [pushString]
    //
    // On stack, before: ...
    // On stack, after: quotedString(string), ...
    //
    // Push a quoted version of `string` onto the stack
    pushString: function(string) {
      this.pushStackLiteral(this.quotedString(string));
    },

    // [push]
    //
    // On stack, before: ...
    // On stack, after: expr, ...
    //
    // Push an expression onto the stack
    push: function(expr) {
      this.inlineStack.push(expr);
      return expr;
    },

    // [pushLiteral]
    //
    // On stack, before: ...
    // On stack, after: value, ...
    //
    // Pushes a value onto the stack. This operation prevents
    // the compiler from creating a temporary variable to hold
    // it.
    pushLiteral: function(value) {
      this.pushStackLiteral(value);
    },

    // [pushProgram]
    //
    // On stack, before: ...
    // On stack, after: program(guid), ...
    //
    // Push a program expression onto the stack. This takes
    // a compile-time guid and converts it into a runtime-accessible
    // expression.
    pushProgram: function(guid) {
      if (guid != null) {
        this.pushStackLiteral(this.programExpression(guid));
      } else {
        this.pushStackLiteral(null);
      }
    },

    // [invokeHelper]
    //
    // On stack, before: hash, inverse, program, params..., ...
    // On stack, after: result of helper invocation
    //
    // Pops off the helper's parameters, invokes the helper,
    // and pushes the helper's return value onto the stack.
    //
    // If the helper is not found, `helperMissing` is called.
    invokeHelper: function(paramSize, name, isRoot) {
      this.context.aliases.helperMissing = 'helpers.helperMissing';
      this.useRegister('helper');

      var helper = this.lastHelper = this.setupHelper(paramSize, name, true);
      var nonHelper = this.nameLookup('depth' + this.lastContext, name, 'context');

      var lookup = 'helper = ' + helper.name + ' || ' + nonHelper;
      if (helper.paramsInit) {
        lookup += ',' + helper.paramsInit;
      }

      this.push(
        '('
          + lookup
          + ',helper '
            + '? helper.call(' + helper.callParams + ') '
            + ': helperMissing.call(' + helper.helperMissingParams + '))');

      // Always flush subexpressions. This is both to prevent the compounding size issue that
      // occurs when the code has to be duplicated for inlining and also to prevent errors
      // due to the incorrect options object being passed due to the shared register.
      if (!isRoot) {
        this.flushInline();
      }
    },

    // [invokeKnownHelper]
    //
    // On stack, before: hash, inverse, program, params..., ...
    // On stack, after: result of helper invocation
    //
    // This operation is used when the helper is known to exist,
    // so a `helperMissing` fallback is not required.
    invokeKnownHelper: function(paramSize, name) {
      var helper = this.setupHelper(paramSize, name);
      this.push(helper.name + ".call(" + helper.callParams + ")");
    },

    // [invokeAmbiguous]
    //
    // On stack, before: hash, inverse, program, params..., ...
    // On stack, after: result of disambiguation
    //
    // This operation is used when an expression like `{{foo}}`
    // is provided, but we don't know at compile-time whether it
    // is a helper or a path.
    //
    // This operation emits more code than the other options,
    // and can be avoided by passing the `knownHelpers` and
    // `knownHelpersOnly` flags at compile-time.
    invokeAmbiguous: function(name, helperCall) {
      this.context.aliases.functionType = '"function"';
      this.useRegister('helper');

      this.emptyHash();
      var helper = this.setupHelper(0, name, helperCall);

      var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

      var nonHelper = this.nameLookup('depth' + this.lastContext, name, 'context');
      var nextStack = this.nextStack();

      if (helper.paramsInit) {
        this.pushSource(helper.paramsInit);
      }
      this.pushSource('if (helper = ' + helperName + ') { ' + nextStack + ' = helper.call(' + helper.callParams + '); }');
      this.pushSource('else { helper = ' + nonHelper + '; ' + nextStack + ' = typeof helper === functionType ? helper.call(' + helper.callParams + ') : helper; }');
    },

    // [invokePartial]
    //
    // On stack, before: context, ...
    // On stack after: result of partial invocation
    //
    // This operation pops off a context, invokes a partial with that context,
    // and pushes the result of the invocation back.
    invokePartial: function(name) {
      var params = [this.nameLookup('partials', name, 'partial'), "'" + name + "'", this.popStack(), "helpers", "partials"];

      if (this.options.data) {
        params.push("data");
      }

      this.context.aliases.self = "this";
      this.push("self.invokePartial(" + params.join(", ") + ")");
    },

    // [assignToHash]
    //
    // On stack, before: value, hash, ...
    // On stack, after: hash, ...
    //
    // Pops a value and hash off the stack, assigns `hash[key] = value`
    // and pushes the hash back onto the stack.
    assignToHash: function(key) {
      var value = this.popStack(),
          context,
          type;

      if (this.options.stringParams) {
        type = this.popStack();
        context = this.popStack();
      }

      var hash = this.hash;
      if (context) {
        hash.contexts.push("'" + key + "': " + context);
      }
      if (type) {
        hash.types.push("'" + key + "': " + type);
      }
      hash.values.push("'" + key + "': (" + value + ")");
    },

    // HELPERS

    compiler: JavaScriptCompiler,

    compileChildren: function(environment, options) {
      var children = environment.children, child, compiler;

      for(var i=0, l=children.length; i<l; i++) {
        child = children[i];
        compiler = new this.compiler();

        var index = this.matchExistingProgram(child);

        if (index == null) {
          this.context.programs.push('');     // Placeholder to prevent name conflicts for nested children
          index = this.context.programs.length;
          child.index = index;
          child.name = 'program' + index;
          this.context.programs[index] = compiler.compile(child, options, this.context);
          this.context.environments[index] = child;
        } else {
          child.index = index;
          child.name = 'program' + index;
        }
      }
    },
    matchExistingProgram: function(child) {
      for (var i = 0, len = this.context.environments.length; i < len; i++) {
        var environment = this.context.environments[i];
        if (environment && environment.equals(child)) {
          return i;
        }
      }
    },

    programExpression: function(guid) {
      this.context.aliases.self = "this";

      if(guid == null) {
        return "self.noop";
      }

      var child = this.environment.children[guid],
          depths = child.depths.list, depth;

      var programParams = [child.index, child.name, "data"];

      for(var i=0, l = depths.length; i<l; i++) {
        depth = depths[i];

        if(depth === 1) { programParams.push("depth0"); }
        else { programParams.push("depth" + (depth - 1)); }
      }

      return (depths.length === 0 ? "self.program(" : "self.programWithDepth(") + programParams.join(", ") + ")";
    },

    register: function(name, val) {
      this.useRegister(name);
      this.pushSource(name + " = " + val + ";");
    },

    useRegister: function(name) {
      if(!this.registers[name]) {
        this.registers[name] = true;
        this.registers.list.push(name);
      }
    },

    pushStackLiteral: function(item) {
      return this.push(new Literal(item));
    },

    pushSource: function(source) {
      if (this.pendingContent) {
        this.source.push(this.appendToBuffer(this.quotedString(this.pendingContent)));
        this.pendingContent = undefined;
      }

      if (source) {
        this.source.push(source);
      }
    },

    pushStack: function(item) {
      this.flushInline();

      var stack = this.incrStack();
      if (item) {
        this.pushSource(stack + " = " + item + ";");
      }
      this.compileStack.push(stack);
      return stack;
    },

    replaceStack: function(callback) {
      var prefix = '',
          inline = this.isInline(),
          stack,
          createdStack,
          usedLiteral;

      // If we are currently inline then we want to merge the inline statement into the
      // replacement statement via ','
      if (inline) {
        var top = this.popStack(true);

        if (top instanceof Literal) {
          // Literals do not need to be inlined
          stack = top.value;
          usedLiteral = true;
        } else {
          // Get or create the current stack name for use by the inline
          createdStack = !this.stackSlot;
          var name = !createdStack ? this.topStackName() : this.incrStack();

          prefix = '(' + this.push(name) + ' = ' + top + '),';
          stack = this.topStack();
        }
      } else {
        stack = this.topStack();
      }

      var item = callback.call(this, stack);

      if (inline) {
        if (!usedLiteral) {
          this.popStack();
        }
        if (createdStack) {
          this.stackSlot--;
        }
        this.push('(' + prefix + item + ')');
      } else {
        // Prevent modification of the context depth variable. Through replaceStack
        if (!/^stack/.test(stack)) {
          stack = this.nextStack();
        }

        this.pushSource(stack + " = (" + prefix + item + ");");
      }
      return stack;
    },

    nextStack: function() {
      return this.pushStack();
    },

    incrStack: function() {
      this.stackSlot++;
      if(this.stackSlot > this.stackVars.length) { this.stackVars.push("stack" + this.stackSlot); }
      return this.topStackName();
    },
    topStackName: function() {
      return "stack" + this.stackSlot;
    },
    flushInline: function() {
      var inlineStack = this.inlineStack;
      if (inlineStack.length) {
        this.inlineStack = [];
        for (var i = 0, len = inlineStack.length; i < len; i++) {
          var entry = inlineStack[i];
          if (entry instanceof Literal) {
            this.compileStack.push(entry);
          } else {
            this.pushStack(entry);
          }
        }
      }
    },
    isInline: function() {
      return this.inlineStack.length;
    },

    popStack: function(wrapped) {
      var inline = this.isInline(),
          item = (inline ? this.inlineStack : this.compileStack).pop();

      if (!wrapped && (item instanceof Literal)) {
        return item.value;
      } else {
        if (!inline) {
          if (!this.stackSlot) {
            throw new Exception('Invalid stack pop');
          }
          this.stackSlot--;
        }
        return item;
      }
    },

    topStack: function(wrapped) {
      var stack = (this.isInline() ? this.inlineStack : this.compileStack),
          item = stack[stack.length - 1];

      if (!wrapped && (item instanceof Literal)) {
        return item.value;
      } else {
        return item;
      }
    },

    quotedString: function(str) {
      return '"' + str
        .replace(/\\/g, '\\\\')
        .replace(/"/g, '\\"')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/\u2028/g, '\\u2028')   // Per Ecma-262 7.3 + 7.8.4
        .replace(/\u2029/g, '\\u2029') + '"';
    },

    setupHelper: function(paramSize, name, missingParams) {
      var params = [],
          paramsInit = this.setupParams(paramSize, params, missingParams);
      var foundHelper = this.nameLookup('helpers', name, 'helper');

      return {
        params: params,
        paramsInit: paramsInit,
        name: foundHelper,
        callParams: ["depth0"].concat(params).join(", "),
        helperMissingParams: missingParams && ["depth0", this.quotedString(name)].concat(params).join(", ")
      };
    },

    setupOptions: function(paramSize, params) {
      var options = [], contexts = [], types = [], param, inverse, program;

      options.push("hash:" + this.popStack());

      if (this.options.stringParams) {
        options.push("hashTypes:" + this.popStack());
        options.push("hashContexts:" + this.popStack());
      }

      inverse = this.popStack();
      program = this.popStack();

      // Avoid setting fn and inverse if neither are set. This allows
      // helpers to do a check for `if (options.fn)`
      if (program || inverse) {
        if (!program) {
          this.context.aliases.self = "this";
          program = "self.noop";
        }

        if (!inverse) {
          this.context.aliases.self = "this";
          inverse = "self.noop";
        }

        options.push("inverse:" + inverse);
        options.push("fn:" + program);
      }

      for(var i=0; i<paramSize; i++) {
        param = this.popStack();
        params.push(param);

        if(this.options.stringParams) {
          types.push(this.popStack());
          contexts.push(this.popStack());
        }
      }

      if (this.options.stringParams) {
        options.push("contexts:[" + contexts.join(",") + "]");
        options.push("types:[" + types.join(",") + "]");
      }

      if(this.options.data) {
        options.push("data:data");
      }

      return options;
    },

    // the params and contexts arguments are passed in arrays
    // to fill in
    setupParams: function(paramSize, params, useRegister) {
      var options = '{' + this.setupOptions(paramSize, params).join(',') + '}';

      if (useRegister) {
        this.useRegister('options');
        params.push('options');
        return 'options=' + options;
      } else {
        params.push(options);
        return '';
      }
    }
  };

  var reservedWords = (
    "break else new var" +
    " case finally return void" +
    " catch for switch while" +
    " continue function this with" +
    " default if throw" +
    " delete in try" +
    " do instanceof typeof" +
    " abstract enum int short" +
    " boolean export interface static" +
    " byte extends long super" +
    " char final native synchronized" +
    " class float package throws" +
    " const goto private transient" +
    " debugger implements protected volatile" +
    " double import public let yield"
  ).split(" ");

  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

  for(var i=0, l=reservedWords.length; i<l; i++) {
    compilerWords[reservedWords[i]] = true;
  }

  JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {
    if(!JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name)) {
      return true;
    }
    return false;
  };

  __exports__ = JavaScriptCompiler;
  return __exports__;
})(__module2__, __module5__);

// handlebars.js
var __module0__ = (function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {
  "use strict";
  var __exports__;
  /*globals Handlebars: true */
  var Handlebars = __dependency1__;

  // Compiler imports
  var AST = __dependency2__;
  var Parser = __dependency3__.parser;
  var parse = __dependency3__.parse;
  var Compiler = __dependency4__.Compiler;
  var compile = __dependency4__.compile;
  var precompile = __dependency4__.precompile;
  var JavaScriptCompiler = __dependency5__;

  var _create = Handlebars.create;
  var create = function() {
    var hb = _create();

    hb.compile = function(input, options) {
      return compile(input, options, hb);
    };
    hb.precompile = function (input, options) {
      return precompile(input, options, hb);
    };

    hb.AST = AST;
    hb.Compiler = Compiler;
    hb.JavaScriptCompiler = JavaScriptCompiler;
    hb.Parser = Parser;
    hb.parse = parse;

    return hb;
  };

  Handlebars = create();
  Handlebars.create = create;

  __exports__ = Handlebars;
  return __exports__;
})(__module1__, __module7__, __module8__, __module10__, __module11__);

  return __module0__;
})();

/*! jQuery v2.0.3 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license
//@ sourceMappingURL=jquery-2.0.3.min.map
*/
(function(e,undefined){var t,n,r=typeof undefined,i=e.location,o=e.document,s=o.documentElement,a=e.jQuery,u=e.$,l={},c=[],p="2.0.3",f=c.concat,h=c.push,d=c.slice,g=c.indexOf,m=l.toString,y=l.hasOwnProperty,v=p.trim,x=function(e,n){return new x.fn.init(e,n,t)},b=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,w=/\S+/g,T=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,C=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,k=/^-ms-/,N=/-([\da-z])/gi,E=function(e,t){return t.toUpperCase()},S=function(){o.removeEventListener("DOMContentLoaded",S,!1),e.removeEventListener("load",S,!1),x.ready()};x.fn=x.prototype={jquery:p,constructor:x,init:function(e,t,n){var r,i;if(!e)return this;if("string"==typeof e){if(r="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:T.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof x?t[0]:t,x.merge(this,x.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:o,!0)),C.test(r[1])&&x.isPlainObject(t))for(r in t)x.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=o.getElementById(r[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=o,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):x.isFunction(e)?n.ready(e):(e.selector!==undefined&&(this.selector=e.selector,this.context=e.context),x.makeArray(e,this))},selector:"",length:0,toArray:function(){return d.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return x.each(this,e,t)},ready:function(e){return x.ready.promise().done(e),this},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(x.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:h,sort:[].sort,splice:[].splice},x.fn.init.prototype=x.fn,x.extend=x.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[1]||{},a=2),"object"==typeof s||x.isFunction(s)||(s={}),u===a&&(s=this,--a);u>a;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],r=e[t],s!==r&&(l&&r&&(x.isPlainObject(r)||(i=x.isArray(r)))?(i?(i=!1,o=n&&x.isArray(n)?n:[]):o=n&&x.isPlainObject(n)?n:{},s[t]=x.extend(l,o,r)):r!==undefined&&(s[t]=r));return s},x.extend({expando:"jQuery"+(p+Math.random()).replace(/\D/g,""),noConflict:function(t){return e.$===x&&(e.$=u),t&&e.jQuery===x&&(e.jQuery=a),x},isReady:!1,readyWait:1,holdReady:function(e){e?x.readyWait++:x.ready(!0)},ready:function(e){(e===!0?--x.readyWait:x.isReady)||(x.isReady=!0,e!==!0&&--x.readyWait>0||(n.resolveWith(o,[x]),x.fn.trigger&&x(o).trigger("ready").off("ready")))},isFunction:function(e){return"function"===x.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?l[m.call(e)]||"object":typeof e},isPlainObject:function(e){if("object"!==x.type(e)||e.nodeType||x.isWindow(e))return!1;try{if(e.constructor&&!y.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(t){return!1}return!0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||o;var r=C.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=x.buildFragment([e],t,i),i&&x(i).remove(),x.merge([],r.childNodes))},parseJSON:JSON.parse,parseXML:function(e){var t,n;if(!e||"string"!=typeof e)return null;try{n=new DOMParser,t=n.parseFromString(e,"text/xml")}catch(r){t=undefined}return(!t||t.getElementsByTagName("parsererror").length)&&x.error("Invalid XML: "+e),t},noop:function(){},globalEval:function(e){var t,n=eval;e=x.trim(e),e&&(1===e.indexOf("use strict")?(t=o.createElement("script"),t.text=e,o.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(k,"ms-").replace(N,E)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,s=j(e);if(n){if(s){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(s){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:function(e){return null==e?"":v.call(e)},makeArray:function(e,t){var n=t||[];return null!=e&&(j(Object(e))?x.merge(n,"string"==typeof e?[e]:e):h.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:g.call(t,e,n)},merge:function(e,t){var n=t.length,r=e.length,i=0;if("number"==typeof n)for(;n>i;i++)e[r++]=t[i];else while(t[i]!==undefined)e[r++]=t[i++];return e.length=r,e},grep:function(e,t,n){var r,i=[],o=0,s=e.length;for(n=!!n;s>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,s=j(e),a=[];if(s)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(a[a.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(a[a.length]=r);return f.apply([],a)},guid:1,proxy:function(e,t){var n,r,i;return"string"==typeof t&&(n=e[t],t=e,e=n),x.isFunction(e)?(r=d.call(arguments,2),i=function(){return e.apply(t||this,r.concat(d.call(arguments)))},i.guid=e.guid=e.guid||x.guid++,i):undefined},access:function(e,t,n,r,i,o,s){var a=0,u=e.length,l=null==n;if("object"===x.type(n)){i=!0;for(a in n)x.access(e,t,a,n[a],!0,o,s)}else if(r!==undefined&&(i=!0,x.isFunction(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(x(e),n)})),t))for(;u>a;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:l?t.call(e):u?t(e[0],n):o},now:Date.now,swap:function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i}}),x.ready.promise=function(t){return n||(n=x.Deferred(),"complete"===o.readyState?setTimeout(x.ready):(o.addEventListener("DOMContentLoaded",S,!1),e.addEventListener("load",S,!1))),n.promise(t)},x.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){l["[object "+t+"]"]=t.toLowerCase()});function j(e){var t=e.length,n=x.type(e);return x.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||"function"!==n&&(0===t||"number"==typeof t&&t>0&&t-1 in e)}t=x(o),function(e,undefined){var t,n,r,i,o,s,a,u,l,c,p,f,h,d,g,m,y,v="sizzle"+-new Date,b=e.document,w=0,T=0,C=st(),k=st(),N=st(),E=!1,S=function(e,t){return e===t?(E=!0,0):0},j=typeof undefined,D=1<<31,A={}.hasOwnProperty,L=[],q=L.pop,H=L.push,O=L.push,F=L.slice,P=L.indexOf||function(e){var t=0,n=this.length;for(;n>t;t++)if(this[t]===e)return t;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",W="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",$=W.replace("w","w#"),B="\\["+M+"*("+W+")"+M+"*(?:([*^$|!~]?=)"+M+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+$+")|)|)"+M+"*\\]",I=":("+W+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+B.replace(3,8)+")*)|.*)\\)|)",z=RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),_=RegExp("^"+M+"*,"+M+"*"),X=RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=RegExp(M+"*[+~]"),Y=RegExp("="+M+"*([^\\]'\"]*)"+M+"*\\]","g"),V=RegExp(I),G=RegExp("^"+$+"$"),J={ID:RegExp("^#("+W+")"),CLASS:RegExp("^\\.("+W+")"),TAG:RegExp("^("+W.replace("w","w*")+")"),ATTR:RegExp("^"+B),PSEUDO:RegExp("^"+I),CHILD:RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:RegExp("^(?:"+R+")$","i"),needsContext:RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Q=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Z=/^(?:input|select|textarea|button)$/i,et=/^h\d$/i,tt=/'|\\/g,nt=RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),rt=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(55296|r>>10,56320|1023&r)};try{O.apply(L=F.call(b.childNodes),b.childNodes),L[b.childNodes.length].nodeType}catch(it){O={apply:L.length?function(e,t){H.apply(e,F.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function ot(e,t,r,i){var o,s,a,u,l,f,g,m,x,w;if((t?t.ownerDocument||t:b)!==p&&c(t),t=t||p,r=r||[],!e||"string"!=typeof e)return r;if(1!==(u=t.nodeType)&&9!==u)return[];if(h&&!i){if(o=K.exec(e))if(a=o[1]){if(9===u){if(s=t.getElementById(a),!s||!s.parentNode)return r;if(s.id===a)return r.push(s),r}else if(t.ownerDocument&&(s=t.ownerDocument.getElementById(a))&&y(t,s)&&s.id===a)return r.push(s),r}else{if(o[2])return O.apply(r,t.getElementsByTagName(e)),r;if((a=o[3])&&n.getElementsByClassName&&t.getElementsByClassName)return O.apply(r,t.getElementsByClassName(a)),r}if(n.qsa&&(!d||!d.test(e))){if(m=g=v,x=t,w=9===u&&e,1===u&&"object"!==t.nodeName.toLowerCase()){f=gt(e),(g=t.getAttribute("id"))?m=g.replace(tt,"\\$&"):t.setAttribute("id",m),m="[id='"+m+"'] ",l=f.length;while(l--)f[l]=m+mt(f[l]);x=U.test(e)&&t.parentNode||t,w=f.join(",")}if(w)try{return O.apply(r,x.querySelectorAll(w)),r}catch(T){}finally{g||t.removeAttribute("id")}}}return kt(e.replace(z,"$1"),t,r,i)}function st(){var e=[];function t(n,r){return e.push(n+=" ")>i.cacheLength&&delete t[e.shift()],t[n]=r}return t}function at(e){return e[v]=!0,e}function ut(e){var t=p.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function lt(e,t){var n=e.split("|"),r=e.length;while(r--)i.attrHandle[n[r]]=t}function ct(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||D)-(~e.sourceIndex||D);if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function pt(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function ft(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ht(e){return at(function(t){return t=+t,at(function(n,r){var i,o=e([],n.length,t),s=o.length;while(s--)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}s=ot.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},n=ot.support={},c=ot.setDocument=function(e){var t=e?e.ownerDocument||e:b,r=t.defaultView;return t!==p&&9===t.nodeType&&t.documentElement?(p=t,f=t.documentElement,h=!s(t),r&&r.attachEvent&&r!==r.top&&r.attachEvent("onbeforeunload",function(){c()}),n.attributes=ut(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ut(function(e){return e.appendChild(t.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=ut(function(e){return e.innerHTML="<div class='a'></div><div class='a i'></div>",e.firstChild.className="i",2===e.getElementsByClassName("i").length}),n.getById=ut(function(e){return f.appendChild(e).id=v,!t.getElementsByName||!t.getElementsByName(v).length}),n.getById?(i.find.ID=function(e,t){if(typeof t.getElementById!==j&&h){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},i.filter.ID=function(e){var t=e.replace(nt,rt);return function(e){return e.getAttribute("id")===t}}):(delete i.find.ID,i.filter.ID=function(e){var t=e.replace(nt,rt);return function(e){var n=typeof e.getAttributeNode!==j&&e.getAttributeNode("id");return n&&n.value===t}}),i.find.TAG=n.getElementsByTagName?function(e,t){return typeof t.getElementsByTagName!==j?t.getElementsByTagName(e):undefined}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){return typeof t.getElementsByClassName!==j&&h?t.getElementsByClassName(e):undefined},g=[],d=[],(n.qsa=Q.test(t.querySelectorAll))&&(ut(function(e){e.innerHTML="<select><option selected=''></option></select>",e.querySelectorAll("[selected]").length||d.push("\\["+M+"*(?:value|"+R+")"),e.querySelectorAll(":checked").length||d.push(":checked")}),ut(function(e){var n=t.createElement("input");n.setAttribute("type","hidden"),e.appendChild(n).setAttribute("t",""),e.querySelectorAll("[t^='']").length&&d.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll(":enabled").length||d.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),d.push(",.*:")})),(n.matchesSelector=Q.test(m=f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ut(function(e){n.disconnectedMatch=m.call(e,"div"),m.call(e,"[s!='']:x"),g.push("!=",I)}),d=d.length&&RegExp(d.join("|")),g=g.length&&RegExp(g.join("|")),y=Q.test(f.contains)||f.compareDocumentPosition?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},S=f.compareDocumentPosition?function(e,r){if(e===r)return E=!0,0;var i=r.compareDocumentPosition&&e.compareDocumentPosition&&e.compareDocumentPosition(r);return i?1&i||!n.sortDetached&&r.compareDocumentPosition(e)===i?e===t||y(b,e)?-1:r===t||y(b,r)?1:l?P.call(l,e)-P.call(l,r):0:4&i?-1:1:e.compareDocumentPosition?-1:1}:function(e,n){var r,i=0,o=e.parentNode,s=n.parentNode,a=[e],u=[n];if(e===n)return E=!0,0;if(!o||!s)return e===t?-1:n===t?1:o?-1:s?1:l?P.call(l,e)-P.call(l,n):0;if(o===s)return ct(e,n);r=e;while(r=r.parentNode)a.unshift(r);r=n;while(r=r.parentNode)u.unshift(r);while(a[i]===u[i])i++;return i?ct(a[i],u[i]):a[i]===b?-1:u[i]===b?1:0},t):p},ot.matches=function(e,t){return ot(e,null,null,t)},ot.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&c(e),t=t.replace(Y,"='$1']"),!(!n.matchesSelector||!h||g&&g.test(t)||d&&d.test(t)))try{var r=m.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return ot(t,p,null,[e]).length>0},ot.contains=function(e,t){return(e.ownerDocument||e)!==p&&c(e),y(e,t)},ot.attr=function(e,t){(e.ownerDocument||e)!==p&&c(e);var r=i.attrHandle[t.toLowerCase()],o=r&&A.call(i.attrHandle,t.toLowerCase())?r(e,t,!h):undefined;return o===undefined?n.attributes||!h?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null:o},ot.error=function(e){throw Error("Syntax error, unrecognized expression: "+e)},ot.uniqueSort=function(e){var t,r=[],i=0,o=0;if(E=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(S),E){while(t=e[o++])t===e[o]&&(i=r.push(o));while(i--)e.splice(r[i],1)}return e},o=ot.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r];r++)n+=o(t);return n},i=ot.selectors={cacheLength:50,createPseudo:at,match:J,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(nt,rt),e[3]=(e[4]||e[5]||"").replace(nt,rt),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ot.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ot.error(e[0]),e},PSEUDO:function(e){var t,n=!e[5]&&e[2];return J.CHILD.test(e[0])?null:(e[3]&&e[4]!==undefined?e[2]=e[4]:n&&V.test(n)&&(t=gt(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(nt,rt).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=C[e+" "];return t||(t=RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&C(e,function(e){return t.test("string"==typeof e.className&&e.className||typeof e.getAttribute!==j&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=ot.attr(r,e);return null==i?"!="===t:t?(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i+" ").indexOf(n)>-1:"|="===t?i===n||i.slice(0,n.length+1)===n+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,p,f,h,d,g=o!==s?"nextSibling":"previousSibling",m=t.parentNode,y=a&&t.nodeName.toLowerCase(),x=!u&&!a;if(m){if(o){while(g){p=t;while(p=p[g])if(a?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;d=g="only"===e&&!d&&"nextSibling"}return!0}if(d=[s?m.firstChild:m.lastChild],s&&x){c=m[v]||(m[v]={}),l=c[e]||[],h=l[0]===w&&l[1],f=l[0]===w&&l[2],p=h&&m.childNodes[h];while(p=++h&&p&&p[g]||(f=h=0)||d.pop())if(1===p.nodeType&&++f&&p===t){c[e]=[w,h,f];break}}else if(x&&(l=(t[v]||(t[v]={}))[e])&&l[0]===w)f=l[1];else while(p=++h&&p&&p[g]||(f=h=0)||d.pop())if((a?p.nodeName.toLowerCase()===y:1===p.nodeType)&&++f&&(x&&((p[v]||(p[v]={}))[e]=[w,f]),p===t))break;return f-=i,f===r||0===f%r&&f/r>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||ot.error("unsupported pseudo: "+e);return r[v]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?at(function(e,n){var i,o=r(e,t),s=o.length;while(s--)i=P.call(e,o[s]),e[i]=!(n[i]=o[s])}):function(e){return r(e,0,n)}):r}},pseudos:{not:at(function(e){var t=[],n=[],r=a(e.replace(z,"$1"));return r[v]?at(function(e,t,n,i){var o,s=r(e,null,i,[]),a=e.length;while(a--)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),!n.pop()}}),has:at(function(e){return function(t){return ot(e,t).length>0}}),contains:at(function(e){return function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:at(function(e){return G.test(e||"")||ot.error("unsupported lang: "+e),e=e.replace(nt,rt).toLowerCase(),function(t){var n;do if(n=h?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeName>"@"||3===e.nodeType||4===e.nodeType)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return et.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||t.toLowerCase()===e.type)},first:ht(function(){return[0]}),last:ht(function(e,t){return[t-1]}),eq:ht(function(e,t,n){return[0>n?n+t:n]}),even:ht(function(e,t){var n=0;for(;t>n;n+=2)e.push(n);return e}),odd:ht(function(e,t){var n=1;for(;t>n;n+=2)e.push(n);return e}),lt:ht(function(e,t,n){var r=0>n?n+t:n;for(;--r>=0;)e.push(r);return e}),gt:ht(function(e,t,n){var r=0>n?n+t:n;for(;t>++r;)e.push(r);return e})}},i.pseudos.nth=i.pseudos.eq;for(t in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=pt(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=ft(t);function dt(){}dt.prototype=i.filters=i.pseudos,i.setFilters=new dt;function gt(e,t){var n,r,o,s,a,u,l,c=k[e+" "];if(c)return t?0:c.slice(0);a=e,u=[],l=i.preFilter;while(a){(!n||(r=_.exec(a)))&&(r&&(a=a.slice(r[0].length)||a),u.push(o=[])),n=!1,(r=X.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace(z," ")}),a=a.slice(n.length));for(s in i.filter)!(r=J[s].exec(a))||l[s]&&!(r=l[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ot.error(e):k(e,u).slice(0)}function mt(e){var t=0,n=e.length,r="";for(;n>t;t++)r+=e[t].value;return r}function yt(e,t,n){var i=t.dir,o=n&&"parentNode"===i,s=T++;return t.first?function(t,n,r){while(t=t[i])if(1===t.nodeType||o)return e(t,n,r)}:function(t,n,a){var u,l,c,p=w+" "+s;if(a){while(t=t[i])if((1===t.nodeType||o)&&e(t,n,a))return!0}else while(t=t[i])if(1===t.nodeType||o)if(c=t[v]||(t[v]={}),(l=c[i])&&l[0]===p){if((u=l[1])===!0||u===r)return u===!0}else if(l=c[i]=[p],l[1]=e(t,n,a)||r,l[1]===!0)return!0}}function vt(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function xt(e,t,n,r,i){var o,s=[],a=0,u=e.length,l=null!=t;for(;u>a;a++)(o=e[a])&&(!n||n(o,r,i))&&(s.push(o),l&&t.push(a));return s}function bt(e,t,n,r,i,o){return r&&!r[v]&&(r=bt(r)),i&&!i[v]&&(i=bt(i,o)),at(function(o,s,a,u){var l,c,p,f=[],h=[],d=s.length,g=o||Ct(t||"*",a.nodeType?[a]:a,[]),m=!e||!o&&t?g:xt(g,f,e,a,u),y=n?i||(o?e:d||r)?[]:s:m;if(n&&n(m,y,a,u),r){l=xt(y,h),r(l,[],a,u),c=l.length;while(c--)(p=l[c])&&(y[h[c]]=!(m[h[c]]=p))}if(o){if(i||e){if(i){l=[],c=y.length;while(c--)(p=y[c])&&l.push(m[c]=p);i(null,y=[],l,u)}c=y.length;while(c--)(p=y[c])&&(l=i?P.call(o,p):f[c])>-1&&(o[l]=!(s[l]=p))}}else y=xt(y===s?y.splice(d,y.length):y),i?i(null,s,y,u):O.apply(s,y)})}function wt(e){var t,n,r,o=e.length,s=i.relative[e[0].type],a=s||i.relative[" "],l=s?1:0,c=yt(function(e){return e===t},a,!0),p=yt(function(e){return P.call(t,e)>-1},a,!0),f=[function(e,n,r){return!s&&(r||n!==u)||((t=n).nodeType?c(e,n,r):p(e,n,r))}];for(;o>l;l++)if(n=i.relative[e[l].type])f=[yt(vt(f),n)];else{if(n=i.filter[e[l].type].apply(null,e[l].matches),n[v]){for(r=++l;o>r;r++)if(i.relative[e[r].type])break;return bt(l>1&&vt(f),l>1&&mt(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(z,"$1"),n,r>l&&wt(e.slice(l,r)),o>r&&wt(e=e.slice(r)),o>r&&mt(e))}f.push(n)}return vt(f)}function Tt(e,t){var n=0,o=t.length>0,s=e.length>0,a=function(a,l,c,f,h){var d,g,m,y=[],v=0,x="0",b=a&&[],T=null!=h,C=u,k=a||s&&i.find.TAG("*",h&&l.parentNode||l),N=w+=null==C?1:Math.random()||.1;for(T&&(u=l!==p&&l,r=n);null!=(d=k[x]);x++){if(s&&d){g=0;while(m=e[g++])if(m(d,l,c)){f.push(d);break}T&&(w=N,r=++n)}o&&((d=!m&&d)&&v--,a&&b.push(d))}if(v+=x,o&&x!==v){g=0;while(m=t[g++])m(b,y,l,c);if(a){if(v>0)while(x--)b[x]||y[x]||(y[x]=q.call(f));y=xt(y)}O.apply(f,y),T&&!a&&y.length>0&&v+t.length>1&&ot.uniqueSort(f)}return T&&(w=N,u=C),b};return o?at(a):a}a=ot.compile=function(e,t){var n,r=[],i=[],o=N[e+" "];if(!o){t||(t=gt(e)),n=t.length;while(n--)o=wt(t[n]),o[v]?r.push(o):i.push(o);o=N(e,Tt(i,r))}return o};function Ct(e,t,n){var r=0,i=t.length;for(;i>r;r++)ot(e,t[r],n);return n}function kt(e,t,r,o){var s,u,l,c,p,f=gt(e);if(!o&&1===f.length){if(u=f[0]=f[0].slice(0),u.length>2&&"ID"===(l=u[0]).type&&n.getById&&9===t.nodeType&&h&&i.relative[u[1].type]){if(t=(i.find.ID(l.matches[0].replace(nt,rt),t)||[])[0],!t)return r;e=e.slice(u.shift().value.length)}s=J.needsContext.test(e)?0:u.length;while(s--){if(l=u[s],i.relative[c=l.type])break;if((p=i.find[c])&&(o=p(l.matches[0].replace(nt,rt),U.test(u[0].type)&&t.parentNode||t))){if(u.splice(s,1),e=o.length&&mt(u),!e)return O.apply(r,o),r;break}}}return a(e,f)(o,t,!h,r,U.test(e)),r}n.sortStable=v.split("").sort(S).join("")===v,n.detectDuplicates=E,c(),n.sortDetached=ut(function(e){return 1&e.compareDocumentPosition(p.createElement("div"))}),ut(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||lt("type|href|height|width",function(e,t,n){return n?undefined:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ut(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||lt("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?undefined:e.defaultValue}),ut(function(e){return null==e.getAttribute("disabled")})||lt(R,function(e,t,n){var r;return n?undefined:(r=e.getAttributeNode(t))&&r.specified?r.value:e[t]===!0?t.toLowerCase():null}),x.find=ot,x.expr=ot.selectors,x.expr[":"]=x.expr.pseudos,x.unique=ot.uniqueSort,x.text=ot.getText,x.isXMLDoc=ot.isXML,x.contains=ot.contains}(e);var D={};function A(e){var t=D[e]={};return x.each(e.match(w)||[],function(e,n){t[n]=!0}),t}x.Callbacks=function(e){e="string"==typeof e?D[e]||A(e):x.extend({},e);var t,n,r,i,o,s,a=[],u=!e.once&&[],l=function(p){for(t=e.memory&&p,n=!0,s=i||0,i=0,o=a.length,r=!0;a&&o>s;s++)if(a[s].apply(p[0],p[1])===!1&&e.stopOnFalse){t=!1;break}r=!1,a&&(u?u.length&&l(u.shift()):t?a=[]:c.disable())},c={add:function(){if(a){var n=a.length;(function s(t){x.each(t,function(t,n){var r=x.type(n);"function"===r?e.unique&&c.has(n)||a.push(n):n&&n.length&&"string"!==r&&s(n)})})(arguments),r?o=a.length:t&&(i=n,l(t))}return this},remove:function(){return a&&x.each(arguments,function(e,t){var n;while((n=x.inArray(t,a,n))>-1)a.splice(n,1),r&&(o>=n&&o--,s>=n&&s--)}),this},has:function(e){return e?x.inArray(e,a)>-1:!(!a||!a.length)},empty:function(){return a=[],o=0,this},disable:function(){return a=u=t=undefined,this},disabled:function(){return!a},lock:function(){return u=undefined,t||c.disable(),this},locked:function(){return!u},fireWith:function(e,t){return!a||n&&!u||(t=t||[],t=[e,t.slice?t.slice():t],r?u.push(t):l(t)),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!n}};return c},x.extend({Deferred:function(e){var t=[["resolve","done",x.Callbacks("once memory"),"resolved"],["reject","fail",x.Callbacks("once memory"),"rejected"],["notify","progress",x.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return x.Deferred(function(n){x.each(t,function(t,o){var s=o[0],a=x.isFunction(e[t])&&e[t];i[o[1]](function(){var e=a&&a.apply(this,arguments);e&&x.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[s+"With"](this===r?n.promise():this,a?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?x.extend(e,r):r}},i={};return r.pipe=r.then,x.each(t,function(e,o){var s=o[2],a=o[3];r[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=s.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=d.call(arguments),r=n.length,i=1!==r||e&&x.isFunction(e.promise)?r:0,o=1===i?e:x.Deferred(),s=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?d.call(arguments):r,n===a?o.notifyWith(t,n):--i||o.resolveWith(t,n)}},a,u,l;if(r>1)for(a=Array(r),u=Array(r),l=Array(r);r>t;t++)n[t]&&x.isFunction(n[t].promise)?n[t].promise().done(s(t,l,n)).fail(o.reject).progress(s(t,u,a)):--i;return i||o.resolveWith(l,n),o.promise()}}),x.support=function(t){var n=o.createElement("input"),r=o.createDocumentFragment(),i=o.createElement("div"),s=o.createElement("select"),a=s.appendChild(o.createElement("option"));return n.type?(n.type="checkbox",t.checkOn=""!==n.value,t.optSelected=a.selected,t.reliableMarginRight=!0,t.boxSizingReliable=!0,t.pixelPosition=!1,n.checked=!0,t.noCloneChecked=n.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!a.disabled,n=o.createElement("input"),n.value="t",n.type="radio",t.radioValue="t"===n.value,n.setAttribute("checked","t"),n.setAttribute("name","t"),r.appendChild(n),t.checkClone=r.cloneNode(!0).cloneNode(!0).lastChild.checked,t.focusinBubbles="onfocusin"in e,i.style.backgroundClip="content-box",i.cloneNode(!0).style.backgroundClip="",t.clearCloneStyle="content-box"===i.style.backgroundClip,x(function(){var n,r,s="padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box",a=o.getElementsByTagName("body")[0];a&&(n=o.createElement("div"),n.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",a.appendChild(n).appendChild(i),i.innerHTML="",i.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%",x.swap(a,null!=a.style.zoom?{zoom:1}:{},function(){t.boxSizing=4===i.offsetWidth}),e.getComputedStyle&&(t.pixelPosition="1%"!==(e.getComputedStyle(i,null)||{}).top,t.boxSizingReliable="4px"===(e.getComputedStyle(i,null)||{width:"4px"}).width,r=i.appendChild(o.createElement("div")),r.style.cssText=i.style.cssText=s,r.style.marginRight=r.style.width="0",i.style.width="1px",t.reliableMarginRight=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight)),a.removeChild(n))}),t):t}({});var L,q,H=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,O=/([A-Z])/g;function F(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=x.expando+Math.random()}F.uid=1,F.accepts=function(e){return e.nodeType?1===e.nodeType||9===e.nodeType:!0},F.prototype={key:function(e){if(!F.accepts(e))return 0;var t={},n=e[this.expando];if(!n){n=F.uid++;try{t[this.expando]={value:n},Object.defineProperties(e,t)}catch(r){t[this.expando]=n,x.extend(e,t)}}return this.cache[n]||(this.cache[n]={}),n},set:function(e,t,n){var r,i=this.key(e),o=this.cache[i];if("string"==typeof t)o[t]=n;else if(x.isEmptyObject(o))x.extend(this.cache[i],t);else for(r in t)o[r]=t[r];return o},get:function(e,t){var n=this.cache[this.key(e)];return t===undefined?n:n[t]},access:function(e,t,n){var r;return t===undefined||t&&"string"==typeof t&&n===undefined?(r=this.get(e,t),r!==undefined?r:this.get(e,x.camelCase(t))):(this.set(e,t,n),n!==undefined?n:t)},remove:function(e,t){var n,r,i,o=this.key(e),s=this.cache[o];if(t===undefined)this.cache[o]={};else{x.isArray(t)?r=t.concat(t.map(x.camelCase)):(i=x.camelCase(t),t in s?r=[t,i]:(r=i,r=r in s?[r]:r.match(w)||[])),n=r.length;while(n--)delete s[r[n]]}},hasData:function(e){return!x.isEmptyObject(this.cache[e[this.expando]]||{})},discard:function(e){e[this.expando]&&delete this.cache[e[this.expando]]}},L=new F,q=new F,x.extend({acceptData:F.accepts,hasData:function(e){return L.hasData(e)||q.hasData(e)},data:function(e,t,n){return L.access(e,t,n)},removeData:function(e,t){L.remove(e,t)},_data:function(e,t,n){return q.access(e,t,n)},_removeData:function(e,t){q.remove(e,t)}}),x.fn.extend({data:function(e,t){var n,r,i=this[0],o=0,s=null;if(e===undefined){if(this.length&&(s=L.get(i),1===i.nodeType&&!q.get(i,"hasDataAttrs"))){for(n=i.attributes;n.length>o;o++)r=n[o].name,0===r.indexOf("data-")&&(r=x.camelCase(r.slice(5)),P(i,r,s[r]));q.set(i,"hasDataAttrs",!0)}return s}return"object"==typeof e?this.each(function(){L.set(this,e)}):x.access(this,function(t){var n,r=x.camelCase(e);if(i&&t===undefined){if(n=L.get(i,e),n!==undefined)return n;if(n=L.get(i,r),n!==undefined)return n;if(n=P(i,r,undefined),n!==undefined)return n}else this.each(function(){var n=L.get(this,r);L.set(this,r,t),-1!==e.indexOf("-")&&n!==undefined&&L.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){L.remove(this,e)})}});function P(e,t,n){var r;if(n===undefined&&1===e.nodeType)if(r="data-"+t.replace(O,"-$1").toLowerCase(),n=e.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:H.test(n)?JSON.parse(n):n}catch(i){}L.set(e,t,n)}else n=undefined;return n}x.extend({queue:function(e,t,n){var r;return e?(t=(t||"fx")+"queue",r=q.get(e,t),n&&(!r||x.isArray(n)?r=q.access(e,t,x.makeArray(n)):r.push(n)),r||[]):undefined},dequeue:function(e,t){t=t||"fx";var n=x.queue(e,t),r=n.length,i=n.shift(),o=x._queueHooks(e,t),s=function(){x.dequeue(e,t)
};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return q.get(e,n)||q.access(e,n,{empty:x.Callbacks("once memory").add(function(){q.remove(e,[t+"queue",n])})})}}),x.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),n>arguments.length?x.queue(this[0],e):t===undefined?this:this.each(function(){var n=x.queue(this,e,t);x._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&x.dequeue(this,e)})},dequeue:function(e){return this.each(function(){x.dequeue(this,e)})},delay:function(e,t){return e=x.fx?x.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=x.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};"string"!=typeof e&&(t=e,e=undefined),e=e||"fx";while(s--)n=q.get(o[s],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var R,M,W=/[\t\r\n\f]/g,$=/\r/g,B=/^(?:input|select|textarea|button)$/i;x.fn.extend({attr:function(e,t){return x.access(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){x.removeAttr(this,e)})},prop:function(e,t){return x.access(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[x.propFix[e]||e]})},addClass:function(e){var t,n,r,i,o,s=0,a=this.length,u="string"==typeof e&&e;if(x.isFunction(e))return this.each(function(t){x(this).addClass(e.call(this,t,this.className))});if(u)for(t=(e||"").match(w)||[];a>s;s++)if(n=this[s],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(W," "):" ")){o=0;while(i=t[o++])0>r.indexOf(" "+i+" ")&&(r+=i+" ");n.className=x.trim(r)}return this},removeClass:function(e){var t,n,r,i,o,s=0,a=this.length,u=0===arguments.length||"string"==typeof e&&e;if(x.isFunction(e))return this.each(function(t){x(this).removeClass(e.call(this,t,this.className))});if(u)for(t=(e||"").match(w)||[];a>s;s++)if(n=this[s],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(W," "):"")){o=0;while(i=t[o++])while(r.indexOf(" "+i+" ")>=0)r=r.replace(" "+i+" "," ");n.className=e?x.trim(r):""}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):x.isFunction(e)?this.each(function(n){x(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if("string"===n){var t,i=0,o=x(this),s=e.match(w)||[];while(t=s[i++])o.hasClass(t)?o.removeClass(t):o.addClass(t)}else(n===r||"boolean"===n)&&(this.className&&q.set(this,"__className__",this.className),this.className=this.className||e===!1?"":q.get(this,"__className__")||"")})},hasClass:function(e){var t=" "+e+" ",n=0,r=this.length;for(;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(W," ").indexOf(t)>=0)return!0;return!1},val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=x.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,x(this).val()):e,null==i?i="":"number"==typeof i?i+="":x.isArray(i)&&(i=x.map(i,function(e){return null==e?"":e+""})),t=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&t.set(this,i,"value")!==undefined||(this.value=i))});if(i)return t=x.valHooks[i.type]||x.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&(n=t.get(i,"value"))!==undefined?n:(n=i.value,"string"==typeof n?n.replace($,""):null==n?"":n)}}}),x.extend({valHooks:{option:{get:function(e){var t=e.attributes.value;return!t||t.specified?e.value:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,s=o?null:[],a=o?i+1:r.length,u=0>i?a:o?i:0;for(;a>u;u++)if(n=r[u],!(!n.selected&&u!==i||(x.support.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&x.nodeName(n.parentNode,"optgroup"))){if(t=x(n).val(),o)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=x.makeArray(t),s=i.length;while(s--)r=i[s],(r.selected=x.inArray(x(r).val(),o)>=0)&&(n=!0);return n||(e.selectedIndex=-1),o}}},attr:function(e,t,n){var i,o,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return typeof e.getAttribute===r?x.prop(e,t,n):(1===s&&x.isXMLDoc(e)||(t=t.toLowerCase(),i=x.attrHooks[t]||(x.expr.match.bool.test(t)?M:R)),n===undefined?i&&"get"in i&&null!==(o=i.get(e,t))?o:(o=x.find.attr(e,t),null==o?undefined:o):null!==n?i&&"set"in i&&(o=i.set(e,n,t))!==undefined?o:(e.setAttribute(t,n+""),n):(x.removeAttr(e,t),undefined))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(w);if(o&&1===e.nodeType)while(n=o[i++])r=x.propFix[n]||n,x.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)},attrHooks:{type:{set:function(e,t){if(!x.support.radioValue&&"radio"===t&&x.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},propFix:{"for":"htmlFor","class":"className"},prop:function(e,t,n){var r,i,o,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return o=1!==s||!x.isXMLDoc(e),o&&(t=x.propFix[t]||t,i=x.propHooks[t]),n!==undefined?i&&"set"in i&&(r=i.set(e,n,t))!==undefined?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){return e.hasAttribute("tabindex")||B.test(e.nodeName)||e.href?e.tabIndex:-1}}}}),M={set:function(e,t,n){return t===!1?x.removeAttr(e,n):e.setAttribute(n,n),n}},x.each(x.expr.match.bool.source.match(/\w+/g),function(e,t){var n=x.expr.attrHandle[t]||x.find.attr;x.expr.attrHandle[t]=function(e,t,r){var i=x.expr.attrHandle[t],o=r?undefined:(x.expr.attrHandle[t]=undefined)!=n(e,t,r)?t.toLowerCase():null;return x.expr.attrHandle[t]=i,o}}),x.support.optSelected||(x.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){x.propFix[this.toLowerCase()]=this}),x.each(["radio","checkbox"],function(){x.valHooks[this]={set:function(e,t){return x.isArray(t)?e.checked=x.inArray(x(e).val(),t)>=0:undefined}},x.support.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var I=/^key/,z=/^(?:mouse|contextmenu)|click/,_=/^(?:focusinfocus|focusoutblur)$/,X=/^([^.]*)(?:\.(.+)|)$/;function U(){return!0}function Y(){return!1}function V(){try{return o.activeElement}catch(e){}}x.event={global:{},add:function(e,t,n,i,o){var s,a,u,l,c,p,f,h,d,g,m,y=q.get(e);if(y){n.handler&&(s=n,n=s.handler,o=s.selector),n.guid||(n.guid=x.guid++),(l=y.events)||(l=y.events={}),(a=y.handle)||(a=y.handle=function(e){return typeof x===r||e&&x.event.triggered===e.type?undefined:x.event.dispatch.apply(a.elem,arguments)},a.elem=e),t=(t||"").match(w)||[""],c=t.length;while(c--)u=X.exec(t[c])||[],d=m=u[1],g=(u[2]||"").split(".").sort(),d&&(f=x.event.special[d]||{},d=(o?f.delegateType:f.bindType)||d,f=x.event.special[d]||{},p=x.extend({type:d,origType:m,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&x.expr.match.needsContext.test(o),namespace:g.join(".")},s),(h=l[d])||(h=l[d]=[],h.delegateCount=0,f.setup&&f.setup.call(e,i,g,a)!==!1||e.addEventListener&&e.addEventListener(d,a,!1)),f.add&&(f.add.call(e,p),p.handler.guid||(p.handler.guid=n.guid)),o?h.splice(h.delegateCount++,0,p):h.push(p),x.event.global[d]=!0);e=null}},remove:function(e,t,n,r,i){var o,s,a,u,l,c,p,f,h,d,g,m=q.hasData(e)&&q.get(e);if(m&&(u=m.events)){t=(t||"").match(w)||[""],l=t.length;while(l--)if(a=X.exec(t[l])||[],h=g=a[1],d=(a[2]||"").split(".").sort(),h){p=x.event.special[h]||{},h=(r?p.delegateType:p.bindType)||h,f=u[h]||[],a=a[2]&&RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=f.length;while(o--)c=f[o],!i&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(f.splice(o,1),c.selector&&f.delegateCount--,p.remove&&p.remove.call(e,c));s&&!f.length&&(p.teardown&&p.teardown.call(e,d,m.handle)!==!1||x.removeEvent(e,h,m.handle),delete u[h])}else for(h in u)x.event.remove(e,h+t[l],n,r,!0);x.isEmptyObject(u)&&(delete m.handle,q.remove(e,"events"))}},trigger:function(t,n,r,i){var s,a,u,l,c,p,f,h=[r||o],d=y.call(t,"type")?t.type:t,g=y.call(t,"namespace")?t.namespace.split("."):[];if(a=u=r=r||o,3!==r.nodeType&&8!==r.nodeType&&!_.test(d+x.event.triggered)&&(d.indexOf(".")>=0&&(g=d.split("."),d=g.shift(),g.sort()),c=0>d.indexOf(":")&&"on"+d,t=t[x.expando]?t:new x.Event(d,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=g.join("."),t.namespace_re=t.namespace?RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=undefined,t.target||(t.target=r),n=null==n?[t]:x.makeArray(n,[t]),f=x.event.special[d]||{},i||!f.trigger||f.trigger.apply(r,n)!==!1)){if(!i&&!f.noBubble&&!x.isWindow(r)){for(l=f.delegateType||d,_.test(l+d)||(a=a.parentNode);a;a=a.parentNode)h.push(a),u=a;u===(r.ownerDocument||o)&&h.push(u.defaultView||u.parentWindow||e)}s=0;while((a=h[s++])&&!t.isPropagationStopped())t.type=s>1?l:f.bindType||d,p=(q.get(a,"events")||{})[t.type]&&q.get(a,"handle"),p&&p.apply(a,n),p=c&&a[c],p&&x.acceptData(a)&&p.apply&&p.apply(a,n)===!1&&t.preventDefault();return t.type=d,i||t.isDefaultPrevented()||f._default&&f._default.apply(h.pop(),n)!==!1||!x.acceptData(r)||c&&x.isFunction(r[d])&&!x.isWindow(r)&&(u=r[c],u&&(r[c]=null),x.event.triggered=d,r[d](),x.event.triggered=undefined,u&&(r[c]=u)),t.result}},dispatch:function(e){e=x.event.fix(e);var t,n,r,i,o,s=[],a=d.call(arguments),u=(q.get(this,"events")||{})[e.type]||[],l=x.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,e)!==!1){s=x.event.handlers.call(this,e,u),t=0;while((i=s[t++])&&!e.isPropagationStopped()){e.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!e.isImmediatePropagationStopped())(!e.namespace_re||e.namespace_re.test(o.namespace))&&(e.handleObj=o,e.data=o.data,r=((x.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a),r!==undefined&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()))}return l.postDispatch&&l.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,s=[],a=t.delegateCount,u=e.target;if(a&&u.nodeType&&(!e.button||"click"!==e.type))for(;u!==this;u=u.parentNode||this)if(u.disabled!==!0||"click"!==e.type){for(r=[],n=0;a>n;n++)o=t[n],i=o.selector+" ",r[i]===undefined&&(r[i]=o.needsContext?x(i,this).index(u)>=0:x.find(i,this,null,[u]).length),r[i]&&r.push(o);r.length&&s.push({elem:u,handlers:r})}return t.length>a&&s.push({elem:this,handlers:t.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,s=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||o,r=n.documentElement,i=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),e.which||s===undefined||(e.which=1&s?1:2&s?3:4&s?2:0),e}},fix:function(e){if(e[x.expando])return e;var t,n,r,i=e.type,s=e,a=this.fixHooks[i];a||(this.fixHooks[i]=a=z.test(i)?this.mouseHooks:I.test(i)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,e=new x.Event(s),t=r.length;while(t--)n=r[t],e[n]=s[n];return e.target||(e.target=o),3===e.target.nodeType&&(e.target=e.target.parentNode),a.filter?a.filter(e,s):e},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==V()&&this.focus?(this.focus(),!1):undefined},delegateType:"focusin"},blur:{trigger:function(){return this===V()&&this.blur?(this.blur(),!1):undefined},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&x.nodeName(this,"input")?(this.click(),!1):undefined},_default:function(e){return x.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){e.result!==undefined&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=x.extend(new x.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?x.event.trigger(i,null,t):x.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},x.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)},x.Event=function(e,t){return this instanceof x.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.getPreventDefault&&e.getPreventDefault()?U:Y):this.type=e,t&&x.extend(this,t),this.timeStamp=e&&e.timeStamp||x.now(),this[x.expando]=!0,undefined):new x.Event(e,t)},x.Event.prototype={isDefaultPrevented:Y,isPropagationStopped:Y,isImmediatePropagationStopped:Y,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=U,e&&e.preventDefault&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=U,e&&e.stopPropagation&&e.stopPropagation()},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=U,this.stopPropagation()}},x.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return(!i||i!==r&&!x.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),x.support.focusinBubbles||x.each({focus:"focusin",blur:"focusout"},function(e,t){var n=0,r=function(e){x.event.simulate(t,e.target,x.event.fix(e),!0)};x.event.special[t]={setup:function(){0===n++&&o.addEventListener(e,r,!0)},teardown:function(){0===--n&&o.removeEventListener(e,r,!0)}}}),x.fn.extend({on:function(e,t,n,r,i){var o,s;if("object"==typeof e){"string"!=typeof t&&(n=n||t,t=undefined);for(s in e)this.on(s,t,n,e[s],i);return this}if(null==n&&null==r?(r=t,n=t=undefined):null==r&&("string"==typeof t?(r=n,n=undefined):(r=n,n=t,t=undefined)),r===!1)r=Y;else if(!r)return this;return 1===i&&(o=r,r=function(e){return x().off(e),o.apply(this,arguments)},r.guid=o.guid||(o.guid=x.guid++)),this.each(function(){x.event.add(this,e,r,n,t)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,x(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return(t===!1||"function"==typeof t)&&(n=t,t=undefined),n===!1&&(n=Y),this.each(function(){x.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){x.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?x.event.trigger(e,t,n,!0):undefined}});var G=/^.[^:#\[\.,]*$/,J=/^(?:parents|prev(?:Until|All))/,Q=x.expr.match.needsContext,K={children:!0,contents:!0,next:!0,prev:!0};x.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if("string"!=typeof e)return this.pushStack(x(e).filter(function(){for(t=0;i>t;t++)if(x.contains(r[t],this))return!0}));for(t=0;i>t;t++)x.find(e,r[t],n);return n=this.pushStack(i>1?x.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},has:function(e){var t=x(e,this),n=t.length;return this.filter(function(){var e=0;for(;n>e;e++)if(x.contains(this,t[e]))return!0})},not:function(e){return this.pushStack(et(this,e||[],!0))},filter:function(e){return this.pushStack(et(this,e||[],!1))},is:function(e){return!!et(this,"string"==typeof e&&Q.test(e)?x(e):e||[],!1).length},closest:function(e,t){var n,r=0,i=this.length,o=[],s=Q.test(e)||"string"!=typeof e?x(e,t||this.context):0;for(;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(11>n.nodeType&&(s?s.index(n)>-1:1===n.nodeType&&x.find.matchesSelector(n,e))){n=o.push(n);break}return this.pushStack(o.length>1?x.unique(o):o)},index:function(e){return e?"string"==typeof e?g.call(x(e),this[0]):g.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){var n="string"==typeof e?x(e,t):x.makeArray(e&&e.nodeType?[e]:e),r=x.merge(this.get(),n);return this.pushStack(x.unique(r))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}});function Z(e,t){while((e=e[t])&&1!==e.nodeType);return e}x.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return x.dir(e,"parentNode")},parentsUntil:function(e,t,n){return x.dir(e,"parentNode",n)},next:function(e){return Z(e,"nextSibling")},prev:function(e){return Z(e,"previousSibling")},nextAll:function(e){return x.dir(e,"nextSibling")},prevAll:function(e){return x.dir(e,"previousSibling")},nextUntil:function(e,t,n){return x.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return x.dir(e,"previousSibling",n)},siblings:function(e){return x.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return x.sibling(e.firstChild)},contents:function(e){return e.contentDocument||x.merge([],e.childNodes)}},function(e,t){x.fn[e]=function(n,r){var i=x.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=x.filter(r,i)),this.length>1&&(K[e]||x.unique(i),J.test(e)&&i.reverse()),this.pushStack(i)}}),x.extend({filter:function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?x.find.matchesSelector(r,e)?[r]:[]:x.find.matches(e,x.grep(t,function(e){return 1===e.nodeType}))},dir:function(e,t,n){var r=[],i=n!==undefined;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&x(e).is(n))break;r.push(e)}return r},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}});function et(e,t,n){if(x.isFunction(t))return x.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return x.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(G.test(t))return x.filter(t,e,n);t=x.filter(t,e)}return x.grep(e,function(e){return g.call(t,e)>=0!==n})}var tt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,nt=/<([\w:]+)/,rt=/<|&#?\w+;/,it=/<(?:script|style|link)/i,ot=/^(?:checkbox|radio)$/i,st=/checked\s*(?:[^=]|=\s*.checked.)/i,at=/^$|\/(?:java|ecma)script/i,ut=/^true\/(.*)/,lt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ct={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ct.optgroup=ct.option,ct.tbody=ct.tfoot=ct.colgroup=ct.caption=ct.thead,ct.th=ct.td,x.fn.extend({text:function(e){return x.access(this,function(e){return e===undefined?x.text(this):this.empty().append((this[0]&&this[0].ownerDocument||o).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=pt(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=pt(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){var n,r=e?x.filter(e,this):this,i=0;for(;null!=(n=r[i]);i++)t||1!==n.nodeType||x.cleanData(mt(n)),n.parentNode&&(t&&x.contains(n.ownerDocument,n)&&dt(mt(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){var e,t=0;for(;null!=(e=this[t]);t++)1===e.nodeType&&(x.cleanData(mt(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return x.clone(this,e,t)})},html:function(e){return x.access(this,function(e){var t=this[0]||{},n=0,r=this.length;if(e===undefined&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!it.test(e)&&!ct[(nt.exec(e)||["",""])[1].toLowerCase()]){e=e.replace(tt,"<$1></$2>");try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(x.cleanData(mt(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=x.map(this,function(e){return[e.nextSibling,e.parentNode]}),t=0;return this.domManip(arguments,function(n){var r=e[t++],i=e[t++];i&&(r&&r.parentNode!==i&&(r=this.nextSibling),x(this).remove(),i.insertBefore(n,r))},!0),t?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t,n){e=f.apply([],e);var r,i,o,s,a,u,l=0,c=this.length,p=this,h=c-1,d=e[0],g=x.isFunction(d);if(g||!(1>=c||"string"!=typeof d||x.support.checkClone)&&st.test(d))return this.each(function(r){var i=p.eq(r);g&&(e[0]=d.call(this,r,i.html())),i.domManip(e,t,n)});if(c&&(r=x.buildFragment(e,this[0].ownerDocument,!1,!n&&this),i=r.firstChild,1===r.childNodes.length&&(r=i),i)){for(o=x.map(mt(r,"script"),ft),s=o.length;c>l;l++)a=r,l!==h&&(a=x.clone(a,!0,!0),s&&x.merge(o,mt(a,"script"))),t.call(this[l],a,l);if(s)for(u=o[o.length-1].ownerDocument,x.map(o,ht),l=0;s>l;l++)a=o[l],at.test(a.type||"")&&!q.access(a,"globalEval")&&x.contains(u,a)&&(a.src?x._evalUrl(a.src):x.globalEval(a.textContent.replace(lt,"")))}return this}}),x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){x.fn[e]=function(e){var n,r=[],i=x(e),o=i.length-1,s=0;for(;o>=s;s++)n=s===o?this:this.clone(!0),x(i[s])[t](n),h.apply(r,n.get());return this.pushStack(r)}}),x.extend({clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),u=x.contains(e.ownerDocument,e);if(!(x.support.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(s=mt(a),o=mt(e),r=0,i=o.length;i>r;r++)yt(o[r],s[r]);if(t)if(n)for(o=o||mt(e),s=s||mt(a),r=0,i=o.length;i>r;r++)gt(o[r],s[r]);else gt(e,a);return s=mt(a,"script"),s.length>0&&dt(s,!u&&mt(e,"script")),a},buildFragment:function(e,t,n,r){var i,o,s,a,u,l,c=0,p=e.length,f=t.createDocumentFragment(),h=[];for(;p>c;c++)if(i=e[c],i||0===i)if("object"===x.type(i))x.merge(h,i.nodeType?[i]:i);else if(rt.test(i)){o=o||f.appendChild(t.createElement("div")),s=(nt.exec(i)||["",""])[1].toLowerCase(),a=ct[s]||ct._default,o.innerHTML=a[1]+i.replace(tt,"<$1></$2>")+a[2],l=a[0];while(l--)o=o.lastChild;x.merge(h,o.childNodes),o=f.firstChild,o.textContent=""}else h.push(t.createTextNode(i));f.textContent="",c=0;while(i=h[c++])if((!r||-1===x.inArray(i,r))&&(u=x.contains(i.ownerDocument,i),o=mt(f.appendChild(i),"script"),u&&dt(o),n)){l=0;while(i=o[l++])at.test(i.type||"")&&n.push(i)}return f},cleanData:function(e){var t,n,r,i,o,s,a=x.event.special,u=0;for(;(n=e[u])!==undefined;u++){if(F.accepts(n)&&(o=n[q.expando],o&&(t=q.cache[o]))){if(r=Object.keys(t.events||{}),r.length)for(s=0;(i=r[s])!==undefined;s++)a[i]?x.event.remove(n,i):x.removeEvent(n,i,t.handle);q.cache[o]&&delete q.cache[o]}delete L.cache[n[L.expando]]}},_evalUrl:function(e){return x.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})}});function pt(e,t){return x.nodeName(e,"table")&&x.nodeName(1===t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function ft(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function ht(e){var t=ut.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function dt(e,t){var n=e.length,r=0;for(;n>r;r++)q.set(e[r],"globalEval",!t||q.get(t[r],"globalEval"))}function gt(e,t){var n,r,i,o,s,a,u,l;if(1===t.nodeType){if(q.hasData(e)&&(o=q.access(e),s=q.set(t,o),l=o.events)){delete s.handle,s.events={};for(i in l)for(n=0,r=l[i].length;r>n;n++)x.event.add(t,i,l[i][n])}L.hasData(e)&&(a=L.access(e),u=x.extend({},a),L.set(t,u))}}function mt(e,t){var n=e.getElementsByTagName?e.getElementsByTagName(t||"*"):e.querySelectorAll?e.querySelectorAll(t||"*"):[];return t===undefined||t&&x.nodeName(e,t)?x.merge([e],n):n}function yt(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ot.test(e.type)?t.checked=e.checked:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}x.fn.extend({wrapAll:function(e){var t;return x.isFunction(e)?this.each(function(t){x(this).wrapAll(e.call(this,t))}):(this[0]&&(t=x(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return x.isFunction(e)?this.each(function(t){x(this).wrapInner(e.call(this,t))}):this.each(function(){var t=x(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=x.isFunction(e);return this.each(function(n){x(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){x.nodeName(this,"body")||x(this).replaceWith(this.childNodes)}).end()}});var vt,xt,bt=/^(none|table(?!-c[ea]).+)/,wt=/^margin/,Tt=RegExp("^("+b+")(.*)$","i"),Ct=RegExp("^("+b+")(?!px)[a-z%]+$","i"),kt=RegExp("^([+-])=("+b+")","i"),Nt={BODY:"block"},Et={position:"absolute",visibility:"hidden",display:"block"},St={letterSpacing:0,fontWeight:400},jt=["Top","Right","Bottom","Left"],Dt=["Webkit","O","Moz","ms"];function At(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=Dt.length;while(i--)if(t=Dt[i]+n,t in e)return t;return r}function Lt(e,t){return e=t||e,"none"===x.css(e,"display")||!x.contains(e.ownerDocument,e)}function qt(t){return e.getComputedStyle(t,null)}function Ht(e,t){var n,r,i,o=[],s=0,a=e.length;for(;a>s;s++)r=e[s],r.style&&(o[s]=q.get(r,"olddisplay"),n=r.style.display,t?(o[s]||"none"!==n||(r.style.display=""),""===r.style.display&&Lt(r)&&(o[s]=q.access(r,"olddisplay",Rt(r.nodeName)))):o[s]||(i=Lt(r),(n&&"none"!==n||!i)&&q.set(r,"olddisplay",i?n:x.css(r,"display"))));for(s=0;a>s;s++)r=e[s],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[s]||"":"none"));return e}x.fn.extend({css:function(e,t){return x.access(this,function(e,t,n){var r,i,o={},s=0;if(x.isArray(t)){for(r=qt(e),i=t.length;i>s;s++)o[t[s]]=x.css(e,t[s],!1,r);return o}return n!==undefined?x.style(e,t,n):x.css(e,t)},e,t,arguments.length>1)},show:function(){return Ht(this,!0)},hide:function(){return Ht(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Lt(this)?x(this).show():x(this).hide()})}}),x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=vt(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=x.camelCase(t),u=e.style;return t=x.cssProps[a]||(x.cssProps[a]=At(u,a)),s=x.cssHooks[t]||x.cssHooks[a],n===undefined?s&&"get"in s&&(i=s.get(e,!1,r))!==undefined?i:u[t]:(o=typeof n,"string"===o&&(i=kt.exec(n))&&(n=(i[1]+1)*i[2]+parseFloat(x.css(e,t)),o="number"),null==n||"number"===o&&isNaN(n)||("number"!==o||x.cssNumber[a]||(n+="px"),x.support.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&(n=s.set(e,n,r))===undefined||(u[t]=n)),undefined)}},css:function(e,t,n,r){var i,o,s,a=x.camelCase(t);return t=x.cssProps[a]||(x.cssProps[a]=At(e.style,a)),s=x.cssHooks[t]||x.cssHooks[a],s&&"get"in s&&(i=s.get(e,!0,n)),i===undefined&&(i=vt(e,t,r)),"normal"===i&&t in St&&(i=St[t]),""===n||n?(o=parseFloat(i),n===!0||x.isNumeric(o)?o||0:i):i}}),vt=function(e,t,n){var r,i,o,s=n||qt(e),a=s?s.getPropertyValue(t)||s[t]:undefined,u=e.style;return s&&(""!==a||x.contains(e.ownerDocument,e)||(a=x.style(e,t)),Ct.test(a)&&wt.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=s.width,u.width=r,u.minWidth=i,u.maxWidth=o)),a};function Ot(e,t,n){var r=Tt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function Ft(e,t,n,r,i){var o=n===(r?"border":"content")?4:"width"===t?1:0,s=0;for(;4>o;o+=2)"margin"===n&&(s+=x.css(e,n+jt[o],!0,i)),r?("content"===n&&(s-=x.css(e,"padding"+jt[o],!0,i)),"margin"!==n&&(s-=x.css(e,"border"+jt[o]+"Width",!0,i))):(s+=x.css(e,"padding"+jt[o],!0,i),"padding"!==n&&(s+=x.css(e,"border"+jt[o]+"Width",!0,i)));return s}function Pt(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=qt(e),s=x.support.boxSizing&&"border-box"===x.css(e,"boxSizing",!1,o);if(0>=i||null==i){if(i=vt(e,t,o),(0>i||null==i)&&(i=e.style[t]),Ct.test(i))return i;r=s&&(x.support.boxSizingReliable||i===e.style[t]),i=parseFloat(i)||0}return i+Ft(e,t,n||(s?"border":"content"),r,o)+"px"}function Rt(e){var t=o,n=Nt[e];return n||(n=Mt(e,t),"none"!==n&&n||(xt=(xt||x("<iframe frameborder='0' width='0' height='0'/>").css("cssText","display:block !important")).appendTo(t.documentElement),t=(xt[0].contentWindow||xt[0].contentDocument).document,t.write("<!doctype html><html><body>"),t.close(),n=Mt(e,t),xt.detach()),Nt[e]=n),n}function Mt(e,t){var n=x(t.createElement(e)).appendTo(t.body),r=x.css(n[0],"display");return n.remove(),r}x.each(["height","width"],function(e,t){x.cssHooks[t]={get:function(e,n,r){return n?0===e.offsetWidth&&bt.test(x.css(e,"display"))?x.swap(e,Et,function(){return Pt(e,t,r)}):Pt(e,t,r):undefined},set:function(e,n,r){var i=r&&qt(e);return Ot(e,n,r?Ft(e,t,r,x.support.boxSizing&&"border-box"===x.css(e,"boxSizing",!1,i),i):0)}}}),x(function(){x.support.reliableMarginRight||(x.cssHooks.marginRight={get:function(e,t){return t?x.swap(e,{display:"inline-block"},vt,[e,"marginRight"]):undefined}}),!x.support.pixelPosition&&x.fn.position&&x.each(["top","left"],function(e,t){x.cssHooks[t]={get:function(e,n){return n?(n=vt(e,t),Ct.test(n)?x(e).position()[t]+"px":n):undefined}}})}),x.expr&&x.expr.filters&&(x.expr.filters.hidden=function(e){return 0>=e.offsetWidth&&0>=e.offsetHeight},x.expr.filters.visible=function(e){return!x.expr.filters.hidden(e)}),x.each({margin:"",padding:"",border:"Width"},function(e,t){x.cssHooks[e+t]={expand:function(n){var r=0,i={},o="string"==typeof n?n.split(" "):[n];for(;4>r;r++)i[e+jt[r]+t]=o[r]||o[r-2]||o[0];return i}},wt.test(e)||(x.cssHooks[e+t].set=Ot)});var Wt=/%20/g,$t=/\[\]$/,Bt=/\r?\n/g,It=/^(?:submit|button|image|reset|file)$/i,zt=/^(?:input|select|textarea|keygen)/i;x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&zt.test(this.nodeName)&&!It.test(e)&&(this.checked||!ot.test(e))}).map(function(e,t){var n=x(this).val();return null==n?null:x.isArray(n)?x.map(n,function(e){return{name:t.name,value:e.replace(Bt,"\r\n")}}):{name:t.name,value:n.replace(Bt,"\r\n")}}).get()}}),x.param=function(e,t){var n,r=[],i=function(e,t){t=x.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(t===undefined&&(t=x.ajaxSettings&&x.ajaxSettings.traditional),x.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,function(){i(this.name,this.value)});else for(n in e)_t(n,e[n],t,i);return r.join("&").replace(Wt,"+")};function _t(e,t,n,r){var i;if(x.isArray(t))x.each(t,function(t,i){n||$t.test(e)?r(e,i):_t(e+"["+("object"==typeof i?t:"")+"]",i,n,r)});else if(n||"object"!==x.type(t))r(e,t);else for(i in t)_t(e+"["+i+"]",t[i],n,r)}x.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){x.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),x.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)
},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var Xt,Ut,Yt=x.now(),Vt=/\?/,Gt=/#.*$/,Jt=/([?&])_=[^&]*/,Qt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Kt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Zt=/^(?:GET|HEAD)$/,en=/^\/\//,tn=/^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,nn=x.fn.load,rn={},on={},sn="*/".concat("*");try{Ut=i.href}catch(an){Ut=o.createElement("a"),Ut.href="",Ut=Ut.href}Xt=tn.exec(Ut.toLowerCase())||[];function un(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(w)||[];if(x.isFunction(n))while(r=o[i++])"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function ln(e,t,n,r){var i={},o=e===on;function s(a){var u;return i[a]=!0,x.each(e[a]||[],function(e,a){var l=a(t,n,r);return"string"!=typeof l||o||i[l]?o?!(u=l):undefined:(t.dataTypes.unshift(l),s(l),!1)}),u}return s(t.dataTypes[0])||!i["*"]&&s("*")}function cn(e,t){var n,r,i=x.ajaxSettings.flatOptions||{};for(n in t)t[n]!==undefined&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&x.extend(!0,e,r),e}x.fn.load=function(e,t,n){if("string"!=typeof e&&nn)return nn.apply(this,arguments);var r,i,o,s=this,a=e.indexOf(" ");return a>=0&&(r=e.slice(a),e=e.slice(0,a)),x.isFunction(t)?(n=t,t=undefined):t&&"object"==typeof t&&(i="POST"),s.length>0&&x.ajax({url:e,type:i,dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?x("<div>").append(x.parseHTML(e)).find(r):e)}).complete(n&&function(e,t){s.each(n,o||[e.responseText,t,e])}),this},x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){x.fn[t]=function(e){return this.on(t,e)}}),x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ut,type:"GET",isLocal:Kt.test(Xt[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":sn,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":x.parseJSON,"text xml":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?cn(cn(e,x.ajaxSettings),t):cn(x.ajaxSettings,e)},ajaxPrefilter:un(rn),ajaxTransport:un(on),ajax:function(e,t){"object"==typeof e&&(t=e,e=undefined),t=t||{};var n,r,i,o,s,a,u,l,c=x.ajaxSetup({},t),p=c.context||c,f=c.context&&(p.nodeType||p.jquery)?x(p):x.event,h=x.Deferred(),d=x.Callbacks("once memory"),g=c.statusCode||{},m={},y={},v=0,b="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(2===v){if(!o){o={};while(t=Qt.exec(i))o[t[1].toLowerCase()]=t[2]}t=o[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===v?i:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return v||(e=y[n]=y[n]||e,m[e]=t),this},overrideMimeType:function(e){return v||(c.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>v)for(t in e)g[t]=[g[t],e[t]];else T.always(e[T.status]);return this},abort:function(e){var t=e||b;return n&&n.abort(t),k(0,t),this}};if(h.promise(T).complete=d.add,T.success=T.done,T.error=T.fail,c.url=((e||c.url||Ut)+"").replace(Gt,"").replace(en,Xt[1]+"//"),c.type=t.method||t.type||c.method||c.type,c.dataTypes=x.trim(c.dataType||"*").toLowerCase().match(w)||[""],null==c.crossDomain&&(a=tn.exec(c.url.toLowerCase()),c.crossDomain=!(!a||a[1]===Xt[1]&&a[2]===Xt[2]&&(a[3]||("http:"===a[1]?"80":"443"))===(Xt[3]||("http:"===Xt[1]?"80":"443")))),c.data&&c.processData&&"string"!=typeof c.data&&(c.data=x.param(c.data,c.traditional)),ln(rn,c,t,T),2===v)return T;u=c.global,u&&0===x.active++&&x.event.trigger("ajaxStart"),c.type=c.type.toUpperCase(),c.hasContent=!Zt.test(c.type),r=c.url,c.hasContent||(c.data&&(r=c.url+=(Vt.test(r)?"&":"?")+c.data,delete c.data),c.cache===!1&&(c.url=Jt.test(r)?r.replace(Jt,"$1_="+Yt++):r+(Vt.test(r)?"&":"?")+"_="+Yt++)),c.ifModified&&(x.lastModified[r]&&T.setRequestHeader("If-Modified-Since",x.lastModified[r]),x.etag[r]&&T.setRequestHeader("If-None-Match",x.etag[r])),(c.data&&c.hasContent&&c.contentType!==!1||t.contentType)&&T.setRequestHeader("Content-Type",c.contentType),T.setRequestHeader("Accept",c.dataTypes[0]&&c.accepts[c.dataTypes[0]]?c.accepts[c.dataTypes[0]]+("*"!==c.dataTypes[0]?", "+sn+"; q=0.01":""):c.accepts["*"]);for(l in c.headers)T.setRequestHeader(l,c.headers[l]);if(c.beforeSend&&(c.beforeSend.call(p,T,c)===!1||2===v))return T.abort();b="abort";for(l in{success:1,error:1,complete:1})T[l](c[l]);if(n=ln(on,c,t,T)){T.readyState=1,u&&f.trigger("ajaxSend",[T,c]),c.async&&c.timeout>0&&(s=setTimeout(function(){T.abort("timeout")},c.timeout));try{v=1,n.send(m,k)}catch(C){if(!(2>v))throw C;k(-1,C)}}else k(-1,"No Transport");function k(e,t,o,a){var l,m,y,b,w,C=t;2!==v&&(v=2,s&&clearTimeout(s),n=undefined,i=a||"",T.readyState=e>0?4:0,l=e>=200&&300>e||304===e,o&&(b=pn(c,T,o)),b=fn(c,b,T,l),l?(c.ifModified&&(w=T.getResponseHeader("Last-Modified"),w&&(x.lastModified[r]=w),w=T.getResponseHeader("etag"),w&&(x.etag[r]=w)),204===e||"HEAD"===c.type?C="nocontent":304===e?C="notmodified":(C=b.state,m=b.data,y=b.error,l=!y)):(y=C,(e||!C)&&(C="error",0>e&&(e=0))),T.status=e,T.statusText=(t||C)+"",l?h.resolveWith(p,[m,C,T]):h.rejectWith(p,[T,C,y]),T.statusCode(g),g=undefined,u&&f.trigger(l?"ajaxSuccess":"ajaxError",[T,c,l?m:y]),d.fireWith(p,[T,C]),u&&(f.trigger("ajaxComplete",[T,c]),--x.active||x.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return x.get(e,t,n,"json")},getScript:function(e,t){return x.get(e,undefined,t,"script")}}),x.each(["get","post"],function(e,t){x[t]=function(e,n,r,i){return x.isFunction(n)&&(i=i||r,r=n,n=undefined),x.ajax({url:e,type:t,dataType:i,data:n,success:r})}});function pn(e,t,n){var r,i,o,s,a=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),r===undefined&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}s||(s=i)}o=o||s}return o?(o!==u[0]&&u.unshift(o),n[o]):undefined}function fn(e,t,n,r){var i,o,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(s=l[u+" "+o]||l["* "+o],!s)for(i in l)if(a=i.split(" "),a[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){s===!0?s=l[i]:l[i]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&e["throws"])t=s(t);else try{t=s(t)}catch(p){return{state:"parsererror",error:s?p:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return x.globalEval(e),e}}}),x.ajaxPrefilter("script",function(e){e.cache===undefined&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),x.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=x("<script>").prop({async:!0,charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),o.head.appendChild(t[0])},abort:function(){n&&n()}}}});var hn=[],dn=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=hn.pop()||x.expando+"_"+Yt++;return this[e]=!0,e}}),x.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,s,a=t.jsonp!==!1&&(dn.test(t.url)?"url":"string"==typeof t.data&&!(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&dn.test(t.data)&&"data");return a||"jsonp"===t.dataTypes[0]?(i=t.jsonpCallback=x.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(dn,"$1"+i):t.jsonp!==!1&&(t.url+=(Vt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||x.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){s=arguments},r.always(function(){e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,hn.push(i)),s&&x.isFunction(o)&&o(s[0]),s=o=undefined}),"script"):undefined}),x.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(e){}};var gn=x.ajaxSettings.xhr(),mn={0:200,1223:204},yn=0,vn={};e.ActiveXObject&&x(e).on("unload",function(){for(var e in vn)vn[e]();vn=undefined}),x.support.cors=!!gn&&"withCredentials"in gn,x.support.ajax=gn=!!gn,x.ajaxTransport(function(e){var t;return x.support.cors||gn&&!e.crossDomain?{send:function(n,r){var i,o,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(i in e.xhrFields)s[i]=e.xhrFields[i];e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(i in n)s.setRequestHeader(i,n[i]);t=function(e){return function(){t&&(delete vn[o],t=s.onload=s.onerror=null,"abort"===e?s.abort():"error"===e?r(s.status||404,s.statusText):r(mn[s.status]||s.status,s.statusText,"string"==typeof s.responseText?{text:s.responseText}:undefined,s.getAllResponseHeaders()))}},s.onload=t(),s.onerror=t("error"),t=vn[o=yn++]=t("abort"),s.send(e.hasContent&&e.data||null)},abort:function(){t&&t()}}:undefined});var xn,bn,wn=/^(?:toggle|show|hide)$/,Tn=RegExp("^(?:([+-])=|)("+b+")([a-z%]*)$","i"),Cn=/queueHooks$/,kn=[An],Nn={"*":[function(e,t){var n=this.createTween(e,t),r=n.cur(),i=Tn.exec(t),o=i&&i[3]||(x.cssNumber[e]?"":"px"),s=(x.cssNumber[e]||"px"!==o&&+r)&&Tn.exec(x.css(n.elem,e)),a=1,u=20;if(s&&s[3]!==o){o=o||s[3],i=i||[],s=+r||1;do a=a||".5",s/=a,x.style(n.elem,e,s+o);while(a!==(a=n.cur()/r)&&1!==a&&--u)}return i&&(s=n.start=+s||+r||0,n.unit=o,n.end=i[1]?s+(i[1]+1)*i[2]:+i[2]),n}]};function En(){return setTimeout(function(){xn=undefined}),xn=x.now()}function Sn(e,t,n){var r,i=(Nn[t]||[]).concat(Nn["*"]),o=0,s=i.length;for(;s>o;o++)if(r=i[o].call(n,t,e))return r}function jn(e,t,n){var r,i,o=0,s=kn.length,a=x.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;var t=xn||En(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,s=0,u=l.tweens.length;for(;u>s;s++)l.tweens[s].run(o);return a.notifyWith(e,[l,o,n]),1>o&&u?n:(a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:x.extend({},t),opts:x.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:xn||En(),duration:n.duration,tweens:[],createTween:function(t,n){var r=x.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)l.tweens[n].run(1);return t?a.resolveWith(e,[l,t]):a.rejectWith(e,[l,t]),this}}),c=l.props;for(Dn(c,l.opts.specialEasing);s>o;o++)if(r=kn[o].call(l,e,c,l.opts))return r;return x.map(c,Sn,l),x.isFunction(l.opts.start)&&l.opts.start.call(e,l),x.fx.timer(x.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function Dn(e,t){var n,r,i,o,s;for(n in e)if(r=x.camelCase(n),i=t[r],o=e[n],x.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),s=x.cssHooks[r],s&&"expand"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}x.Animation=x.extend(jn,{tweener:function(e,t){x.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");var n,r=0,i=e.length;for(;i>r;r++)n=e[r],Nn[n]=Nn[n]||[],Nn[n].unshift(t)},prefilter:function(e,t){t?kn.unshift(e):kn.push(e)}});function An(e,t,n){var r,i,o,s,a,u,l=this,c={},p=e.style,f=e.nodeType&&Lt(e),h=q.get(e,"fxshow");n.queue||(a=x._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,l.always(function(){l.always(function(){a.unqueued--,x.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],"inline"===x.css(e,"display")&&"none"===x.css(e,"float")&&(p.display="inline-block")),n.overflow&&(p.overflow="hidden",l.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],wn.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(f?"hide":"show")){if("show"!==i||!h||h[r]===undefined)continue;f=!0}c[r]=h&&h[r]||x.style(e,r)}if(!x.isEmptyObject(c)){h?"hidden"in h&&(f=h.hidden):h=q.access(e,"fxshow",{}),o&&(h.hidden=!f),f?x(e).show():l.done(function(){x(e).hide()}),l.done(function(){var t;q.remove(e,"fxshow");for(t in c)x.style(e,t,c[t])});for(r in c)s=Sn(f?h[r]:0,r,l),r in h||(h[r]=s.start,f&&(s.end=s.start,s.start="width"===r||"height"===r?1:0))}}function Ln(e,t,n,r,i){return new Ln.prototype.init(e,t,n,r,i)}x.Tween=Ln,Ln.prototype={constructor:Ln,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(x.cssNumber[n]?"":"px")},cur:function(){var e=Ln.propHooks[this.prop];return e&&e.get?e.get(this):Ln.propHooks._default.get(this)},run:function(e){var t,n=Ln.propHooks[this.prop];return this.pos=t=this.options.duration?x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Ln.propHooks._default.set(this),this}},Ln.prototype.init.prototype=Ln.prototype,Ln.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=x.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){x.fx.step[e.prop]?x.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[x.cssProps[e.prop]]||x.cssHooks[e.prop])?x.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},Ln.propHooks.scrollTop=Ln.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},x.each(["toggle","show","hide"],function(e,t){var n=x.fn[t];x.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(qn(t,!0),e,r,i)}}),x.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Lt).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=x.isEmptyObject(e),o=x.speed(t,n,r),s=function(){var t=jn(this,x.extend({},e),o);(i||q.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=undefined),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=x.timers,s=q.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&Cn.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));(t||!n)&&x.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=q.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=x.timers,s=r?r.length:0;for(n.finish=!0,x.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;s>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}});function qn(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=jt[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}x.each({slideDown:qn("show"),slideUp:qn("hide"),slideToggle:qn("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){x.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),x.speed=function(e,t,n){var r=e&&"object"==typeof e?x.extend({},e):{complete:n||!n&&t||x.isFunction(e)&&e,duration:e,easing:n&&t||t&&!x.isFunction(t)&&t};return r.duration=x.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in x.fx.speeds?x.fx.speeds[r.duration]:x.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){x.isFunction(r.old)&&r.old.call(this),r.queue&&x.dequeue(this,r.queue)},r},x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},x.timers=[],x.fx=Ln.prototype.init,x.fx.tick=function(){var e,t=x.timers,n=0;for(xn=x.now();t.length>n;n++)e=t[n],e()||t[n]!==e||t.splice(n--,1);t.length||x.fx.stop(),xn=undefined},x.fx.timer=function(e){e()&&x.timers.push(e)&&x.fx.start()},x.fx.interval=13,x.fx.start=function(){bn||(bn=setInterval(x.fx.tick,x.fx.interval))},x.fx.stop=function(){clearInterval(bn),bn=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fx.step={},x.expr&&x.expr.filters&&(x.expr.filters.animated=function(e){return x.grep(x.timers,function(t){return e===t.elem}).length}),x.fn.offset=function(e){if(arguments.length)return e===undefined?this:this.each(function(t){x.offset.setOffset(this,e,t)});var t,n,i=this[0],o={top:0,left:0},s=i&&i.ownerDocument;if(s)return t=s.documentElement,x.contains(t,i)?(typeof i.getBoundingClientRect!==r&&(o=i.getBoundingClientRect()),n=Hn(s),{top:o.top+n.pageYOffset-t.clientTop,left:o.left+n.pageXOffset-t.clientLeft}):o},x.offset={setOffset:function(e,t,n){var r,i,o,s,a,u,l,c=x.css(e,"position"),p=x(e),f={};"static"===c&&(e.style.position="relative"),a=p.offset(),o=x.css(e,"top"),u=x.css(e,"left"),l=("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1,l?(r=p.position(),s=r.top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(u)||0),x.isFunction(t)&&(t=t.call(e,n,a)),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+i),"using"in t?t.using.call(e,f):p.css(f)}},x.fn.extend({position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===x.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),x.nodeName(e[0],"html")||(r=e.offset()),r.top+=x.css(e[0],"borderTopWidth",!0),r.left+=x.css(e[0],"borderLeftWidth",!0)),{top:t.top-r.top-x.css(n,"marginTop",!0),left:t.left-r.left-x.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent||s;while(e&&!x.nodeName(e,"html")&&"static"===x.css(e,"position"))e=e.offsetParent;return e||s})}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,n){var r="pageYOffset"===n;x.fn[t]=function(i){return x.access(this,function(t,i,o){var s=Hn(t);return o===undefined?s?s[n]:t[i]:(s?s.scrollTo(r?e.pageXOffset:o,r?o:e.pageYOffset):t[i]=o,undefined)},t,i,arguments.length,null)}});function Hn(e){return x.isWindow(e)?e:9===e.nodeType&&e.defaultView}x.each({Height:"height",Width:"width"},function(e,t){x.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){x.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),s=n||(r===!0||i===!0?"margin":"border");return x.access(this,function(t,n,r){var i;return x.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):r===undefined?x.css(t,n,s):x.style(t,n,r,s)},t,o?r:undefined,o,null)}})}),x.fn.size=function(){return this.length},x.fn.andSelf=x.fn.addBack,"object"==typeof module&&module&&"object"==typeof module.exports?module.exports=x:"function"==typeof define&&define.amd&&define("jquery",[],function(){return x}),"object"==typeof e&&"object"==typeof e.document&&(e.jQuery=e.$=x)})(window);

var Config = {
    moduleList: ["messages", "deliveryslip", "status", "composeds"],
    inlineDomain : ["mail.google.com", "outlook.office365.com", "outlook.office.com", "outlook.office.net", "us.exg7.exghost.com", "exg7.exghost.com"],
    getModuleUrl: function(key) {
        return chrome.extension.getURL("webapp/chrome/Module/" + key + ".html");
    },
    cssClass : {
        google : {
            hover: 'T-I-JW'
        }
    },
    domains : ['w6.cirius.com', 'awsdev.betasabrina.com', 'secure.email2.com', 'secure-messaging.com', 'opentext.com', 'securepem.com', 'opentext.de', 'opentext.asia', 'otc-securemail.asia', 'securemail.medtronic.com', 'w.cirius.com', 'webapps.securepem.com', 'devlab-webapp-gfl.betasabrina.com' ],
    preloadcss : ["webapp/chrome/contentscript.css", "webapp/chrome/Module/status.css", "webapp/chrome/Module/messages.css"],
    css : ["webapp/chrome/Module/messages.css"]
};

var Application = {

    portal : false,
    message : false,
    debug_mode : false,
    version : '2.1',
    Preferences : {},
    Modules : {},
    clientInfo : {},

    // logs stuff only when in debug mode
    log : function(text, obj) {
        try {
            if (this.debug_mode && console) {
                console.log(text);
                if (typeof (obj) == 'object') {
                    console.log(JSON.stringify(obj));
                }
            }
        } catch (e) {
            console && console.log('error logging ' + e);
        }
    },

    shouldEnableCors : function(enable) {
        Application.log('Enabling CORS');
        $.ajaxPrefilter(function(options, originalOptions, jqXHR) {
            options.xhrFields = {
                withCredentials : enable
            };
        });
    },

    initialize : function() {
        Application.version = Version.chrome;
        Application.vent = new Vent();
        App.vent.pub = Application.vent.publish;
        App.vent.on = Application.vent.subscribe;
        App.vent.off = Application.vent.unsubscribe;
        App.vent.once = Application.vent.subscribeOnce;
        Application.log('calling initialize');
    },

    togglePortal : function() {
        if (!this.portal) {
            this.openPortal();
        } else {
            this.closePortal();
        }
    },

    openPortal : function() {
        if (!this.portal) {
            this.portal = true;
            var message = '';

            message += '?version=' + this.version;

            if (this.message) {
                message += '&mg=' + this.message;
            }

            if (this.preview) {
                message += '&preview=' + this.preview;
                this.preview = false;
            }

            if (this.pencode) {
                message += '&pencode=' + this.pencode;
            }

            if (this.action) {
                message += '&action=' + this.action;
                this.action = false;
            }

            if (this.compose) {
                message += '&compose=' + this.compose;
                this.compose = false;
            }

            if (this.fyeo) {
                message += '&fyeo=' + this.fyeo;
                this.fyeo = false;
            }

            if (this.email) {
                message += '&e=' + this.email;
                this.email = false;
            }

            $("#portal-section").width('100%').height('100%').attr('src', Application.getURL('chrome.html' + message, ''));
        }
    },

    closePortal : function() {
        this.portal = false;
        $("#portal-section").width('0').height('0').attr('src', '');
    },

    getURL : function(path, target) {
        if (typeof target != "string") {
            target = 'webapp/chrome/';
        }
        return chrome.extension.getURL(target + path);
    },

    clearMessage : function() {
        this.message = false;
        this.pencode = false;
    },

    setCompose : function(data) {
        this.compose = escape(JSON.stringify(data));
    },

    setMessage : function(id, pencode) {
        this.message = id;
        this.pencode = pencode;
    },

    setAction : function(type) {
        this.action = type;
    },

    setPreview : function(guid) {
        this.preview = guid;
    },

    setFyeo : function(fyeo) {
        this.fyeo = fyeo;
    },

    setEmail : function(e) {
        this.email = e;
    },

    alert : function(message, cb) {
        if (swal) {
            swal({
                title : '',
                text : message
            }, cb);
        }
    }

};
var App = Application;

var Service = (function() {
    var s = function() {
        this.SERVICESETTINGS = 'servicesettings';
        this.SERVICEPUBLICSETTINGS = 'servicepublicsettings';
        this.USERSETTINGS = 'usersettings';
        this.SETTINGS = "settings";
        this.PUBLIC_SETTINGS = "public_settings";
        this.CREATE_MESSAGE = {
            PROFESSIONAL_USER : "ProfessionalUsersOnly",
            EMAIL_ADDRESS : "EmailAddressOnly",
            NONE : "None"
        };
        this.USER = {
            GUEST : "Guest",
            PROFESSIONAL : "Professional"
        };
        if(App.vent)
            App.vent.on('service:sync:public:settings', this.syncPublicSettings, this);
        if(App.vent)
            App.vent.on('service:sync:settings', this.syncSettings, this);
    };
    var e = $({});
    var Data = {
        settings : false
    };

    s.prototype.sub = function() {
        e.on.apply(e, arguments);
    };

    s.prototype.unsub = function() {
        e.off.apply(e, arguments);
    };

    s.prototype.pub = function() {
        e.trigger.apply(e, arguments);
    };

    var getData = function(type, key) {
        if (typeof Data[type] != "undefined") {
            if (key) {
                if (typeof Data[type][key] != "undefined") {
                    return Data[type][key];
                } else {
                    return null;
                }
            } else {
                return Data[type];
            }
        }
        return null;
    };

    s.prototype.getData = function(type, key) {
        return getData(type, key);
    };

    var setData = function(type, d) {
        Data[type] = d;
    };

    s.prototype.setData = function(type, d) {
        setData(type, d);
    };

    var syncPublicSettings_ = function(response) {
        if (response) {
            if (!response.responseStatus) {
                setData('public_settings', response);
                Service.pub(Service.SERVICEPUBLICSETTINGS);
            }
            if (response.theme) {
                Application.vent.publish('get:application:settings:complete', response);
            }
        }
    };

    s.prototype.syncPublicSettings = function(callback) {
        ServiceService.getServicePublicSettings(function(response) {
            syncPublicSettings_(response);
            if(callback)
                callback(response);
        });
    };

    var syncSettings_ = function(response) {
        if (response) {
            if (!response.responseStatus) {
                setData('settings', response);
                Service.pub(Service.SERVICESETTINGS);
                if(response.keepMeLoggedIn && App.setPreferences) {
                    if(!response.keepMeLoggedIn.enabled) {
                        Application.setPreferences({
                            keepLoggedIn: false
                        });
                    }
                    if(!response.rememberMe.enabled) {
                        Application.setPreferences({
                            rememberMe: false
                        });
                    }
                }
            }
            if (response.theme) {
                Application.vent.publish('get:application:settings:complete', response);
            }
        }

    };

    s.prototype.syncSettings = function(callback) {
        ServiceService.getServiceSettings(function(response) {
            syncSettings_(response);
            if(callback)
                callback(response);
        });
    };

    s.prototype.sync = function() {
        ServiceService.getServicePublicSettings(syncPublicSettings_);
        ServiceService.getServiceSettings(syncSettings_);
    };

    return new s();
})();

if (typeof module !== 'undefined' && module.exports) {
	module.exports = Service;
}

// parseUri 1.2.2
// (c) Steven Levithan <stevenlevithan.com>
// MIT License

function parseUri (str) {
    var o   = parseUri.options,
        m   = o.parser[o.strictMode ? "strict" : "loose"].exec(str),
        uri = {},
        i   = 14;

    while (i--) uri[o.key[i]] = m[i] || "";

    uri[o.q.name] = {};
    uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
        if ($1) uri[o.q.name][$1] = $2;
    });

    return uri;
};

parseUri.options = {
    strictMode: false,
    key: ["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],
    q:   {
        name:   "queryKey",
        parser: /(?:^|&)([^&=]*)=?([^&]*)/g
    },
    parser: {
        strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
        loose:  /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
    }
};

var Module = {
    list : Config.moduleList,
    set : {},
    loadModule : function(key) {
        var me = this;
        url = Config.getModuleUrl(key) + "?t=" + new Date().getTime();
        console.log("ModuleUrl:%o",url);

        $.ajax({
            url : url,
            async : false,
            dataType : 'html',
            success : function(data) {
                me.set[key] = data;
            }
        });
    },

    loadModules : function() {
        var i, me = this;
        for ( i = 0; i < me.list.length; i++) {
            me.loadModule(me.list[i]);
        }
    },

    initialize : function() {
        var me = this;
        me.loadModules();
    },

    loadMessages : function() {
        var module, source, template;
        source = Module.set.messages;
        template = Handlebars.compile(source);
        module = $(template(Locale.Message));
        return module;
    },

    loadDeliveryslip : function() {
        var module, source, template;
        source = Module.set.deliveryslip;
        template = Handlebars.compile(source);
        module = $(template(Locale.Deliveryslip));
        return module;
    },

    loadStatus : function() {
        var module, source, template;
        source = Module.set.status;
        template = Handlebars.compile(source);
        module = $(template(Locale.Login));
        return module;
    },

    loadComposeDeliveryslip : function() {
        var module, source, template;
        source = Module.set.composeds;
        template = Handlebars.compile(source);
        module = $(template(Locale.Deliveryslip));
        return module;
    }
};

var Transfer = {
    setPreference : function(obj, cb) {
        this.sendRequest({
            command : 'setPreference',
            preference : obj
        }, function(response) {
            View.preference = response;
            if (cb) {
                cb(response);
            }
        });
    },

    getPreference : function(cb) {
        this.sendRequest({
            command : 'getPreference',
        }, function(response) {
            View.preference = response;
            if (cb) {
                cb(response);
            }
        });
    },

    clearPreference : function(cb) {
        this.sendRequest({
            command : 'cleanPreference',
        }, function(response) {
            View.preference = response;
            if (cb) {
                cb(response);
            }
        });
    },

    sendRequest : function(request, response) {
        chrome.runtime.sendMessage(request, response);
    },
    
    loadSweetAlert : function() {
        this.sendRequest({
            command : 'loadSweetAlert',
        }, function(response) {
        });
    }
};
var View = {
    domains : Config.domains,
    preference : {},
    noteCls : "sm-pre-note",
    menuCls : "sm-menu",

    initEvent : function() {
        chrome.runtime.onMessage.addListener(function(request, sender) {
            //console.log(request);
            if (request.command) {
                switch (request.command) {
                    case 'clickIcon':
                        Application.clearMessage();
                        View.toggleWindow();
                        //$('body')[0].style.backgroundColor = '#' + Math.floor(Math.random() * 16777215).toString(16);
                        break;
                }
            }
        });

        window.addEventListener("message", function(e) {
            if (e.data.type) {
                switch (e.data.type) {
                    case 'setPreference':
                        Transfer.getPreference();
                        break;
                    case 'closeApp':
                        View.hideWindow();
                        break;
                }
            }
        }, false);
    },

    inlineEnable: function() {
        return (View.type == "google" && View.preference['inline-setting-gmail']) || (View.type == "o365" && View.preference['inline-setting-office']) || (View.type == "zimbra" && View.preference['inline-setting-zimbra']);
    },

    toggleWindow : function() {
        //console.log('toggleWindow');
        $('#content-script').toggle();
        Application.togglePortal();
    },

    showWindow : function() {
        $('#content-script').show();
        Application.openPortal();
    },

    hideWindow : function() {
        //console.log('hideWindow');
        $('#content-script').hide();
        Application.closePortal();
        var scb = function() {
            if (View.Login.successCallback) {
                View.Login.successCallback();
                View.Login.successCallback = false;
            }
        };
        View.Login.authenticate(scb);
        //checkMessage();
    },

    getMessageDetails : function(event) {
        var mg = event.target.attributes.getNamedItem('mg').value;
        var pencode = event.target.attributes.getNamedItem('pencode').value;
        Application.log(mg);
        Application.setMessage(mg, pencode);
        View.showWindow();
    },

    getLinks : function() {
        var results = [];
        var seenLinks = {};
        var anchor = document.getElementsByTagName('a');
        console.log(View.type);
        try {
            var links = [];
            var link1 = document.querySelectorAll("a");
            var i, j;
            for(i = 0; i < link1.length; i++) {
                link1[i].iframe = false;
                links.push(link1[i]);
            }

            if (View.type == "zimbra") {
                var frame = $("iframe").contents();
                var link2;
                for (i = 0; i < frame.length; i++) {
                    link2 = $(frame[i]).find('a');
                    for (j = 0; j < link2.length; j++) {
                        link2[j].iframe = frame[i];
                        links.push(link2[j]);
                    }
                }
            }
            console.log(links);
            for (var i = 0; i < links.length; ++i) {
                var text = links[i].textContent;
                var link = links[i].href.replace(/(.*)#?/, "$1");
                var in_quote = $(links[i]).parents('blockquote');
                if (seenLinks[link] && !in_quote.length)
                    continue;
                seenLinks[link] = 1;
                seenLinks[text] = 1;
                results.push({
                    iframe: links[i].iframe,
                    obj : links[i],
                    href : link,
                    text : text,
                    reply : in_quote.length
                });
                if (text.indexOf('http') > -1) {
                    results.push({
                        obj : links[i],
                        href : text,
                        text : text
                    });
                }
            }
        } catch (err) {
            console.log('err');
            console.log(err);
        }
        return results;
    },

    addViewInSecureMessage : function(target, mg, pencode, menu) {

    },

    checkLogin : function(target, mg, pencode, menu, e) {
        //console.log('View.checkLogin');
        var scb = function() {
            //console.log('view.checklogin scb');
            var pref = View.preference;
            menu.find('.sm-menu-tools').find('.sm-login-btn').hide();
            if(pref['penCode'] == pencode && !View.inlineEnable()) {
                menu.find('.sm-menu-tools').find('.sm-secure-btn').show();
            }
            //View.Message.getMessageComplete(target, mg, pencode, menu);
        };
        var fcb = function() {
            target.empty();
            target.css('min-height', 0);
            menu.find('.sm-menu-tools').find('.c-logbtn').remove();
            var login = $('<div class="sm-btn sm-login-btn c-logbtn"><a class="view-inline icon-enter text-show" title="Login to view inline" email=""' + e + '">Login</a></div>');
            menu.find('.sm-menu-tools').prepend(login);
            login.find('.view-inline').off('click').on('click', function() {
                View.Login.inlineLogin(scb, e);
            });

        };

        menu.find('.sm-menu-tools').find('.sm-secure-btn').hide();
        if (!View.Login.auth) {
            View.Login.authenticate(scb, fcb);
        } else {
            scb();
        }
    },

    findAllLinks : function() {

        var domains = View.domains;
        var links = View.getLinks();
        var foundLinks = [];
        var _curLink, _curPenCode, mg, e;

        for (var i = 0; i < links.length; i++) {
            for (var n = 0; n < domains.length; n++) {
                if (links[i].href.indexOf(domains[n]) != -1 && links[i].href.indexOf("mg=") != -1 && links[i].href.indexOf("ik=") == -1) {
                    if ((links[i].href.split('/')[2].indexOf(domains[n]) != -1))
                        foundLinks.push(links[i]);
                }
            }
        }
        if (foundLinks.length > 0) {
            for (var i = 0; i < foundLinks.length; i++) {
                _curLink = $(foundLinks[i].obj);
                _curLink.attr('href', foundLinks[i].href);
                _curPenCode = foundLinks[i].href.split('/')[3].split('?')[0];
                mg = parseUri(_curLink.attr('href').replace("@", "%40")).queryKey.mg;
                e = parseUri(_curLink.attr('href').replace("@", "%40")).queryKey.e;
                if(typeof e == "string") {
                    e = e.replace(/%40/g, '@');
                }

                /*
                 if (!notified) {
                 showNotification('Secure Message Detected', 'Click here to view the Secure Message');

                 notification.unbind('click');
                 notification.bind('click', getMessageDetails);
                 if (noteTimer) {
                 clearTimeout(noteTimer);
                 }
                 }
                 */

                if (_curLink.attr('_sm-linked') != 'true') {
                    var menu = $("<div/>").addClass(View.menuCls);
                    //var menuheader = $("<div class='sm-menu-header'>Secure Email</div>");
                    //var menuheader = $("<div class='sm-menu-header'></div>");
                    //menu.append(menuheader);

                    var divcontent = "<div class='sm-btn sm-secure-btn'><a href='javascript:;' mg='";
                    divcontent += mg + "' pencode='" + _curPenCode + "' title='View Secure Message' class='icon-lock text-show'>View Secure Message</a></div>";

                    var btn = $(divcontent);
                    btn.bind('click', View.getMessageDetails);

                    var wmBtn = $("<div class='sm-btn sm-webmail-btn'><a href='" + foundLinks[0].obj.href + "' _sm-linked='true' title='View In Secure Webmail' class='icon-secure-email text-show' target='_BLANK'>View In Secure Webmail</a></div>");

                    var menubuttons = $("<div class='sm-menu-tools' id='secmsg'></div>").append(btn).append(wmBtn);

                    menu.append(menubuttons);


                    //if (POC) {


                    if(View.checkParent(_curLink)) {
                        console.log('checkparent true');
                        menu.insertAfter(View.getParent(_curLink));
                    } else {
                        console.log('checkparent false');
                        menu.insertAfter(_curLink);
                        _curLink.attr('_sm-linked', true);
                    }

                    //menu.insertAfter(_curLink.parent().parent().parent());

                    //} else {
                    //    menu.insertAfter(_curLink);
                    //}


                    //var note = $("<div>Follow the link below to read or reply to your secure message</div>").addClass(View.noteCls);
                    //menu.before(note);

                    $('<div style="clear:both"></div>').insertAfter(wmBtn);

                    var content = $('<div>').addClass('SEM-content').attr('id', 'secmsg').attr('mg', mg).attr('pencode', _curPenCode).insertAfter(menu);

                    $('<div style="clear:both"></div>').insertAfter(content);
                    //if (POC) {
                    content.parent().parent().width('100%');
                    if (_curLink.closest('.gmail_extra').length > 0) {
                        foundLinks[i].reply = 1;
                    }
                    if (foundLinks[i].reply) {
                        if (View.inlineEnable()) {
                            btn.hide();
                            if (_curLink.closest('.gmail_extra').length > 0) {
                                content.insertAfter(_curLink.closest('.gmail_extra'));
                                _curLink.closest('.gmail_extra').remove();
                            } else {
                                if(View.checkParent(_curLink)) {
                                    View.getParent(_curLink).remove();
                                }
                            }
                            menu.remove();

                            View.Message.getReplyMessage(content, mg, _curPenCode);
                            View.Status.checkService(content, menu, _curPenCode);
                        }
                        //_curLink.closest('.gmail_extra').remove();

                    } else {
                        //_curLink.parent().parent().parent().remove();
                        if(View.checkParent(_curLink)) {
                            View.getParent(_curLink).remove();
                        }
                        if (View.inlineEnable()) {
                            btn.hide();
                            View.Message.getMessage(content, mg, _curPenCode, menu, e);
                            View.Status.checkService(content, menu, _curPenCode);
                        } else {
                            View.checkLogin(content, mg, _curPenCode, menu, e);
                        }
                    }
                    //} else {
                    //    _curLink.remove();
                    //}

                    if (foundLinks[i].iframe) {
                        View.addCSS(foundLinks[i].iframe);
                    }

                }
            }
        }
    },

    getParent: function(target) {
        if(View.checkParent(target)) {
            return target.parents('tbody')[0];
        } else {
            return false;
        }
    },

    checkParent: function(target) {
        return target.parent().parent().parent().parent().is('tbody') || target.parent().parent().parent().is('tbody') || target.parent().parent().is('font');
    },

    updateLogin : function() {
        var links = $('.SEM-AppLogin');
        if (links.length) {
            for (var i = 0; i < links.length; i++) {
                var _content = $(links[i]).parent('.SEM-content');
                var mg = _content.attr('mg');
                var pencode = _content.attr('pencode');
                View.Message.getMessage(_content, mg, pencode);
            }
        }
    },

    addCSS: function(doc) {
        if(!$(doc).find('body').hasClass('secmsg')) {
            $.ajax({
                url: chrome.extension.getURL("scripts/webfont.css"),
                async: false,
                dataType: 'css',
                success: function (data) {
                    var link = doc.createElement("link");
                    link.href = chrome.extension.getURL("scripts/webfont.css");
                    link.type = "text/css";
                    link.rel = "stylesheet";
                    doc.getElementsByTagName("head")[0].appendChild(link);
                },
                error: function (data) {
                    var link = doc.createElement("link");
                    link.href = chrome.extension.getURL("scripts/webfont.css");
                    link.type = "text/css";
                    link.rel = "stylesheet";
                    doc.getElementsByTagName("head")[0].appendChild(link);
                }
            });

            var css = Config.preloadcss || Config.css;
            var link;
            for (var i = 0; i < css.length; i++) {
                var link = doc.createElement("link");
                link.href = chrome.extension.getURL(css[i]);
                link.type = "text/css";
                link.rel = "stylesheet";
                try {
                    doc.getElementsByTagName("head")[0].appendChild(link);
                } catch (e) {
                    console.err(e);
                }
            }
        }
    }
};


View.Login = {
    auth : false,
    successCallback: false,
    reauthing: false,
    reauthcb : {
        scb: [],
        fcb: []
    },
    inlineLogin : function(callback, e) {
        if(callback) {
            this.successCallback = callback;
        }
        Application.setAction('close');
        Application.setEmail(e);
        View.showWindow();
    },
    authenticate : function(scb, fcb) {
        var cb;

        var success = function() {
            Service.syncSettings(function(){
                if (typeof scb == "function") {
                    scb();
                }
                while(View.Login.reauthcb.scb.length > 0) {
                    cb = View.Login.reauthcb.scb.pop();
                    View.Login.reauthcb.fcb = [];
                    cb();
                }
            });
        };

        if(!View.Login.reauthing) {
            View.Login.reauthing = true;
            var cb = function(preference) {
                E2Service.token = preference.token;
                Application.sessionToken = preference.token;
                E2Service.authKey = preference.authKey;
                MessagingAPI.authToken = preference.authKey;
                if (preference.apiUrl) {
                    E2Service.updateAPIUrl(preference.apiUrl);
                }


                if (preference.authKey) {

                    ServiceAPI.authenticate(function(response){

                        if (response && !response.responseStatus) {
                            E2Service.token = response.sessionToken;
                            Application.sessionToken = response.sessionToken;
                            View.Login.auth = true;
                            success();
                        } else {
                            View.Login.auth = false;
                            if(typeof fcb == "function") {
                                fcb();
                            }
                            while(View.Login.reauthcb.fcb.length > 0) {
                                cb = View.Login.reauthcb.fcb.pop();
                                View.Login.reauthcb.scb = [];
                                cb();
                            }
                        }
                        View.Login.reauthing = false;
                    });
                } else {
                    View.Login.auth = false;
                    if(typeof fcb == "function") {
                        fcb();
                    }
                    while(View.Login.reauthcb.fcb.length > 0) {
                        cb = View.Login.reauthcb.fcb.pop();
                        View.Login.reauthcb.scb = [];
                        cb();
                    }
                    View.Login.reauthing = false;
                }
            };
            Transfer.getPreference(cb);
        } else {
            if (typeof scb == "function") {
                console.log('pushing scb');
                View.Login.reauthcb.scb.push(scb);
            }
            if(typeof fcb == "function") {
                console.log('pushing fcb');
                View.Login.reauthcb.fcb.push(fcb);
            }
        }
    },
    removeAuthenticate : function() {
        var ra = Application.NotificationController.confirm(Locale.View.REMOVE_AUTHENTICATION_CONFIRM);
//        var ra = confirm(Locale.View.REMOVE_AUTHENTICATION_CONFIRM);
        if (ra) {
            Transfer.cleanPreference();
            E2Service.authKey = "";
            E2Service.token = "";
            View.Message.checkMessage();
        }
    },
    logout : function() {
        Transfer.setPreference({
            token : "",
            authKey : "",
            emailAdress : "",
            loggedIn : false
        });
        E2Service.authKey = "";
        E2Service.token = "";
        View.Message.checkMessage();
    },

    portalDifference : function() {

    }
};



View.Deliveryslip = {
    initialize : function(target) {
        var me = this, module;
        me.showTab = true;
        module = Module.loadDeliveryslip();
        module.find('#SEM-md-recall').hide();
        target.append(module);
        me.bind(target, module);
        return module;
    },

    bind : function(target, module) {
        var me = this;
        $(".SEM-md-subtitle.collapsible", module).on('click', function(e) {
            $(e.currentTarget).toggleClass("collasped");
            if (target) {
                target.css('min-height', $('.SEM-Deliveryslip', module).outerHeight());
            }
        });
        $(".SEM-ds-module .SEM-dsm-title", module).on('click', function(e) {
            $(e.currentTarget).parent().toggleClass("collasped");
            if (target) {
                target.css('min-height', $('.SEM-Deliveryslip', module).outerHeight());
            }
        });
        $('.SEM-ds-toolbar .icon-refresh', module).on('click', function() {

        });

        $('.checkbox', module).on('click', function() {
            $(this).toggleClass('checked');
        });

        $('.radio', module).on('click', function() {
            if ($(this).hasClass('checked')) {
                $(this).removeClass('checked');
            } else {
                $('.radio', module).removeClass('checked');
                $(this).addClass('checked');
            }
        });

        $('.app-collapse-icon', module).on('click', function() {
            $('.SEM-ds.message', module).removeClass('active');
            setTimeout(function() {
                $('.SEM-Deliveryslip', module).hide();
                $('.SEM-DeliveryslipTab', module).show();
                if (target) {
                    target.css('min-height', $('.SEM-DeliveryslipTab', module).outerWidth());
                }
            }, 450);
        });

        $('.SEM-DeliveryslipTab', module).on('click', function() {
            $('.SEM-DeliveryslipTab', module).hide();
            $('.SEM-Deliveryslip', module).show();

            setTimeout(function() {
                $('.SEM-ds.message', module).addClass('active');
                if (target) {
                    target.css('min-height', $('.SEM-Deliveryslip', module).outerHeight());
                }
            }, 100);
        });
        $('.SEM-Deliveryslip', module).hide();
        //$('.SEM-DeliveryslipTab', module).hide();

        if (target) {
            target.css('min-height', $('.SEM-DeliveryslipTab', module).outerWidth());
        }
    },

    hideTab : function(module) {
        $('.SEM-DeliveryslipTab', module).remove();
    },

    toggleDeliveryslip : function(module) {
        $('.SEM-Deliveryslip', module).toggle();
        $('.SEM-ds-content', module).show();
    },

    listAttachments : function(target, attachments) {
        $('.SEM-messageattachments', target).empty();
        if (attachments && attachments.length > 0) {
            var attach;
            for (attach in attachments) {
                var attachElem = $('<div class="ds-attachment" guid="' + attachments[attach].guid + '">');

                var statusImg = (attachments[attach].status == "active") ? "ds-check.png" : "ds-upload.png";

                var ext = "", extname = "";
                if (attachments[attach].fileName.lastIndexOf('.') > -1) {
                    ext = attachments[attach].fileName.match(/[^\.]+$/gim);
                }
                if (ext) {
                    extname = '.' + ext;
                }
                var filename = attachments[attach].fileName.substr(0, attachments[attach].fileName.lastIndexOf('.')) || attachments[attach].fileName;

                var downloadLink = "https://secure.email2.com/betapreprod/services/downloads/attachments.aspx?t=" + attachments[attach].guid + "&a=" + attachments[attach].extendedProperties.id + "&F=Y";

                attachElem.append('<div class="expand"></div>' + '<div class="ds-attachment-filename">' + '<div class="icon-attach ds-attachment-icon"></div>' + '<div class="dl_attach">' + '<span class="fn">' + filename + '</span><span class="ext">' + extname + '</span><br/>' + '</div>' + '</div>');

                var attachDetails = $('<div class="ds-attachment-info">');
                var table = $('<table>');
                var row = $('<tr>');
                row.append('<td>' + Locale.Deliveryslip.STATUS + ':</td>');
                row.append('<td>' + Locale.Deliveryslip.ACTIVE + '</td>');
                table.append(row);

                row = $('<tr>');
                row.append('<td>' + Locale.Deliveryslip.SIZE + ':</td>');
                row.append('<td>' + convertBytes(attachments[attach].fileSize, true) + '</td>');
                table.append(row);

                ext = (ext) ? ext[0] : Locale.Deliveryslip.UNKNOWN;
                row = $('<tr>');
                row.append('<td>' + Locale.Deliveryslip.FORMAT + ':</td>');
                row.append('<td>' + ext.toUpperCase() + '</td>');
                table.append(row);

                row = $('<tr>');
                row.append('<td>' + Locale.Deliveryslip.UPLOAD_BY + ':</td>');
                row.append('<td><div class="email">' + attachments[attach].uploadedBy + '</div></td>');
                table.append(row);

                row = $('<tr>');
                row.append('<td>' + Locale.Deliveryslip.UPLOAD_ON + ':</td>');
                row.append('<td>' + moment(attachments[attach].uploadDate.replace('new ', '').replace(' ', '')).format('MMM DD YYYY, h:mmA') + '</td>');
                table.append(row);

                attachDetails.append(table);
                attachElem.append(attachDetails);

                $('.SEM-messageattachments', target).append(attachElem);
                $('#SEM-ds-module-attachment').removeClass('collasped');
            }

            $('.ds-attachment', target).removeClass('collaspe');

            if (this.type == 'recall') {
                $('.ds-attachment', target).addClass('recalled');
                $('.ds-attachment', target).off();
            } else {
                $('.ds-attachment', target).removeClass('recalled');

                $('.ds-attachment', target).on('click', $.proxy(function(e) {
                    if (!$(e.target).hasClass('expand')) {
                        this.event.onAttachmentClick(e, $(e.currentTarget).attr('guid'));
                    } else {
                        $(e.currentTarget).toggleClass('collaspe');
                    }
                }, this));

            }
        } else {
            $('.SEM-messageattachments', target).html('<div class="no-file-attachment">' + Locale.Deliveryslip.NO_FILE_ATTACHMENT + '</div>');
            $('#SEM-ds-module-attachment', target).addClass('collasped');
        }
        return this;
    },

    setInformation : function(e2Response, module) {
        var me = this, preference = View.preference;
        me.setParticipants(module, e2Response.sender, e2Response.to.concat(e2Response.cc));
        me.setHeader(module, {
            penImage : preference.penImage,
            penName : preference.penName,
            emailAddress : preference.emailAddress,
            subject : (e2Response.subject) ? e2Response.subject : Locale.ViewMessage.NO_SUBJECT,
            package : (preference.isTrial) ? Locale.ViewMessage.GUEST_USER : Locale.ViewMessage.PRO_USER
        });
        me.setDeliveryInformation(module, {
            date : new Date(e2Response.date),
            status : e2Response.status
        });
        me.setSecurityOptions(module, e2Response.messageOptions);
        me.listAttachments(module, e2Response.attachments);
    },

    setParticipants : function(target, from, recipients) {
        var name, num_participants = '', recipient, msgtracking;

        $('.ds-from .value', target).text(from.firstName + " " + from.lastName);
        $('.recipients-row', target).remove();

        if (from) {
            num_participants = 1;
        }
        if (recipients && recipients.length) {
            num_participants += recipients.length;
        }
        $('.participants', target).text(num_participants + ' Participants');

        for (var i in recipients) {
            recipient = recipients[i];
            var tr = $('<tr>').addClass('recipients-row');
            name = recipient.firstName ? recipient.firstName + ' ' + recipient.lastName : recipient.email.split('@')[0];
            var userclass = 'user-' + recipient.email.replace(/@/g, "").replace(/\./g, "");

            tr.addClass(userclass);
            tr.append($('<td>').text(recipient.field + ":")).append($('<td>').append($('<div>').addClass('value').text(name)));

            var statuses = ["deliverySlip", "message", "reply", "forward", "print", "delete"];

            for (var x = 0; x < 6; x++) {
                tr.append($('<td>').append($('<div>').addClass('ds-statusbox').addClass('ds-statusbox-' + statuses[x])));
            }
            $('.SEM-md-parti-tbl', target).append(tr);

            // var msgtracking = $('<tr class="ds-msgtracking-participants user-'+recipients[i]['email'].replace(/@/g, "").replace(/\./g, "")+' disabled"><td>'+((recipients[i]['firstName'])?recipients[i]['firstName']+' '+recipients[i]['lastName'] : recipients[i]['email'])+'</td><td class="retrievedDate">N/A</td></tr>');
            msgtracking = '<tr class="ds-msgtracking-participants user-' + recipient.email.replace(/@/g, "").replace(/\./g, "") + ' disabled">';
            msgtracking += '<td>' + (recipient.firstName ? recipient.firstName + ' ' + recipient.lastName : recipient.email.split('@')[0] ) + '</td>';
            msgtracking += '<td class="retrievedDate">N/A</td>';
            msgtracking += '</tr>';
            $('.ds-msgtracking-title', target).after(msgtracking);
        }

        // hide or show panels, sub panels
        $('#SEM-ds-module-tracking', target).removeClass('collasped');
        $('#SEM-ds-module-detail', target).removeClass('collasped');
        //$('.ds-msgtracking-header', target).addClass('collasped');

    },

    setHeader : function(target, infoObj) {

        if (infoObj.penImage) {
            $('.SEM-md-penicon', target).empty().append($('<img>').attr('src', infoObj.penImage).attr('width', '48'));
        }
        if (infoObj.penName) {
            $('.SEM-md-pentitle', target).text(infoObj.penName);
        }
        if (infoObj.emailAddress) {
            $('.SEM-md-user', target).text(infoObj.emailAddress);
        }
        if (infoObj.subject) {
            $('.message .SEM-md-subject, .composeslip .SEM-md-subject', target).text(infoObj.subject);
        }
        if (infoObj.package) {
            $('.SEM-md-userlevel', target).text(infoObj.package);
        }
    },

    setDeliveryInformation : function(target, options) {
        $('.info-date .value', target).text(moment(options.date).format('MMM DD YYYY, h:mmA'));
        $('.status-active .value', target).text(options.status.charAt(0).toUpperCase() + options.status.slice(1)).toggleClass('active', options.status == "active").toggleClass("warn", options.status != "active");
    },

    setSecurityOptions : function(target, options) {
        $('.status-allowreply .value', target).text((options.allowReply) ? Locale.Deliveryslip.REPLY_ENABLED : Locale.Deliveryslip.REPLY_DISABLED).toggleClass("active", options.allowReply).toggleClass("warn", !options.allowReply);
        $('.status-allowforward .value', target).text((options.allowForward) ? Locale.Deliveryslip.FORWARD_ENABLED : Locale.Deliveryslip.FORWARD_DISABLED).toggleClass("active", options.allowForward).toggleClass("warn", !options.allowForward);
        $('.status-confidential .value', target).text((options.fyeoType != "penPass") ? Locale.Deliveryslip.NO_PASSWORD : Locale.Deliveryslip.SECURE_PASSWORD).toggleClass("active", options.fyeoType != "penPass").toggleClass("orange", options.fyeoType == "penPass");
        $('.status-fyeo .value', target).text((options.fyeoType != "uniquePass") ? Locale.Deliveryslip.NO_PASSWORD : Locale.Deliveryslip.UNIQUE_PASSWORD).toggleClass("active", options.fyeoType != "uniquePass").toggleClass("orange", options.fyeoType == "uniquePass");
        $('.status-allowtracking .value', target).text((options.allowTracking) ? Locale.Deliveryslip.TRACKING_ENABLED : Locale.Deliveryslip.TRACKING_DISABLED).toggleClass("active", options.allowTracking).toggleClass("warn", !options.allowTracking);
        $('.status-allowsharing .value', target).text((options.shareTracking) ? Locale.Deliveryslip.SHARING_ENABLED : Locale.Deliveryslip.SHARING_DISABLED).toggleClass("active", options.shareTracking).toggleClass("warn", !options.shareTracking);
    },

    getComposeOptions : function(target) {
        return {
            allowReply : !$('#compose-opt-allowReply', target).hasClass('checked'),
            allowForward : !$('#compose-opt-allowForward', target).hasClass('checked'),
            confidential : $('#compose-opt-confidential', target).hasClass('checked'),
            fyeo : $('#compose-opt-fyeo', target).hasClass('checked'),
            allowTracking : $('#compose-opt-allowTracking', target).hasClass('checked'),
            shareTracking : $('#compose-opt-shareTracking', target).hasClass('checked')
        };
    },

    getMessageTracking : function(mg, password, deliveryModule) {
        E2Deliveryslip.getMessageTracking(mg, password, 'all', 'basic', function(e2Response) {
            View.Deliveryslip.getMessageTrackingComplete(deliveryModule, e2Response);
        });
    },

    getMessageTrackingComplete : function(target, e2Response) {
        console.log('getMessageTrackingComplete');
        console.log(target);
        console.log(e2Response);
        var tooltips = {
            deliverySlip : Locale.Deliveryslip.Tooltips.DELIVERYSLIP,
            message_details : Locale.Deliveryslip.Tooltips.MESSAGE_DETAIL,
            securityOptions : {
                replyFreeze : '<h4><i class="icon-info"></i>' + Locale.Deliveryslip.Tooltips.SECURITY_OPTIONS.TITLE.REPLY_FREEZE + '</h4>' + Locale.Deliveryslip.Tooltips.SECURITY_OPTIONS.CONTENT.REPLY_FREEZE,
                replyAllFreeze : '<h4><i class="icon-info"></i>' + Locale.Deliveryslip.Tooltips.SECURITY_OPTIONS.TITLE.REPLYALL_FREEZE + '</h4>' + Locale.Deliveryslip.Tooltips.SECURITY_OPTIONS.CONTENT.REPLYALL_FREEZE,
                forwardFreeze : '<h4><i class="icon-info"></i>' + Locale.Deliveryslip.Tooltips.SECURITY_OPTIONS.TITLE.FORWARD_FREEZE + '</h4>' + Locale.Deliveryslip.Tooltips.SECURITY_OPTIONS.CONTENT.FORWARD_FREEZE,
                recallEnable : '<h4><i class="icon-info"></i>' + Locale.Deliveryslip.Tooltips.SECURITY_OPTIONS.TITLE.RECALL_ENABLE + '</h4>' + Locale.Deliveryslip.Tooltips.SECURITY_OPTIONS.CONTENT.RECALL_ENABLE,
                confidential : '<h4><i class="icon-info"></i>' + Locale.Deliveryslip.Tooltips.SECURITY_OPTIONS.TITLE.CONFIDENTIAL + '</h4>' + Locale.Deliveryslip.Tooltips.SECURITY_OPTIONS.CONTENT.CONFIDENTIAL,
                fyeo : '<h4><i class="icon-warning"></i>' + Locale.Deliveryslip.Tooltips.SECURITY_OPTIONS.TITLE.FYEO + '</h4>' + Locale.Deliveryslip.Tooltips.SECURITY_OPTIONS.CONTENT.FYEO
            },
            tracking : {
                reviewed : Locale.Deliveryslip.Tooltips.TRACKING.REVIEWED,
                retrieved : Locale.Deliveryslip.Tooltips.TRACKING.RETRIEVED,
                replied : Locale.Deliveryslip.Tooltips.TRACKING.REPLIED,
                forward : Locale.Deliveryslip.Tooltips.TRACKING.FORWARD,
                printed : Locale.Deliveryslip.Tooltips.TRACKING.PRINTED,
                deleted : Locale.Deliveryslip.Tooltips.TRACKING.DELETED
            }
        };
        var toolTipsterOptions = {
            theme : 'tooltipster-email2',
            contentAsHTML : true,
            position : 'left',
            maxWidth : 260
        };
        var feature_metas = {
            'deliverySlip' : {
                name : 'Reviewed',
                caption : tooltips.tracking.reviewed.CONTENT,
                icon : 'icon-envelope-closed'
            },
            'message' : {
                name : 'Retrieved',
                caption : tooltips.tracking.retrieved.CONTENT,
                icon : 'icon-envelope-open'
            },
            'reply' : {
                name : 'Replied',
                caption : tooltips.tracking.replied.CONTENT,
                icon : 'icon-reply'
            },
            'forward' : {
                name : 'Forward',
                caption : tooltips.tracking.forward.CONTENT,
                icon : 'icon-forward'
            },
            'print' : {
                name : 'Printed',
                caption : tooltips.tracking.printed.CONTENT,
                icon : 'icon-print'
            },
            'delete' : {
                name : 'Deleted',
                caption : tooltips.tracking.deleted.CONTENT,
                icon : 'icon-trash'
            }
        }, feature_meta;
        var options = toolTipsterOptions;

        //View.Deliveryslip.Module.resetParticipants(e2Response.data.trackingMember);

        for (var repIndex in e2Response.data.trackingMember) {
            var tM = e2Response.data.trackingMember[repIndex];
            var name = tM.firstName + " " + tM.lastName;
            for (var k in tM.trackingItems) {
                var uniqueEmail = tM.email.replace(/@/g, "").replace(/\./g, "");
                $('.recipients-row.user-' + uniqueEmail + ' .ds-statusbox-' + tM.trackingItems[k].type, target).addClass('active');

                feature_meta = feature_metas[tM.trackingItems[k].type];
                console.log(tM.trackingItems[k]);
                console.log(feature_meta);
                var tooltip = '';
                var caption = feature_meta.caption;
                var index = caption.indexOf('(');
                if (index > 0) {
                    caption = caption.substr(0, index);
                }

                tooltip += '<h4><i class="' + feature_meta.icon + ' tooltip-icon"></i>' + caption + '</h4>';
                tooltip += Locale.Deliveryslip.USER + ': ' + name + "<br>";
                tooltip += Locale.Deliveryslip.DATE + ': ' + moment(tM.trackingItems[k].retrievedDate.replace('new ', '').replace(' ', '')).format('MMM DD YYYY, h:mmA') + "<br>";
                options.content = $(tooltip);
                //$('.recipients-row.user-' + uniqueEmail + ' .ds-statusbox-' + tM.trackingItems[k].type, target).tooltipster(options);

                if (tM.trackingItems[k].type == "message") {
                    $('.ds-msgtracking-status.message .ds-msgtracking-participants.user-' + uniqueEmail, target).removeClass('disabled');
                    $('.ds-msgtracking-status.message .ds-msgtracking-participants.user-' + uniqueEmail + ' .retrievedDate', target).html(moment(tM.trackingItems[k].retrievedDate.replace('new ', '').replace(' ', '')).format('MMM DD YYYY, h:mmA'));
                } else if (tM.trackingItems[k].type == "reply") {
                    $('.ds-msgtracking-status.reply .ds-msgtracking-participants.user-' + uniqueEmail, target).removeClass('disabled');
                    $('.ds-msgtracking-status.reply .ds-msgtracking-participants.user-' + uniqueEmail + ' .retrievedDate', target).html(moment(tM.trackingItems[k].retrievedDate.replace('new ', '').replace(' ', '')).format('MMM DD YYYY, h:mmA'));
                } else if (tM.trackingItems[k].type == "forward") {
                    $('.ds-msgtracking-status.forward .ds-msgtracking-participants.user-' + uniqueEmail, target).removeClass('disabled');
                    $('.ds-msgtracking-status.forward .ds-msgtracking-participants.user-' + uniqueEmail + ' .retrievedDate', target).html(moment(tM.trackingItems[k].retrievedDate.replace('new ', '').replace(' ', '')).format('MMM DD YYYY, h:mmA'));
                }

            }
        }

        var maxRep = $('.ds-msgtracking-status.message .ds-msgtracking-participants', target).size();
        var numMsg = maxRep - $('.ds-msgtracking-status.message .ds-msgtracking-participants.disabled', target).size();
        var numRply = maxRep - $('.ds-msgtracking-status.reply .ds-msgtracking-participants.disabled', target).size();
        var numFrd = maxRep - $('.ds-msgtracking-status.forward .ds-msgtracking-participants.disabled', target).size();

        $('.ds-msgtracking-status.message .ds-msgtracking-bar > div', target).css('width', (numMsg / maxRep * 100) + '%');
        $('.ds-msgtracking-status.reply .ds-msgtracking-bar > div', target).css('width', (numRply / maxRep * 100) + '%');
        $('.ds-msgtracking-status.forward .ds-msgtracking-bar > div', target).css('width', (numFrd / maxRep * 100) + '%');

        $('.ds-msgtracking-status.message .ds-msgtracking-pct', target).html(Math.floor((numMsg / maxRep) * 100) + '%');
        $('.ds-msgtracking-status.reply .ds-msgtracking-pct', target).html(Math.floor((numRply / maxRep) * 100) + '%');
        $('.ds-msgtracking-status.forward .ds-msgtracking-pct', target).html(Math.floor((numFrd / maxRep) * 100) + '%');

        $('.ds-msgtracking-header.message .count', target).html(numMsg + '/' + maxRep);
        $('.ds-msgtracking-header.reply .count', target).html(numRply + '/' + maxRep);
        $('.ds-msgtracking-header.forward .count', target).html(numFrd + '/' + maxRep);

        $('.ds-msgtracking-header', target).show();
        $('.ds-msgtracking-status', target).show();

    }
};

View.Message = {

    attachments: {},

    checkMessage : function() {
        View.Login.auth = false;
        var msgs = $('.SEM-content');
        var target, mg, pencode, menu;
        for(var i = 0; i < msgs.length; i++) {
            target = $(msgs[i]);
            mg = target.attr('mg');
            pencode = target.attr('pencode');
            menu = $('.SEM-content').prev();

            if(menu.is('.' + View.menuCls)){
                View.Message.getMessage(target, mg, pencode, menu);
            }
        }
    },

    initialMessage : function(target) {
        var module;
        module = Module.loadMessages();
        target.append(module);
        module.find('.msg-body').hide();
        module.find('.msg-recalled').hide();
        module.find('.msg-fyeo').hide();
        return module;
    },

    getReplyMessage : function(target, mg, pencode) {
        target.empty();
        var preference = View.preference;

        if (preference.penCode == pencode) {

            var messageXHR = ServiceMessage.getMessage({
                messageGuid: mg,
                password: ''
            }, function(e2Response) {
                // console.log('got secure message');
                // console.log(e2Response);
                // console.log(target);
                var html = "<br/><br/><hr/><br/>";

                var body = e2Response.body;
                if (e2Response.data.format == 'mfText') {
                    body = body.replace(/(\r\n|\n|\r)/gm, '<br/>');
                }
                var firstName = (e2Response.sender.firstName) ? e2Response.sender.firstName : '';
                var lastName = (e2Response.sender.lastName) ? e2Response.sender.lastName : '';
                var toStr = '';
                var rep, ccStr = '';
                for(rep in e2Response.to) {
                    toStr += e2Response.to[rep].email + ', ';

                }
                for(rep in e2Response.cc) {
                    ccStr += e2Response.cc[rep].email + ', ';
                }
                toStr = toStr.trim().slice(0, -1);
                ccStr = ccStr.trim().slice(0, -1);

                html += '<strong>' + Locale.Compose.FROM + ':</strong> ' + e2Response.sender.email;
                html += '<br/><strong>' + Locale.Compose.SENT + ':</strong> ' + moment(new Date(e2Response.date)).format('MMM DD YYYY, h:mmA');
                html += '<br/><strong>' + Locale.Compose.TO + ':</strong> ' + toStr;
                html += '<br/><strong>' + Locale.Compose.CC + ':</strong> ' + ccStr;
                html += '<br/><strong>Subject:</strong> ' + e2Response.subject;
                html += '<br/><br/>' + body;
                target.html(html);
                var table = target.parents('table');
                if (table.length >= 3) {
                    var container = $(table[2]);
                    var emailholder = false;
                    var inputholder = false;
                    container.find('span[email]').each(function() {
                        // console.log('email');
                        if ($(this).attr('email') == $(this).html()) {
                            if (!emailholder) {
                                emailholder = $(this);
                            } else {
                                $(this).remove();
                            }
                        } else {
                            inputholder = $(this).parent();
                        }

                    });
                    if (emailholder) {
                        // console.log('got emailholder');
                        var cmp, email, cmp2;
                        // for (rep in e2Response.data.recipients) {
                        email = e2Response.sender.email;
                        cmp = $('<span>').attr('email', email).html(email);
                        cmp.insertAfter(emailholder);
                        // }
                        emailholder.remove();
                    }

                    if (inputholder) {
                        // console.log('got inputholder');
                        var email, cmp2;
                        // for (rep in e2Response.data.recipients) {
                        cmp2 = inputholder.clone();
                        $(cmp2.find('span[email]').children()[0]).html(email);
                        cmp2.find('span[email]').attr('email', email);
                        cmp2.find('input').attr('value', email);
                        cmp2.find('input').attr('name', firstName + " " + lastName);
                        cmp2.insertAfter(inputholder);
                        // }
                        inputholder.remove();
                    }
                }

            });
        }
    },

    getMessage : function(target, mg, pencode, menu, e) {
        console.log('ViewMessage.getMessage')
        var scb = function() {
            var pref = View.preference;
            menu.find('.sm-menu-tools').find('.sm-login-btn').hide();
            if(pref['penCode'] == pencode && !View.inlineEnable()) {
                menu.find('.sm-menu-tools').find('.sm-secure-btn').show();
            }

            View.Message.getMessageComplete(target, mg, pencode, menu);
        };
        var fcb = function() {
            target.empty();
            target.css('min-height', 0);
            menu.find('.sm-menu-tools').find('.c-logbtn').remove();
            var login = $('<div class="sm-btn sm-login-btn c-logbtn"><a class="view-inline icon-enter text-show" title="Login to view inline" email=""' + e + '">Login</a></div>');
            menu.find('.sm-menu-tools').prepend(login);
            login.find('.view-inline').off('click').on('click', function() {
                View.Login.inlineLogin(scb, e);
            });

        };

        if (!View.Login.auth) {
            View.Login.authenticate(scb, fcb);
        } else {
            scb();
        }
    },

    applyMessage : function(e2Response, messageModule, deliveryModule, menu, pencode) {
        var body = "", errorcode = false;
        if (e2Response && !e2Response.responseStatus) {
            body = e2Response.body;
            if(menu) {
                View.Status.enableAll(menu);
            }

            messageModule.find('.msg-body').show();
        } else {
            errorcode = e2Response.responseStatus.errCode || e2Response.responseStatus.errorCode;
            errorcode = parseInt(errorcode);
            if(menu) {
                View.Status.disableAll(menu);
            }
            if (errorcode == 36 || (errorcode == 38 && e2Response.messageOptions.fyeoType == "AccountPassword")) {
                View.Status.markFYEO(menu);
                messageModule.find('.msg-fyeo strong').text(Locale.Message.SECURE_ACCOUNT_PASSWORD);
                messageModule.find('.msg-fyeo h2').text(Locale.Message.MESSAGE_CONFIDENTIAL_CONTENT);
            } else if (errorcode == 37 || (errorcode == 38 && e2Response.messageOptions.fyeoType == "UniquePassword")) {
                View.Status.markFYEO(menu);
                messageModule.find('.msg-fyeo strong').text(Locale.Message.UNIQUE_PASSWORD);
                messageModule.find('.msg-fyeo h2').text(Locale.Message.MESSAGE_FYEO_CONTENT);
            } else if (errorcode == 1120915 || errorcode == 915) {
                if (e2Response.recallReason) {
                    messageModule.find('.msg-recalled-reasontitle').show();
                    messageModule.find('.msg-recalled-content').text(e2Response.recallReason).show();
                }
                messageModule.find('.msg-recalled').show();
            } else {
                body = e2Response.responseStatus.message;
                messageModule.find('.msg-body').show();
            }
        }
        messageModule.find('.msg-loading').hide();
        messageModule.find('.msg-body').html(body);


        if (e2Response && e2Response.responseStatus && (errorcode == 36 || errorcode == 37 || errorcode == 38)) {
            messageModule.find('.msg-fyeo').show();
            messageModule.find('.msg-fyeo .btn-fyeo-unlock').off().on('click', function() {
                var fyeoPassword = messageModule.find('#fyeo-pass').val();
                View.Message.showMessagePassword(messageModule, deliveryModule, e2Response.guid, fyeoPassword, menu, pencode);
            });

            messageModule.find('.msg-fyeo .fyeo-error').hide();
        }

        if(e2Response && !e2Response.responseStatus) {
            View.Message.insertAttachment(messageModule, e2Response.attachments, e2Response.guid, pencode);
        }

    },

    showMessagePassword : function(msgModule, dsModule, guid, password, menu, pencode) {
        var messageXHR = ServiceMessage.getMessage({
            messageGuid: guid,
            password: password
        }, function(e2Response) {
            // console.log('got secure message password');
            var body = "", errorcode = false;
            if (e2Response && !e2Response.responseStatus) {
                body = e2Response.body;
                msgModule.find('.msg-fyeo').hide();
                if(menu) {
                    View.Status.enableAll(menu);
                }
                View.Message.insertAttachment(msgModule, e2Response.attachments, e2Response.guid, pencode);
            } else {
                if(menu) {
                    View.Status.disableAll(menu);
                }
                msgModule.find('.msg-fyeo .fyeo-error').show();
                errorcode = e2Response.responseStatus.errCode || e2Response.responseStatus.errorCode;
                if (errorcode == 36 || (errorcode == 38 && e2Response.messageOptions.fyeoType == "AccountPassword")) {
                    msgModule.find('.msg-fyeo strong').text(Locale.Message.SECURE_ACCOUNT_PASSWORD);
                    msgModule.find('.msg-fyeo h2').text(Locale.Message.MESSAGE_CONFIDENTIAL_CONTENT);
                } else if (errorcode == 37 || (errorcode == 38 && e2Response.messageOptions.fyeoType == "UniquePassword")) {
                    msgModule.find('.msg-fyeo strong').text(Locale.Message.UNIQUE_PASSWORD);
                    msgModule.find('.msg-fyeo h2').text(Locale.Message.MESSAGE_FYEO_CONTENT);
                }

                if (e2Response && e2Response.responseStatus && (errorcode == 36 || errorcode == 37 || errorcode == 38)) {
                    msgModule.find('.msg-fyeo').show();
                    msgModule.find('.msg-fyeo .btn-fyeo-unlock').off().on('click', function() {
                        var fyeoPassword = msgModule.find('#fyeo-pass').val();
                        View.Message.showMessagePassword(msgModule, dsModule, e2Response.guid, fyeoPassword, menu, pencode);
                    });

                    msgModule.find('.msg-fyeo .fyeo-error').show();
                }
            }
            msgModule.find('.msg-body').show();
            msgModule.find('.msg-loading').hide();
            msgModule.find('.msg-body').html(body);

            if (e2Response && !e2Response.responseStatus) {
                //View.Deliveryslip.getMessageTracking(guid, password, dsModule);
            }
        });
    },

    insertAttachment : function(msgModule, attachments, msgGuid, pencode) {
        var attModule = msgModule.find('.msg-attachments'),
            attachment, adiv, content, iconbox, tbox, sbox, ext, name, dropdownbutton;
        var dropdownbox, downloadbtn, previewbtn;
        if(attachments && attachments.length > 0) {
            for(var i = 0; i < attachments.length; i++) {
                attachment = attachments[i];
                View.Message.attachments[attachment.guid] = attachment;
                View.Message.attachments[attachment.guid].msgGuid = msgGuid;
                View.Message.attachments[attachment.guid].penCode = pencode;

                name = attachment.fileName;
                ext = name.match('.') ? name.split('.').pop() : 'unknown';

                adiv = $('<div>').addClass('ce-attachment').addClass('icon-file-text');
                content = $('<div>').addClass('content');
                iconbox = $('<div>').addClass('iconbox').addClass(View.Message.addIconClass(ext));
                dropdownbutton = $('<div>').addClass('dropdown-button').addClass('icon-down');

                dropdownbox = $('<div>').addClass('dropdown-menu');
                downloadbtn = $('<div>').addClass('download').addClass('menu').html(Locale.Deliveryslip.DOWNLOAD);
                previewbtn = $('<div>').addClass('preview').addClass('menu').html(Locale.Deliveryslip.PREVIEW);
                dropdownbox.append(downloadbtn).append(previewbtn);

                if(!attachment.canPreview) {
                    previewbtn.hide();
                }

                console.log(attachment);
                if(attachment.type.toLowerCase() == "esignature") {
                    iconbox.addClass('esignature');
                }

                tbox = $('<div>').addClass('box');
                sbox = $('<div>').addClass('box');

                tbox.html(name);
                sbox.html(convertBytes(attachment.fileSize, true));
                content.append(tbox).append(sbox);

                adiv.append(iconbox).append(content).append(dropdownbutton).append(dropdownbox);
                adiv.attr('guid', attachment.guid);

                content.on('click', View.Message.onClickAttachment);
                iconbox.on('click', View.Message.onClickAttachment);
                dropdownbutton.on('click', View.Message.onClickAttachment);
                attModule.append(adiv);

            }
        }
    },

    onClickDropDownMenu : function(e) {
        console.log(e);
        console.log(e.target);
        e.preventDefault();
        var $el = $(e.target);
        var $wrapper = $el.parents('.ce-attachment');
        var guid = $wrapper.attr('guid');
        var attachment = View.Message.attachments[guid];
        if($el.hasClass('menu')) {
            if($el.hasClass('download')) {
                View.Message.downloadAttachment(attachment);
            } else if ($el.hasClass('preview')) {
                View.Message.previewAttachment(attachment);
            }
        }
        $('.dropdown-menu').hide()
    },

    onClickAttachment: function(e) {
        e.preventDefault();
        var $el = $(e.target);
        var $wrapper = $el.parents('.ce-attachment');
        var guid = $wrapper.attr('guid');
        var attachment = View.Message.attachments[guid];
        if($el.hasClass('dropdown-button')) {
            $wrapper.find('.dropdown-menu').show();
            setTimeout(function(){
                $('.SEM-content').one('click', View.Message.onClickDropDownMenu);
            }, 500);

        } else {
            View.Message.clickAttachment(attachment);
        }
    },

    clickAttachment: function(attachment) {
        /*
         ServiceAttachment.downloadAttachment(guid, attachment.fileName, true, function() {
         if (res && res.responseStatus && res.responseStatus.errorCode) {
         App.alert(res.responseStatus.message);
         }
         });
         */
        console.log(attachment);

        if (attachment.type.toLowerCase() == "esignature") {
            View.Message.previewAttachment(attachment);
        } else {
            View.Message.downloadAttachment(attachment);
        }
    },

    downloadAttachment: function(attachment) {
        var path = MessagingAPI.vpsUrl + "/services/downloads/attachments.aspx?t=" + E2Service.token + "&at=" + convertGuid(attachment.guid) + "&F=Y";
        //var path = ServiceMessage.mapAttachmentUrl(guid);
        window.open(path, '_blank');
        console.log(path);
    },

    previewAttachment : function(attachment) {
        Application.setMessage(attachment.msgGuid, attachment.Pencode);
        Application.setPreview(attachment.guid);
        View.showWindow();
    },

    addIconClass : function(ext){
        var postfix;
        postfix = 'unknown';
        if (ext.match(/txt|text/ig)) {
          postfix = 'txt';
        } else if (ext.match(/doc|docx|rtf/ig)) {
          postfix = 'doc';
        } else if (ext.match(/xls/ig)) {
          postfix = 'excel';
        } else if (ext.match(/ppt|pps/ig)) {
          postfix = 'ppt';
        } else if (ext.match(/pdf/ig)) {
          postfix = 'pdf';
        } else if (ext.match(/gif|png|jpg|tiff|bmp/ig)) {
          postfix = 'image';
        } else if (ext.match(/zip|7zip/ig)) {
          postfix = 'zip';
        } else if (ext.match(/rar/ig)) {
          postfix = 'rar';
        }
        return "file-icon-" + postfix;
    },

    getMessageComplete : function(target, mg, pencode, menu) {
        target.empty();
        var preference = View.preference;


        if (preference.penCode == pencode) {

            var messageModule = View.Message.initialMessage(target);

            // console.log(target);
            // console.dir(messageModule);
            var messageXHR = ServiceMessage.getMessage({
                messageGuid: mg,
                password: ''
            }, function (e2Response) {
                View.Status.setup(target, menu, mg, pencode);

                // console.log('got secure message');
                // console.log(e2Response);
                // console.log(target);
                // console.dir(messageModule);

                //var deliveryModule = View.Deliveryslip.initialize(target);
                //View.Deliveryslip.hideTab(deliveryModule);
                //View.Status.linkDeliveryslip(menu, deliveryModule);

                //View.Message.applyMessage(e2Response, messageModule, deliveryModule);
                View.Message.applyMessage(e2Response, messageModule, false, menu, pencode);
                if (e2Response && !e2Response.responseStatus) {
                    View.Status.readOptions(menu, e2Response.messageOptions);
                    //View.Deliveryslip.setInformation(e2Response, deliveryModule);
                    //View.Deliveryslip.getMessageTracking(mg, '', deliveryModule);
                } else {
                    if(e2Response && e2Response.responseStatus) {
                        switch(e2Response.responseStatus.errorCode) {
                            case "811":
                                View.Login.authenticate(View.Message.checkMessage);
                                break;
                        }
                    }
                }
            });
        } else {
            View.Login.portalDifference();
        }
    }
};

function convertBytes(bytes, si){
    var unit = si ? 1024 : 1024;
    bytes = parseInt(bytes);
    if (bytes < unit) return bytes + " B";
    var exp = Math.floor(Math.log(bytes) / Math.log(unit))
    var pre = (si ? "KMGTPE" : "KMGTPE").charAt(exp-1) + (si ? "" : "i");
    return (bytes / Math.pow(unit, exp)).toFixed(2)+' '+pre+'B';
};


function convertGuid(msgGuid) {
    // check if it is a valid guid with dashes
    if(msgGuid.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
        return msgGuid;
    }
    // add dashes for guid
    return msgGuid.slice(0, 8) + '-' + msgGuid.slice(8, 12) + '-' + msgGuid.slice(12, 16) + '-' +
        msgGuid.slice(16, 20) + '-' + msgGuid.slice(20, 32);
};


View.Status = {
    setup : function(target, menu, mg, pencode) {

        var preference = View.preference;
        var module = Module.loadStatus();
        menu.find('.sm-menu-header').remove();
        menu.find('.view-inline').parent().remove();

        menu.find('.sm-menu-tools').find('.c-fdbtn').remove();
        menu.find('.sm-menu-tools').find('.c-rpbtn').remove();
        menu.find('.sm-menu-tools').find('.c-rabtn').remove();
        //menu.find('.sm-menu-tools').prepend($('<div class="sm-btn"><a class="view-ds" title="View Deliveryslip"><span>View Deliveryslip</span></a></div>'));
        //menu.find('.sm-menu-tools').prepend($('<div class="sm-btn"><a class="view-ds" title="View Deliveryslip"><span>View Deliveryslip</span></a></div>'));
        var forwardbtn = $('<div class="sm-btn c-fdbtn"><a class="view-forward icon-forward text-show" action="forward" mg="'+mg+'" pencode="'+pencode+'" fyeo=false freeze=false>Forward</a></div>');
        var replyallbtn = $('<div class="sm-btn c-rpbtn"><a class="view-replyall icon-reply-all text-show" action="replyall" mg="'+mg+'" pencode="'+pencode+'" fyeo=false freeze=false>Reply All</a></div>');
        var replybtn = $('<div class="sm-btn c-rabtn"><a class="view-reply icon-reply text-show" action="reply" mg="'+mg+'" pencode="'+pencode+'" fyeo=false freeze=false>Reply</a></div>');

        forwardbtn.bind('click', View.Status.composeMessageLink);
        replyallbtn.bind('click', View.Status.composeMessageLink);
        replybtn.bind('click', View.Status.composeMessageLink);

        menu.find('.sm-menu-tools').prepend(forwardbtn);
        menu.find('.sm-menu-tools').prepend(replyallbtn);
        menu.find('.sm-menu-tools').prepend(replybtn);
        //$('.view-lock').removeClass('text-show');

        if(!menu.prev().is('a')) {
            menu.prev().hide()
        }




        /*
        menu.prepend($('<div class="account-title">' + preference.penName + '</div>'));
        menu.prepend($('<div class="account-icon"><img src="' + preference.penImage + '"/></div>'));
        */
        //target.prepend(module);
        /*
        module.find('.account-email').text(preference.emailAddress);
        module.find('.account-icon img').attr('src', preference.penImage);
        module.find('.account-btn.removeauth-btn').off('click').on('click', function() {
            View.Login.removeAuthenticate();
        });
        module.find('.account-btn.logout-btn').off('click').on('click', function() {
            View.Login.logout();
        });
        return module;
        */
    },

    readOptions : function(menu, messageOption) {
        if(!messageOption.allowForward) {
            menu.find('.sm-menu-tools').find('.c-fdbtn').addClass('disabled').find('a').attr('freeze', true);
        }
        if(!messageOption.allowReply) {
            menu.find('.sm-menu-tools').find('.c-rpbtn').addClass('disabled').find('a').attr('freeze', true);
            menu.find('.sm-menu-tools').find('.c-rabtn').addClass('disabled').find('a').attr('freeze', true);
        }

        var data = Service.getData(Service.SETTINGS);

        if(!data.forwardMessage || !data.forwardMessage.enabled) {
            menu.find('.sm-menu-tools').find('.c-fdbtn').addClass('disabled').find('a').attr('freeze', true);
        }
        if(!data.replyAllMessage || !data.replyAllMessage.enabled) {
            menu.find('.sm-menu-tools').find('.c-rabtn').addClass('disabled').find('a').attr('freeze', true);
        }
        if(!data.replyMessage || !data.replyMessage.enabled) {
            menu.find('.sm-menu-tools').find('.c-rpbtn').addClass('disabled').find('a').attr('freeze', true);
        }
    },

    enableAll : function(menu) {
        menu.find('.sm-menu-tools').find('.c-fdbtn').show();
        menu.find('.sm-menu-tools').find('.c-rpbtn').show();
        menu.find('.sm-menu-tools').find('.c-rabtn').show();
    },

    disableAll : function(menu) {
        menu.find('.sm-menu-tools').find('.c-fdbtn').hide();
        menu.find('.sm-menu-tools').find('.c-rpbtn').hide();
        menu.find('.sm-menu-tools').find('.c-rabtn').hide();
    },

    markFYEO : function(menu) {
        menu.find('.sm-menu-tools').find('.c-fdbtn a').attr('fyeo', true);
        menu.find('.sm-menu-tools').find('.c-rpbtn a').attr('fyeo', true);
        menu.find('.sm-menu-tools').find('.c-rabtn a').attr('fyeo', true);
    },

    composeMessageLink : function(event) {
        var mg = event.target.attributes.getNamedItem('mg').value;
        var action = event.target.attributes.getNamedItem('action').value;
        var pencode = event.target.attributes.getNamedItem('pencode').value;
        var fyeo = event.target.attributes.getNamedItem('fyeo').value;
        var freeze = event.target.attributes.getNamedItem('freeze').value;
        if(!freeze || freeze == "false") {
            //console.log(event);
            //console.log(action + " " + mg);
            //console.log(pencode);
            Application.setAction(action);
            Application.setMessage(mg, pencode);
            Application.setFyeo(fyeo)
            View.showWindow();
        }
        //Application.log(mg);
        //Application.setMessage(mg, pencode);
        //View.showWindow();
    },
    checkService : function(target, menu, code) {
        //$('.view-lock').removeCls('view-lock').addCls('view-webmail');
        /*
        ServiceAPI.publicGetServiceSingle(code, function(response){
            if(response && !response.responseStatus) {
                //console.log("SERVICE!!!");
                //console.log(response);
                ServiceService.getServicePublicSettings(function(res2){
                    if(res2 && !res2.responseStatus) {
                        View.Status.webUrl = res2.webmailLink;
                        //console.log("SERVICE!!!!!!!!");
                        //console.log(res2);
                    } else {
                        View.Status.webUrl = false;
                    }
                });

                menu.prepend($('<div class="account-title">' + response.serviceName + '</div>'));
                var image = false;
                if(response.branding) {
                    if(response.branding.Square64x) {
                        image = response.branding.Square64x;
                    } else if(response.branding.Square64x) {
                        image = response.branding.Square48x;
                    } else if(response.branding.Square24x) {
                        image = response.branding.Square24x;
                    }
                    if(image) {
                        menu.prepend($('<div class="account-icon"><img src="' + image + '"/></div>'));
                    }
                }

            }
        });
        */
    },

    linkDeliveryslip: function(menu, dsModule) {
        /*
        menu.find('.view-ds').on('click', function(){
           View.Deliveryslip.toggleDeliveryslip(dsModule);
        });
        */
    }
};

function convertBytes(bytes, si) {
    var unit = si ? 1024 : 1024;
    bytes = parseInt(bytes);
    if (bytes < unit)
        return bytes + " B";
    var exp = Math.floor(Math.log(bytes) / Math.log(unit))
    var pre = (si ? "KMGTPE" : "KMGTPE").charAt(exp - 1) + (si ? "" : "i");
    return (bytes / Math.pow(unit, exp)).toFixed(2) + ' ' + pre + 'B';
}

Email2Chrome = {};

$(document).ready(function() {
    (function($){
        $.event.special.destroyed = {
          remove: function(o) {
            if (o.handler) {
              o.handler()
            }
          }
        }
    })(jQuery)

    var checkview = 0;
    var checkzimbraview = 0;
    var office365WaitTimeout = false;
    function createPasswordField(cb) {
        var win = $('<div></div>').attr('id', 'password-request-holder');
        var content = $('<div></div>').attr('id', 'password-request-form');
        var text = $('<div></div>').html('Unique password');
        var password = $('<input>').attr('type', 'password');
        var text2 = $('<div></div>').html('Repeat password');
        var password2 = $('<input>').attr('type', 'password');
        var error = $('<div>').addClass('error-msg');
        var button = $('<button>').text('confirm').on('click', function() {
            var pwd = password.val();
            var pwd2 = password2.val();
            if (pwd != pwd2) {
                error.text('not match');
            } else if (pwd.length == 0) {
                error.text('please input values');
            } else {
                if (typeof cb == "function") {
                    cb(pwd);
                }
                win.remove();
            }
        });
        var button2 = $('<button>').text('cancel').on('click', function() {
            if (typeof cb == "function") {
                cb(false);
            }
            win.remove();
        });
        content.append(text).append(password).append(text2).append(password2).append(button).append(button2).append(error);
        win.append(content);
        $('body').append(win);
    }

    var QueryEmail = function(url) {
        return decodeURIComponent(QueryString(url).email);
    };

    var QueryString = function(url) {
        // This function is anonymous, is executed immediately and
        // the return value is assigned to QueryString!
        var query_string = {};
        var query = url.split('?')[1];
        var vars = query.split("&");
        for(var i = 0; i < vars.length; i++) {
            var pair = vars[i].split("=");
            // If first entry with this name
            if (typeof query_string[pair[0]] === "undefined") {
                query_string[pair[0]] = pair[1];
                // If second entry with this name
            } else if (typeof query_string[pair[0]] === "string") {
                var arr = [query_string[pair[0]], pair[1]];
                query_string[pair[0]] = arr;
                // If third or later entry with this name
            } else {
                query_string[pair[0]].push(pair[1]);
            }
        }
        return query_string;
    };

    function addDocumentScript() {
        var s = document.createElement('script');
        s.src = Application.getURL('js/injection.js');
        (document.head || document.documentElement).appendChild(s);
        s.onload = function() {
            s.parentNode.removeChild(s);
        };

    }
    ;

    function createWindow() {
        var win = $('<div></div>').attr('id', 'content-script').css('display', 'none');
        var content = $('<div>').attr('id', 'content-main');
        var iframe = $('<iframe></iframe>').attr('id', 'portal-section').width(0).height(0);
        var page = $('<div></div>').addClass('page').attr('id', 'page-login').append('<div class="E2Module" template="Login/login"></div>');
        var loading = $('<div></div>').addClass('page').attr('id', 'page-loading').append('<div class="E2Module" template="Loading/loading"></div>');
        content.append(iframe).append(page).append(loading);
        win.append(content);
        $('body').append(win);

        win.on('click', function() {
            View.hideWindow();
        });
    }

    function AppInit() {
        Application.initialize();
    }

    function syncAccount() {
        View.Login.authenticate();
        // if (POC) {
        setTimeout(function() {
            syncAccount();
        }, 1000 * 60 * 30);
        // }
    }

    function startAsync() {

        if (typeof View.preference['inline-setting-gmail'] == "undefined") {
            View.preference['inline-setting-gmail'] = true;
        }
        if (typeof View.preference['inline-setting-office'] == "undefined") {
            View.preference['inline-setting-office'] = true;
        }
        if (typeof View.preference['inline-setting-zimbra'] == "undefined") {
            View.preference['inline-setting-zimbra'] = true;
        }

        if (View.type) {
            View.findAllLinks();

            if (View.type == "google" && View.preference['inline-setting-gmail']) {
                if ($('.ajT:visible').length > 0) {
                    // $('.ajT').click();
                }
                //View.findAllLinks();
            }

            if ((View.type == "google" && View.preference['inline-setting-gmail']) || (View.type == "o365" && View.preference['inline-setting-office']) || (View.type == "zimbra" && View.preference['inline-setting-zimbra'])) {
                View.updateLogin();
            }
        }
        setTimeout(function() {
            startAsync();
        }, 2000);
    }

    function startAsyncSendSecure() {

        if (typeof View.preference['inline-setting-gmail'] == "undefined") {
            View.preference['inline-setting-gmail'] = true;
        }
        if (typeof View.preference['inline-setting-office'] == "undefined") {
            View.preference['inline-setting-office'] = true;
        }
        if (typeof View.preference['inline-setting-zimbra'] == "undefined") {
            View.preference['inline-setting-zimbra'] = true;
        }

        if (View.type) {
            if (View.type == "google" && View.preference['inline-setting-gmail']) {
                onGoogleComposeClick();
            } else if (View.type == "o365" && View.preference['inline-setting-office']) {
                //onO365ComposeClick();
            }
        }
        setTimeout(function() {
            startAsyncSendSecure();
        }, 2000);
    }

    function createCompose() {
        if (!createComposeO365() && !createComposeGoogle() && View.type != 'zimbra') {
            createComposeWait();
        } else {
            loadSweetAlert();
        }
    }

    function createComposeO365() {
        //console.log('createComposeO365');
        var text = $('span:contains("New")').filter(function() {
            return ((($(this).text() === "New") || ($(this).text() === "New mail")) && !$(this).parent().attr('chrome') && $(this).parent().is('button') && $(this).siblings('.ms-Icon--plus').length) ? true : false;
        });

        if (text.length == 0) {
            return false;
        }
        console.log(text);
        text = $(text[0]);
        View.type = "o365";

        if (!View.preference['inline-setting-office']) {
            return false;
        }
        //console.log(text);

        var compose = text.parent();
        if (compose.length == 0) {
            return false;
        }
        var sendsecure = compose.clone();

        sendsecure.css({
            'padding-top' : '0px'
        }).find('span:contains("New")').html('New Secure');
        sendsecure.on('click', function() {
            Application.setAction('compose');
            View.showWindow();
        });
        compose.after(sendsecure);
        //console.log(sendsecure);
        //console.log(sendsecure.children());

        var height = sendsecure.height();
        //console.log(height);
        sendsecure.css({
            'height' : height + 'px',
            'overflow' : 'hidden'
        });

        sendsecure.on('destroyed', function(){
            console.log('!!!');
        });

        compose.attr('chrome', true);
        office365Wait();
        return true;

    }

    function generalSaveSend(options, cb) {
        var msgGuid;
        //console.log(options);
        var penPass = "disabled";
        if (options.options.fyeo) {
            var penPass = "uniquePass";
        } else if (options.options.confidential) {
            var penPass = "penPass";
        }
        options.options.fyeoType = penPass;
        delete options.options.fyeo;
        delete options.options.confidential;
        ServiceMessage.preCreateMessage('new', options.parentMsgGuid, '', function(e2ComposeResponse) {
            console.log(e2ComposeResponse);
            if (e2ComposeResponse && !e2ComposeResponse.responseStatus) {
                msgGuid = e2ComposeResponse.messageGuid;

                ServiceMessage.saveMessage(msgGuid, options.subject, options.recipients, options.body, 'HTML', options.options, function(e2SaveResponse) {
                    console.log(e2SaveResponse);
                    if (e2SaveResponse && !e2SaveResponse.responseStatus) {
                        ServiceMessage.sendMessage(msgGuid, options.msgPass, false, true, false, function(e2SendResponse) {
                            console.log(e2SendResponse);
                            cb(e2SendResponse);
                        });
                    } else if (e2SaveResponse.responseStatus) {
                        console.log(e2SaveResponse.responseStatus);
                        switch(e2SaveResponse.responseStatus.errorCode) {
                            default:
                                cb(e2SaveResponse);
                                break;
                        }
                    }
                });
            } else if (e2ComposeResponse.responseStatus) {
                console.log(e2ComposeResponse.responseStatus);
                switch(e2ComposeResponse.responseStatus.errorCode) {
                    case "801":
                        View.Login.inlineLogin(function() {
                            generalSaveSend(options, cb);
                        });
                        break;
                    default:
                        cb(e2ComposeResponse);
                        break;
                }
            }
        });

        // E2Compose.saveMessage();
    }

    function onGoogleSecureReply(container) {
        var i, j;
        //console.log('onGoogleSecureReply =====');
        //console.log(container);
        var subjectField = container.find('input[name="subject"]');
        var subject = '';
        if (subjectField.length > 0) {
            subject = subjectField[0].value;
        }
        //console.log(subject);
        var form = container.find('form');
        var tofield = form.find('input[name="to"]');
        var ccfield = form.find('input[name="cc"]');
        var bccfield = form.find('input[name="bcc"]');
        var to = [], cc = [], bcc = [];
        var v;
        for(i = 0; i < tofield.length; i++) {
            v = googleEmailAnalyze(tofield[i].value);

            to.push(v);

        }
        for(i = 0; i < ccfield.length; i++) {
            v = googleEmailAnalyze(ccfield[i].value);

            cc.push(v);

        }
        for(i = 0; i < bccfield.length; i++) {
            v = googleEmailAnalyze(bccfield[i].value);
            bcc.push(v);

        }
        //console.log(to);
        //console.log(cc);
        //console.log(bcc);
        var messagefield = container.find('div[aria-label="Message Body"]');
        var parentfield = messagefield.find('.gmail_extra');
        var puid = parentfield.find('.SEM-content').attr('mg');
        //console.log(puid);
        parentfield.remove();
        var msg = '';
        if (messagefield.length > 0) {
            msg = messagefield[0].innerHTML;
        }
        //console.log(msg);

        var dsReply = container.parent().find('.SEM-Deliveryslip');
        var options = View.Deliveryslip.getComposeOptions(dsReply);
        //console.log(options);
        //console.log('onGoogleSecureReply ===== finish');
        var cb = function(res) {
            console.log('complete send?');
            console.log(res);
            if (res && !res.responseStatus) {
                var draft = container.find('[aria-label="Discard draft"]');
                draft.click();
                setTimeout(function() {
                    var discardlink = $('[aria-label="Undo discard link"]');
                    discardlink.parent().parent().parent().css({
                        'position' : 'relative',
                        'top' : '-10000px'
                    });
                    discardlink.parent().empty();

                }, 500);
            } else {
                Application.alert(res.responseStatus.message);
            }
        };

        var callsave = function(pwd) {
            if (pwd !== false) {
                generalSaveSend({
                    recipients : {
                        to : to,
                        cc : cc,
                        bcc : bcc
                    },
                    parentMsgGuid : puid,
                    msgPass : pwd,
                    subject : subject,
                    body : msg,
                    options : options
                }, cb);
            }
        };

        if (options.fyeo == true) {
            createPasswordField(callsave);
        } else {
            callsave('');
        }
        /*
         *
         */
    }

    function googleEmailAnalyze(email) {
        var v = email;
        if (v.indexOf('<') != -1 && v.indexOf('>') != -1) {
            v = v.slice(v.indexOf('<') + 1, v.indexOf('>'));
        }
        return v;
    }

    function onGoogleSecureCompose(container) {
        var i, j;
        //console.log('onGoogleSecureCompose =====');
        //console.log(container);

        var tofield = container.find('input[name=to]');
        var ccfield = container.find('input[name=cc]');
        var bccfield = container.find('input[name=bcc]');
        var to = [], cc = [], bcc = [];
        var v;
        for(i = 0; i < tofield.length; i++) {
            v = googleEmailAnalyze(tofield[i].value);
            to.push(v);

        }
        for(i = 0; i < ccfield.length; i++) {
            v = googleEmailAnalyze(ccfield[i].value);
            cc.push(v);

        }
        for(i = 0; i < bccfield.length; i++) {
            v = googleEmailAnalyze(bccfield[i].value);

            bcc.push(v);

        }
        var subjectfield = container.find('input[name=subjectbox]');
        var subject = '';
        if (subjectfield.length > 0) {
            subject = subjectfield[0].value;
        }
        var messagefield = container.find('div[aria-label="Message Body"]');
        var msg = '';
        if (messagefield.length > 0) {
            msg = messagefield[0].innerHTML;
        }
        //console.log(to);
        //console.log(subject);
        //console.log(msg);
        var cb = function(res) {
            console.log('complete send?');
            console.log(res);
            if (res && !res.responseStatus) {
                var draft = container.find('[aria-label="Discard draft"]');
                draft.click();
                setTimeout(function() {
                    var discardlink = $('[aria-label="Undo discard link"]');
                    discardlink.parent().parent().parent().css({
                        'position' : 'relative',
                        'top' : '-10000px'
                    });
                    discardlink.parent().empty();

                }, 500);
            } else {
                Application.alert(res.responseStatus.message);
            }

        };

        var attachs = container.find('[name="attach"]'), attach;
        //console.log(attachs);
        //console.log(attachs.length);
        for(j = 0; j < attachs.length; j++) {
            attach = $(attachs[j]);
            console.log(attach.parent().find('a').attr('href'));
        }

        // var attachment = container.find("div[aria-label*='Attachment']");

        if (attachs.length > 0) {
            Application.alert('You have attachment in the message, please use the extension to attach with message.', function(){

                var data = {
                    recipients : {
                        to : to,
                        cc : cc,
                        bcc : bcc
                    },
                    subject : subject,
                    body : msg
                };
                Application.setCompose(data);
                Application.setAction('compose');
                View.showWindow();

            });
            return;
        }

        var dsCompose = container.parent().find('.SEM-Deliveryslip');
        var options = View.Deliveryslip.getComposeOptions(dsCompose);
        //console.log(options);

        //console.log('onGoogleSecureCompose ===== finish');

        var callsave = function(pwd) {
            if (pwd !== false) {
                generalSaveSend({
                    recipients : {
                        to : to,
                        cc : cc,
                        bcc : bcc
                    },
                    parentMsgGuid : '',
                    msgPass : pwd,
                    subject : subject,
                    body : msg,
                    options : options
                }, cb);
            }
        };

        if (options.fyeo == true) {
            createPasswordField(callsave);
        } else {
            callsave('');
        }

    }

    function onO365SecureCompose(container) {
        var i, j, to;
        var subject = container.find('[aria-labelledby="MailCompose.SubjectWellLabel"]');
        subject = subject[0].value;
        //
        var tobutton = container.find('button[aria-label^="To button"]');
        var tofield = tobutton.parent().find('[aria-label="Contact photo"]');
        var to = [];
        for(i = 0; i < tofield.length; i++) {
            v = QueryEmail(tofield[i].attributes.getNamedItem('src').value);
            to.push(v);
        }
        //
        var ccbutton = container.find('button[aria-label^="Cc button"]');
        var ccfield = ccbutton.parent().find('[aria-label="Contact photo"]');
        var cc = [];
        for(i = 0; i < ccfield.length; i++) {
            v = QueryEmail(ccfield[i].attributes.getNamedItem('src').value);
            cc.push(v);
        }

        var bccbutton = container.find('button[aria-label^="Bcc button"]');
        var bccfield = bccbutton.parent().find('[aria-label="Contact photo"]');
        var bcc = [];
        for(i = 0; i < bccfield.length; i++) {
            v = QueryEmail(bccfield[i].attributes.getNamedItem('src').value);
            bcc.push(v);
        }

        //console.log(to);
        //console.log(cc);
        //console.log(bcc);

        var iframe = container.find('iframe[title="Message body"]').contents();
        var messagefield = iframe.find('body div[aria-label="Message body"]');
        var msg = messagefield[0].innerHTML;
        //console.log(msg);

        var ds = container.find('.SEM-Deliveryslip');
        var options = View.Deliveryslip.getComposeOptions(ds);
        //console.log(options);

        var cb = function() {
            $('button[aria-label="Discard"]').click();
            setTimeout(function() {
                $('.popupShadow span:contains("Discard")').parent('button').click();
                setTimeout(function() {
                    $('div[aria-label="Message Contents"] div[aria-label="Collapsed Message Contents"]').hide();
                }, 500);
            }, 300);

        };

        var callsave = function(pwd) {
            if (pwd !== false) {
                generalSaveSend({
                    recipients : {
                        to : to,
                        cc : cc,
                        bcc : bcc
                    },
                    parentMsgGuid : '',
                    msgPass : pwd,
                    subject : subject,
                    body : msg,
                    options : options
                }, cb);
            }
        };

        if (options.fyeo == true) {
            createPasswordField(callsave);
        } else {
            callsave('');
        }
    }

    function onO365SecureButton(self, e) {
        var cmp = $(self);
        var container = cmp.closest('.conductorContent');
        if (container.length) {
            onO365SecureCompose(container);
        }
    }

    function onGoogleSecureButton(self, e) {
        var cmp = $(self);
        //console.log('onGoogleSecureButton =====');
        var container = cmp.closest('[role=dialog]');
        var table = cmp.parents('table');
        if (container.length) {
            onGoogleSecureCompose(container);
        } else if (table.length >= 3) {
            onGoogleSecureReply($(table[2]));
        }
        //console.log('onGoogleSecureButton ===== finish');
    }

    function delayCheck(target) {
        setTimeout(function() {
            var container = target.closest('.conductorContent');
            console.log('secure message compose updates');
            console.log(container);
            if (container.length) {
                console.log('container.length');
                var iframe = container.find('iframe[title="Message body"]').contents();
                var messagefield = iframe.find('body div[aria-label="Message body"]');
                var replyMessage = messagefield.find('.SEM-content');
                console.log(replyMessage);
                if (replyMessage.length) {
                    target.remove();
                }
            }

        }, 3000);
    }

    function onO365ComposeClick() {
        var sendbtn = $('[aria-label^="Send"]:not([dup="true"])');
        var target, securebtn;
        for(var i = 0; i < sendbtn.length; i++) {
            //console.log(i);
            //console.log(sendbtn[i]);
            target = $(sendbtn[i]);
            target.attr('dup', 'true');
            //console.log(target);
            securebtn = target.clone();
            //console.log(securebtn);
            securebtn.css('padding-left', '15px');
            securebtn.find('span:contains("SEND")').html("SECURE").on('click', function(e) {
                onO365SecureButton(this, e);
                //console.log('send send');
            });
            target.after(securebtn);
            delayCheck(target);
            //console.log(target);
        }

        var msgbody = $('textarea[aria-label="Message body"]:not([ds="true"])');
        //console.log(msgbody);
        var dsModule;

        for(var j = 0; j < msgbody.length; j++) {
            target = $(msgbody[j]);
            // target.siblings('.aO8').css('min-height', '280px');
            dsModule = Module.loadComposeDeliveryslip();
            // dsModule.find('#SEM-md-recall').hide();
            View.Deliveryslip.setHeader(dsModule, {
                penImage : View.preference.penImage,
                penName : View.preference.penName,
                emailAddress : View.preference.emailAddress,
                package : (View.preference.isTrial) ? Locale.ViewMessage.GUEST_USER : Locale.ViewMessage.PRO_USER
            });
            View.Deliveryslip.bind(target.parent(), dsModule);
            /*
             * target.parent().css({ 'position': 'relative' });
             */
            dsModule.css({
                'position' : 'absolute',
                'top' : '49px',
                'right' : '2px'
            });
            dsModule.find('.SEM-DeliveryslipTab').css({
                'opacity' : 0.5
            });
            target.after(dsModule);
            target.attr('ds', 'true');

        }

        var iframe = $('iframe#EditorBody');
        var domains = View.domains;
        if (iframe.length > 0) {
            var foundLinks = [];
            var contents = $('iframe#EditorBody').contents();
            var links = contents.find('a');
            var link;
            var mg, pencode, curlink, href;
            for(var k = 0; k < links.length; k++) {
                link = $(links[k]);
                href = link.attr('href');
                for(var n = 0; n < domains.length; n++) {
                    if (href.indexOf(domains[n]) != -1 && href.indexOf("mg=") != -1 && href.indexOf("ik=") == -1) {
                        if ((href.split('/')[2].indexOf(domains[n]) != -1))
                            foundLinks.push(link);
                    }
                }
            }
            if (foundLinks.length > 0) {
                for(var l = 0; l < foundLinks.length; l++) {
                    link = foundLinks[l];
                    pencode = href.split('/')[3];
                    mg = parseUri(href.replace("@", "%40")).queryKey.mg;
                    var content = $('<div>').addClass('SEM-content').attr('mg', mg).attr('pencode', pencode);
                    content.insertAfter(link.parent().parent().parent().parent().parent());
                    link.parent().parent().parent().parent().parent().remove();
                    View.Message.getReplyMessage(content, mg, pencode);
                }
            }
        }

    }

    function onGoogleComposeClick() {
        var sendbtn = $('[aria-label^="Send ‪(Ctrl-Enter)‬"]:not([dup="true"])');
        var target, securebtn;
        for(var i = 0; i < sendbtn.length; i++) {
            //console.log(i);
            //console.log(sendbtn[i]);
            target = $(sendbtn[i]);
            target.attr('dup', 'true');
            //console.log(target);
            securebtn = target.clone();
            // dsbtn = target.clone();
            //console.log(securebtn);

            // dsbtn.html("Deliveryslip").on('click', function(e) {
            // var tables = $(this).parents('table');
            // if (tables.length >= 3) {
            // var target = $(tables[1]).find('.SEM-Deliveryslip').parent();
            // //console.log($(tables[1]).find('.SEM-Deliveryslip'));
            // View.Deliveryslip.toggleDeliveryslip(target);
            // }

            // });

            securebtn.attr('data-tooltip', 'Send Secure').html('Send Secure').on('click', function(e) {
                onGoogleSecureButton(this, e);
            });

            // target.after(dsbtn);
            target.after(securebtn);
            //console.log(target);
            var cmp = $(self);
            //console.log('onGoogleSecureButton =====');
            var table = securebtn.parents('table');
            console.log(table);
            if (table.length >= 3) {
                body = $(table[2]).find('div[aria-label="Message Body"]');
                if (body.find('.SEM-content').length > 0) {
                    target.remove();
                }
            }
        }

        var msgbody = $('div[aria-label="Message Body"]:not([ds="true"])');
        var dsModule;

        for(var j = 0; j < msgbody.length; j++) {
            target = $(msgbody[j]);
            target.attr('ds', 'true');
            // if(target.find('.SEM-content').length > 0) {
            target.siblings('.aO8').css('min-height', '280px');
            dsModule = Module.loadComposeDeliveryslip();
            // dsModule.find('#SEM-md-recall').hide();
            View.Deliveryslip.setHeader(dsModule, {
                penImage : View.preference.penImage,
                penName : View.preference.penName,
                emailAddress : View.preference.emailAddress,
                package : (View.preference.isTrial) ? Locale.ViewMessage.GUEST_USER : Locale.ViewMessage.PRO_USER
            });
            View.Deliveryslip.hideTab(dsModule);
            View.Deliveryslip.bind(false, dsModule);
            target.after(dsModule);
            // }
        }

    }

    function createComposeGoogle() {
        //console.log('createComposeGoogle');
        var compose = $('[gh=cm]');
        if (compose.length == 0) {
            return false;
        }
        View.type = "google";

        if (!View.preference['inline-setting-gmail']) {
            return false;
        }

        var sendsecure = compose.clone();
        sendsecure.html('New secure').css({
            'margin-top' : '10px'

        }).addClass('secure-btn');
        sendsecure.on('click', function() {
            Application.setAction('compose');
            View.showWindow();
        });
        compose.on('click', function() {
            //console.log('on compose');
        });

        compose.after(sendsecure);

        sendsecure.hover(function() {
            $(this).addClass(Config.cssClass.google.hover)
        }, function() {
            $(this).removeClass(Config.cssClass.google.hover)
        });

        return true;
    }

    function office365Wait() {
        if(office365WaitTimeout) {
            clearTimeout(office365WaitTimeout);
        }
        office365WaitTimeout =setTimeout(function() {
            //console.log('timeout check...');
            if(!createComposeO365()) {
                office365Wait();
            }
        }, 1000);
    }

    function createComposeWait() {
        if (++checkview <= 15) {
            setTimeout(function() {
                //console.log('wait ... ' + checkview);
                createCompose();
            }, 200 * checkview);
        }
    }

    function init() {
        checkview = 0;
        chromeStorage();
        View.initEvent();
        View.type = false;
        loadLocale();
        createWindow();
        Module.initialize();
        // addDocumentScript();

        setTimeout(function() {
            syncAccount();
            AppInit();
            loadPageCss();

            loadCSS(Config.preloadcss);
            loadWebFont();

            startAsync();
            checkDomainList();
        }, 300);
        // injectScript(fn);
    }

    function checkDomainList() {
        var list = Config.inlineDomain;
        var host = window.location.host;

        var loading = false;
        for(var i = 0; i < list.length; i++) {
            if (host.indexOf(list[i]) != -1) {
                loading = true;
            }
        }
        if (loading) {
            createCompose();
            startAsyncSendSecure();
            // loadCSS();
        }
        checkZimbra();
    }

    function checkZimbra() {

        if ($('#z_shell').length > 0) {
            View.type = "zimbra";
            loadSweetAlert();
        }

        if (!View.type && (++checkzimbraview <= 10)) {
            setTimeout(function(){
                checkZimbra();
            }, 2000)
        }

    }

    function loadPageCss() {
        var link = document.createElement("link");
        link.href = chrome.extension.getURL("webapp/chrome/contentscript.css");
        link.type = "text/css";
        link.rel = "stylesheet";
        document.getElementsByTagName("head")[0].appendChild(link);
    }

    function loadWebFont() {
        $.ajax({
            url : chrome.extension.getURL("scripts/webfont.css"),
            async : false,
            dataType : 'css',
            success : function(data) {
                var link = document.createElement("link");
                link.href = chrome.extension.getURL("scripts/webfont.css");
                link.type = "text/css";
                link.rel = "stylesheet";
                document.getElementsByTagName("head")[0].appendChild(link);
            },
            error : function(data) {
                var link = document.createElement("link");
                link.href = chrome.extension.getURL("scripts/webfont.css");
                link.type = "text/css";
                link.rel = "stylesheet";
                document.getElementsByTagName("head")[0].appendChild(link);
            }
        });
    }

    function loadCSS(css) {

        var css = css || Config.css;
        var link;
        for(var i = 0; i < css.length; i++) {
            var link = document.createElement("link");
            link.href = chrome.extension.getURL(css[i]);
            link.type = "text/css";
            link.rel = "stylesheet";
            try {
                document.getElementsByTagName("head")[0].appendChild(link);
            } catch (e) {
                console.err(e);
            }
        }
    }


    function loadSweetAlert() {
        //Transfer.loadSweetAlert();

        var link = document.createElement("link");
        link.href = chrome.extension.getURL("webapp/chrome/Module/sweet-alert.css");
        link.type = "text/css";
        link.rel = "stylesheet";
        document.getElementsByTagName("head")[0].appendChild(link);

        $.ajax({
            url : chrome.extension.getURL('webapp/chrome/Module/sweet-alert.min.js'),
            async : false,
            dataType : 'html',
            success : function(data) {
                $.globalEval(data);
                //console.log('load complete');
            }
        });
    }

    function loadLocale() {
        var cb = function(preferences) {
            var lang = 'en';
            if (preferences.lang) {
                lang = preferences.lang;
            }
            //console.log('loading locale');
            $.ajax({
                url : chrome.extension.getURL('lang/locale_' + lang + '.js'),
                async : false,
                dataType : 'html',
                success : function(data) {
                    $.globalEval(data);
                    //console.log('load complete');
                }
            });
        };
        Transfer.getPreference(cb);
    }

    function chromeStorage() {
        chrome.storage.onChanged.addListener(function(changes, namespace) {
            for(key in changes) {
                var storageChange = changes[key];
                switch(key) {
                    case 'office':
                        Transfer.setPreference({
                            'inline-setting-office' : storageChange.newValue
                        });
                        break;
                    case 'gmail':
                        Transfer.setPreference({
                            'inline-setting-gmail' : storageChange.newValue
                        });
                        break;
                    case 'zimbra':
                        Transfer.setPreference({
                            'inline-setting-zimbra' : storageChange.newValue
                        });
                        break;
                }
            }
        });
        chrome.storage.sync.get('office', function(value) {
            if (value && typeof value.office != 'undefined') {
                Transfer.setPreference({
                    'inline-setting-office' : value.office
                });
            }
        });
        chrome.storage.sync.get('gmail', function(value) {
            if (value && typeof value.gmail != 'undefined') {
                Transfer.setPreference({
                    'inline-setting-gmail' : value.gmail
                });
            }
        });
        chrome.storage.sync.get('zimbra', function(value) {
            if (value && typeof value.zimbra != 'undefined') {
                Transfer.setPreference({
                    'inline-setting-zimbra' : value.zimbra
                });
            }
        });
    }

    setTimeout(function() {
        //console.log('init start');
        init();
    }, 500);
});

/*
 * function injectScript(callback) { sendRequest({ command : 'inject', data : {
 * url : ["SEModule.js", // "../../Module/Library/Services/E2Service.js", //
 * "../../Module/Library/Services/E2RequestHandler.js", //
 * "../../Module/Library/Services/E2Login.js", //
 * "../../Module/Library/Shared/common.js", //
 * "../../Module/Library/Shared/moment.js" // ] } }, callback); }
 */

var Base64 = {

    _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

    encode : function(input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        input = Base64._utf8_encode(input);

        while (i < input.length) {

            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

        }

        return output;
    },

    decode : function(input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        while (i < input.length) {

            enc1 = this._keyStr.indexOf(input.charAt(i++));
            enc2 = this._keyStr.indexOf(input.charAt(i++));
            enc3 = this._keyStr.indexOf(input.charAt(i++));
            enc4 = this._keyStr.indexOf(input.charAt(i++));

            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;

            output = output + String.fromCharCode(chr1);

            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }

        }

        output = Base64._utf8_decode(output);

        return output;

    },

    _utf8_encode : function(string) {
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";

        for(var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            } else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            } else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    },

    _utf8_decode : function(utftext) {
        var string = "";
        var i = 0;
        var c = c1 = c2 = 0;

        while (i < utftext.length) {

            c = utftext.charCodeAt(i);

            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            } else if ((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i + 1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            } else {
                c2 = utftext.charCodeAt(i + 1);
                c3 = utftext.charCodeAt(i + 2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }

        }

        return string;
    }

};

var printFn = function() {
    console.log(arguments);
};

var MessagingAPI = {
    vpsUrl : SSO_URL,
    ssoUrl : SSO_URL,
    authToken : '',
    apiRoute : '/api',
    apiVersion : '/v1',
    cookieless : true,
    versionLabel: {
        P4: '5.13.15327.1',
        P5: '5.15.15352.1',
        MARCH2016: '5.20.*',
        MAY2016: '5.30.*'
    },
    allowedTags : ["a","abbr","address","area","article","audio","b","br","caption","cite","code","col","colgroup","data","dd","del","dfn","div","dl","dt","em","figcaption","figure","footer","h1","h2","h3","h4","h5","h6","header","hgroup","hr","i","img","ins","kbd","li","map","mark","nav","ol","p","pre","q","samp","section","small","span","strong","sub","sup","table","tbody","td","tfoot","th","thead","time","tr","u","ul","var","video"],
    versionCompare : function(v1, v2) {
        if (v1 == v2) {
            return 0;
        }

        v1 = v1.split('.');
        v2 = v2.split('.');
        var same = 0, v1v, v2v;
        for(var i = 0; i < v1.length && same === 0; i++) {
            if(typeof v2[i] == "undefined") {
                same = 1;
            } else if(v1[i] != v2[i]) {
                v1v = parseInt(v1[i]);
                v2v = parseInt(v2[i]);

                if (isNaN(v1v))
                    v1v = -1

                if (isNaN(v2v))
                    v2v = -1

                if(v1v < v2v) {
                    same = -1;
                } else if (v1v > v2v) {
                    same = 1;
                }
            }
        }

        if(same === 0) {
            if(v1.length < v2.length) {
                same = 1;
            }
        }
        return same;
    },



    resetVPSUrl : function() {
        MessagingAPI.vpsUrl = MessagingAPI.ssoUrl;
        MessagingAPI.apiVersion = '';
    },

    checkVpsUrl : function() {
        var urlparser = window.location.href.split('/');
        var base_url = urlparser[2];
        var service_code = false;
        if (urlparser.length > 3) {
            service_code = urlparser[3];
        }

        if (service_code) {
            var vpsurl = "https://" + base_url + "/" + service_code;
            Application.setPreferences({
                apiUrl : vpsurl
            });
        }
    },

    setSessionToken : function(token) {
        Application.sessionToken = token;
        E2Service.token = token;
    },

    setAuthToken : function(token) {
        MessagingAPI.authToken = token;
        E2Service.authKey = token;
    },

    proxyRequest : function(url, command, type, data, plain, header) {
        // Enable CORS withCrediential for legacy API
        Application.shouldEnableCors(true);
        var me = this;
        var cmd = '';
        if (url == me.ssoUrl) {
            cmd = url + me.apiRoute + command;
        } else if (url == me.vpsUrl) {
            cmd = url + me.apiRoute + me.apiVersion + command;
        }
        if (command == "/public/ping") {
            cmd = url + me.apiRoute + command;
        }

        var request = jQuery.ajax({
            async: true,
            url : cmd,
            type : type,
            crossDomain : true,
            data : (plain) ? data : JSON.stringify(data),
            traditional : (plain) ? true : false,
            contentType : 'application/json',
            dataType : 'json',
            beforeSend : function(x) {
                x.setRequestHeader("Accept", "application/json");
                if (Application && Application.sessionToken) {
                    x.setRequestHeader("X-sm-session-token", Application.sessionToken);
                }

                if (Application && Application.proxySessionToken) {
                    x.setRequestHeader("X-sm-session-token", Application.proxySessionToken);
                }

                if (url != me.ssoUrl) {
                    x.setRequestHeader('x-sm-client-name', 'WebApp');
                    x.setRequestHeader('x-sm-client-version', Version.VERSION);
                }

                if (header && header.length) {
                    for(var i = 0; i < header.length; i++) {
                        x.setRequestHeader(header[i].title, header[i].value);
                    }
                }

                // x.setRequestHeader("Content-Type", "application/json");
                // if(typeof sso != 'boolean' || !sso) {
                // x.setRequestHeader("MsgApiVersion", me.apiVersion);
                // }
            }
        });

        return {
            request : request,
            json : JSON.stringify(data)
        };
    },

    requestAttachment : function(url, command, name, download, data, plain, header) {
        // Enable CORS withCrediential for legacy API
        var type = 'GET';
        Application.shouldEnableCors(true);
        var me = this;
        var cmd = '';
        if (url == me.ssoUrl) {
            cmd = url + me.apiRoute + command;
        } else if (url == me.vpsUrl) {
            cmd = url + me.apiRoute + me.apiVersion + command;
        }
        if (command == "/public/ping") {
            cmd = url + me.apiRoute + command;
        }

        var datalist = [];
        if (data) {
            for( var key in data) {
                datalist.push(key + "=" + data[key]);
            }
        }
        if (datalist.length) {
            for(var i = 0; i < datalist.length; i++) {
                if (i == 0) {
                    cmd += "?";
                } else {
                    cmd += "&";
                }
                cmd += datalist[i];
            }
        }
        var request = new XMLHttpRequest();
        request.open('GET', cmd, true);
        request.responseType = 'arraybuffer'
        request.setRequestHeader("Accept", "application/json");
        request.setRequestHeader('x-sm-client-name', 'WebApp');
        request.setRequestHeader('x-sm-client-version', Version.VERSION);

        if (Application && Application.sessionToken) {
            request.setRequestHeader("X-sm-session-token", Application.sessionToken);
        } else if (Application.getPreferences && Application.getPreferences().token) {
            request.setRequestHeader("X-sm-session-token", Application.getPreferences().token);
        }



        return {
            request : request,
            json : JSON.stringify(data),
            guid : data.attachmentGuid,
            chunk : data.chunkNumber,
            name : name,
            download : download
        };
    },
    requestVPS : function(url, command, type, data, plain, header) {
        // Enable CORS withCrediential for legacy API
        Application.shouldEnableCors(true);
        var me = this;
        var cmd = '';

        var request = jQuery.ajax({
            async: true,
            url : url + me.apiRoute + command,
            type : type,
            crossDomain : true,
            data : (plain) ? data : JSON.stringify(data),
            traditional : (plain) ? true : false,
            contentType : 'application/json',
            dataType : 'json',
            beforeSend : function(x) {
                x.setRequestHeader("Accept", "application/json");
                if (Application && Application.sessionToken) {
                    x.setRequestHeader("X-sm-session-token", Application.sessionToken);
                } else if (Application.getPreferences && Application.getPreferences().token) {
                    x.setRequestHeader("X-sm-session-token", Application.getPreferences().token);
                }



                x.setRequestHeader('x-sm-client-name', 'WebApp');
                x.setRequestHeader('x-sm-client-version', Version.VERSION);

                if (header && header.length) {
                    for(var i = 0; i < header.length; i++) {
                        x.setRequestHeader(header[i].title, header[i].value);
                    }
                }

                // x.setRequestHeader("Content-Type", "application/json");
                // if(typeof sso != 'boolean' || !sso) {
                // x.setRequestHeader("MsgApiVersion", me.apiVersion);
                // }
            }
        });

        return {
            request : request,
            json : JSON.stringify(data)
        };
    },
    request : function(url, command, type, data, plain, header) {
        // Enable CORS withCrediential for legacy API
        Application.shouldEnableCors(true);
        var me = this;
        var cmd = '';
        var sso = false;
        if (url == me.ssoUrl) {
            cmd = url + me.apiRoute + command;
            sso = true;
        } else if (url == me.vpsUrl) {
            cmd = url + me.apiRoute + me.apiVersion + command;
        }
        if (command == "/public/ping") {
            cmd = url + me.apiRoute + command;
        }

        var request = jQuery.ajax({
            async: true,
            url : cmd,
            type : type,
            crossDomain : true,
            data : (plain) ? data : JSON.stringify(data),
            traditional : (plain) ? true : false,
            contentType : 'application/json',
            dataType : 'json',
            beforeSend : function(x) {
                x.setRequestHeader("Accept", "application/json");
                if(!sso) {

                    if (Application.getPreferences && Application.getPreferences().token) {
                        x.setRequestHeader("X-sm-session-token", Application.getPreferences().token);
                    } else if (Application && Application.proxySessionToken) {
                        x.setRequestHeader("X-sm-session-token", Application.proxySessionToken);
                    } else if (Application && Application.sessionToken) {
                        x.setRequestHeader("X-sm-session-token", Application.sessionToken);
                    }

                }
                if (url != me.ssoUrl) {
                    x.setRequestHeader('x-sm-client-name', 'WebApp');
                    x.setRequestHeader('x-sm-client-version', Version.VERSION);
                }

                if (header && header.length) {
                    for(var i = 0; i < header.length; i++) {
                        x.setRequestHeader(header[i].title, header[i].value);
                    }
                }

                // x.setRequestHeader("Content-Type", "application/json");
                // if(typeof sso != 'boolean' || !sso) {
                // x.setRequestHeader("MsgApiVersion", me.apiVersion);
                // }
            }
        });

        return {
            request : request,
            json : JSON.stringify(data)
        };
    },
    createSuccessResponse : function(oResponse) {
        //Application.log(oResponse);
        return oResponse;
    },
    createFailureResponse : function(jqx) {
        var res = {
            responseStatus: {
                errorCode: 0
            }
        };
        if (jqx.responseJSON) {
            res = jqx.responseJSON;
        } else {
            res.responseStatus.errorCode = jqx.status;
        }
        return res;
    },

    handleRequestAttachment : function(xhr, callback, vCallback) {
        var response = false, res;
        xhr.request.onload = function() {
            if (xhr.request.status == 200) {
                response = xhr.request.response;
            } else {
                res = String.fromCharCode.apply(null, new Uint8Array(xhr.request.response));
                try {
                    res = JSON.parse(res);
                } catch(e) {
                    res = false;
                }
                response = {};
                if(res) {
                    response = res;
                } else {
                    response.responseStatus = {
                        errorCode : xhr.request.status,
                        message : xhr.request.statusText
                    };
                }
            }
            MessagingAPI.onRequestAttachmentComplete(response, xhr, callback, vCallback);
        };
        xhr.request.send();
        // if(resendFunc) resendFunc();
    },
    handleRequest : function(deferred, callback, vCallback) {
        var oResponse;
        deferred.request.done(function(oResponse, textStatus, jqx) {
            oResponse = MessagingAPI.createSuccessResponse(oResponse);
            var pass = true;
            if (oResponse && oResponse.responseStatus && oResponse.responseStatus.errorCode) {
                switch(oResponse.responseStatus.errorCode) {
                    case '50':
                        if (!View.checkMaintenance) {
                            View.maintenanceMode();
                            pass = false;
                        }
                        break;
                    case '31':
                        View.suspendedMode();
                        pass = false;
                        break;

                }
            }
            if (pass) {
                MessagingAPI.onRequestComplete(oResponse, deferred.json, callback, vCallback);
            }
        });

        deferred.request.fail(function(jqx, textStatus, errorCode) {
            oResponse = MessagingAPI.createFailureResponse(jqx);
            var pass = true;
            if (oResponse && oResponse.responseStatus && oResponse.responseStatus.errorCode) {
                switch(oResponse.responseStatus.errorCode) {
                    case '50':
                        if (!View.checkMaintenance) {
                            View.maintenanceMode();
                            pass = false;
                        }
                        break;
                    case '31':
                        View.suspendedMode();
                        pass = false;
                        break;

                }
            }
            if (pass) {
                MessagingAPI.onRequestFail(oResponse, deferred.json, callback, vCallback);
            }
            // navigator.notification.alert('There is a internet connection
            // problem. Please try again later.');
            //Application.log('it looks like there is an internet connection problem');
        });
        // if(resendFunc) resendFunc();
    },

    onRequestAttachmentComplete : function(e2Response, request, callback, vCallback) {
        callback(e2Response, request, vCallback);
    },

    onRequestComplete : function(e2Response, json, callback, vCallback) {
        var req;
        if(json) {
            try {
                req = JSON.parse(json);
            } catch (e) {
                req = json
            }
        }
        callback(e2Response, vCallback, req);
    },
    onRequestFail : function(e2Response, json, callback, vCallback) {
        var req;
        if(json) {
            try {
                req = JSON.parse(json);
            } catch (e) {
                req = json
            }
        }
        callback(e2Response, vCallback, req);
    }
};

if (typeof module != "undefined" && module.exports) {
    module.exports = MessagingAPI;
} else {
    window.MessagingAPI = MessagingAPI;
}

var ServiceAPI = {

    bindEvent : function() {
        this.unbindEvent();
        ServiceAPI.bind();
        ServiceAttachment.bind();
        ServiceMessage.bind();
        if (typeof ServiceCampaign != 'undefined')
            ServiceCampaign.bind();
        ServiceService.bind();
        ServiceTracking.bind();
        ServiceUser.bind();
        E2Service.bindEvent();
    },

    unbindEvent : function() {
        ServiceAPI.unbind();
        ServiceAttachment.unbind();
        ServiceMessage.unbind();
        if (typeof ServiceCampaign != 'undefined')
            ServiceCampaign.unbind();
        ServiceService.unbind();
        ServiceTracking.unbind();
        ServiceUser.unbind();
        E2Service.unbindEvent();
    },

    bind : function() {
        App.vent.on('api:public:get:service', this.publicGetService, this);
        App.vent.on('api:public:get:sso:user', this.publicGetSSOUser, this);
        App.vent.on('api:public:get:sso:user:service', this.publicGetSSOUserService, this);
        App.vent.on('api:public:auth:sso:user', this.publicAuthenticateSSOUser, this);
        App.vent.on('api:ping:vps', this.pingVPS, this);
        App.vent.on('api:ping', this.ping, this);
        App.vent.on('api:cping', this.ping, this);
        App.vent.on('api:login', this.login, this);
        App.vent.on('api:auth', this.authenticate, this);
        App.vent.on('api:auth:renew', this.authenticateRenew, this);
        App.vent.on('api:logout:proxy', this.logoutProxy, this);
        App.vent.on('api:logout', this.logout, this);
        App.vent.on('api:search:service', this.searchService, this);
        App.vent.on('api:public:get:single:service', this.publicGetServiceSingle, this);
        App.vent.on('api:set:session:token', MessagingAPI.setSessionToken);
        App.vent.on('api:get:auth:data', this.getAuthData, this);
        App.vent.on('api:get:data', this.getData, this);
    },

    unbind : function() {
        App.vent.off('api:public:get:service', this.publicGetService, this);
        App.vent.off('api:public:get:sso:user', this.publicGetSSOUser, this);
        App.vent.off('api:public:get:sso:user:service', this.publicGetSSOUserService, this);
        App.vent.off('api:public:auth:sso:user', this.publicAuthenticateSSOUser, this);
        App.vent.off('api:ping:vps', this.pingVPS, this);
        App.vent.off('api:ping', this.ping, this);
        App.vent.off('api:cping', this.ping, this);
        App.vent.off('api:login', this.login, this);
        App.vent.off('api:auth', this.authenticate, this);
        App.vent.on('api:auth:renew', this.authenticateRenew, this);
        App.vent.off('api:logout:proxy', this.logoutProxy, this);
        App.vent.off('api:logout', this.logout, this);
        App.vent.off('api:search:service', this.searchService, this);
        App.vent.off('api:public:get:single:service', this.publicGetServiceSingle, this);
        App.vent.off('api:set:session:token', MessagingAPI.setSessionToken);
        App.vent.off('api:get:auth:data', this.getAuthData, this);
        App.vent.off('api:get:data', this.getData, this);
    },


    publicGetService : function(guid, vCallback) {
        var request = API.publicGetService(guid);
        MessagingAPI.handleRequest(request, ServiceAPI.publicGetService_, vCallback);
    },

    publicGetService_ : function(response, vCallback) {
        if (vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:public:get:service:complete', response);
    },

    publicGetSSOUserService : function(emailAddress, serviceGuid, vCallback) {
        var request = API.publicGetSSOUser(emailAddress, serviceGuid);
        MessagingAPI.handleRequest(request, ServiceAPI.publicGetSSOUserService_, vCallback);
        return request.request;
    },

    publicGetSSOUserService_ : function(response, vCallback) {
        if (vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:public:get:sso:user:service:complete', response);
    },

    publicGetSSOUser : function(emailAddress, vCallback) {
        var request = API.publicGetSSOUser(emailAddress);
        MessagingAPI.handleRequest(request, ServiceAPI.publicGetSSOUser_, vCallback);
        return request.request;
    },

    publicGetSSOUser_ : function(response, vCallback) {
        if (vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:public:get:sso:user:complete', response);
    },

    publicAuthenticateSSOUser : function(emailAddress, password, vCallback) {
        var request = API.publicAuthenticateSSOUser(emailAddress, password);
        MessagingAPI.handleRequest(request, ServiceAPI.publicAuthenticateSSOUser_, vCallback);
        return request.request;
    },

    publicAuthenticateSSOUser_ : function(response, vCallback) {
        if (vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:public:auth:sso:user:complete', response);
    },

    pingVPS : function(vps, vCallback) {
        vps = vps.replace('/services/api.aspx', '');
        var request = API.pingVPS(vps);
        MessagingAPI.handleRequest(request, ServiceAPI.pingVPS_, vCallback);
        return request.request;
    },
    pingVPS_ : function(response, vCallback) {
        if (response && response.version) {
            var version = "/v1";
            /*
             * var version = response.version; if (version.indexOf('/') > -1) {
             * version = version.substr(version.indexOf('/')); } else { version =
             * "/" + version; }
             */
            MessagingAPI.apiVersion = version;
            MessagingAPI.buildVersion = response.build;
        }
        if (vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:ping:vps:complete', response);
    },

    ping : function(vCallback) {
        var request = API.ping();
        MessagingAPI.handleRequest(request, ServiceAPI.ping_, vCallback);
        return request.request;
    },
    ping_ : function(response, vCallback) {
        if (response && response.version) {
            var version = "/v1";
            /*
             * var version = response.version; if (version.indexOf('/') > -1) {
             * version = version.substr(version.indexOf('/')); } else { version =
             * "/" + version; }
             */
            MessagingAPI.apiVersion = version;
            MessagingAPI.buildVersion = response.build;
        }
        if (vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:ping:complete', response);
    },

    cping : function(vCallback) {
        var request = API.cping();
        MessagingAPI.handleRequest(request, ServiceAPI.cping_, vCallback);
        return request.request;
    },
    cping_ : function(response, vCallback) {
        if (response && response.version) {
            var version = "/v1";
            /*
             * var version = response.version; if (version.indexOf('/') > -1) {
             * version = version.substr(version.indexOf('/')); } else { version =
             * "/" + version; }
             */
            MessagingAPI.cccVersion = version;
        }
        if (vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:cping:complete', response);
    },

    login : function(username, password, vCallback) {
        var request = API.login(username, password);
        MessagingAPI.handleRequest(request, ServiceAPI.login_, vCallback);
        return request.request;
    },
    login_ : function(response, vCallback) {
        if (response && !response.responseStatus) {
            E2Service.token = response.sessionToken;
        }
        if (vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:login:complete', response);
    },

    authenticate : function(vCallback) {
        var request = API.authenticate();
        MessagingAPI.handleRequest(request, ServiceAPI.authenticate_, vCallback);
    },
    authenticate_ : function(response, vCallback) {
        if (response && !response.responseStatus) {
            E2Service.token = response.sessionToken;
        }
        if (vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:auth:complete', response);
    },

    authenticateRenew : function(vCallback) {
        var request = API.authenticate();
        MessagingAPI.handleRequest(request, ServiceAPI.authenticateRenew_, vCallback);
    },

    authenticateRenew_ : function(response, vCallback) {
        if (response && !response.responseStatus) {
            App.setPreferences({
                token: response.sessionToken
            });
            E2Service.token = response.sessionToken;
        }
        if (vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:auth:renew:complete', response);
    },


    logoutProxy : function(vCallback) {
        var request = API.logoutProxy();
        MessagingAPI.handleRequest(request, ServiceAPI.logoutProxy_, vCallback);
    },
    logoutProxy_ : function(response, vCallback) {
        if (vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:logout:proxy:complete', response);
    },

    logout : function(vCallback) {
        var request = API.logout();
        MessagingAPI.handleRequest(request, ServiceAPI.logout_, vCallback);
    },
    logout_ : function(response, vCallback) {
        if (vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:logout:complete', response);
    },

    searchService : function(code, vCallback) {
        var request = API.searchService(code);
        MessagingAPI.handleRequest(request, ServiceAPI.searchService_, vCallback);
        return request.request;
    },

    searchService_ : function(response, vCallback) {
        if (vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:search:service:complete', response);
    },

    publicGetServiceSingle : function(code, vCallback) {

        var useCached;
        if (App.getPreferences) {
            var encodeResponse = App.getPreferences().publicgetservicesingle;
            try {
                var response = JSON.parse(encodeResponse);
                if(typeof response == "object") {
                    useCached = true;
                }

                if(useCached) {
                    if (vCallback) {
                        vCallback(response);
                    }
                    vCallback = function() {
                    };
                }
            } catch (e) {

            }
        }

        var request = API.publicGetServiceSingle(code);
        MessagingAPI.handleRequest(request, ServiceAPI.publicGetServiceSingle_, vCallback);
        return request.request;
    },

    publicGetServiceSingle_ : function(response, vCallback) {
        //save it

        if (App.setPreferences) {
            if (response && !response.responseStatus) {
                var encodeResponse = JSON.stringify(response);
                App.setPreferences({'publicgetservicesingle': encodeResponse});
            }
        }
        if (vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:public:get:single:service:complete', response);
    },

    getAuthData : function(authGuid, vCallback) {
        var request = API.getAuthData(authGuid);
        MessagingAPI.handleRequest(request, ServiceAPI.getAuthData_, vCallback);
        return request.request;
    },

    getAuthData_ : function(response, vCallback) {
        if (vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:get:auth:data:complete', response);
    },

    getData : function(token, vCallback) {
        var request = API.getData(token);
        MessagingAPI.handleRequest(request, ServiceAPI.getData_, vCallback);
        return request.request;
    },

    getData_ : function(response, vCallback) {
        if (vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:get:data:complete', response);
    },
};

if (typeof module != "undefined" && module.exports) {
    module.exports = ServiceAPI;
} else {
    window.ServiceAPI = ServiceAPI;
}

var ServiceMessage = {

    bind : function() {
        App.vent.on('api:get:campaign:messages', this.getCampaignMessages, this);
        App.vent.on('api:track:print:message', this.trackPrintMessage, this);
        App.vent.on('api:get:message:tree', this.getMessageTree, this);
        App.vent.on('api:search:messages', this.searchMessages, this);
        App.vent.on('api:search:messages:detour', this.searchMessagesDetour, this);
        App.vent.on('api:link:attachment', this.linkAttachment, this);
        App.vent.on('api:unlink:attachment', this.unlinkAttachment, this);
        App.vent.on('api:get:message', this.getMessage, this);
        App.vent.on('api:get:message:list', this.getMessageList, this);
        App.vent.on('api:create:message', this.preCreateMessage, this);
        App.vent.on('api:save:message', this.saveMessage, this);
        App.vent.on('api:send:message', this.sendMessage, this);
        App.vent.on('api:create:attachments', this.preCreateAttachments, this);
        App.vent.on('api:upload:attachment:chunks', this.uploadAttachmentChunk, this);
    },

    unbind : function() {
        App.vent.off('api:get:campaign:messages', this.getCampaignMessages, this);
        App.vent.off('api:track:print:message', this.trackPrintMessage, this);
        App.vent.off('api:get:message:tree', this.getMessageTree, this);
        App.vent.off('api:search:messages', this.searchMessages, this);;
        App.vent.off('api:search:messages:detour', this.searchMessagesDetour, this);
        App.vent.off('api:link:attachment', this.linkAttachment, this);
        App.vent.off('api:unlink:attachment', this.unlinkAttachment, this);
        App.vent.off('api:get:message', this.getMessage, this);
        App.vent.off('api:get:message:list', this.getMessageList, this);
        App.vent.off('api:create:message', this.preCreateMessage, this);
        App.vent.off('api:save:message', this.saveMessage, this);
        App.vent.off('api:send:message', this.sendMessage, this);
        App.vent.off('api:create:attachments', this.preCreateAttachments, this);
        App.vent.off('api:upload:attachment:chunks', this.uploadAttachmentChunk, this);
    },

    mapAttachmentUrl : function(guid) {
        return MessagingAPI.vpsUrl + "/api" + MessagingAPI.apiVersion + "/attachments/" + guid;
    },

    trackPrintMessage : function(guid, vCallback) {
        var request = APIMessage.trackPrintMessage(guid);
        MessagingAPI.handleRequest(request, ServiceMessage.trackPrintMessage_, vCallback);
    },

    trackPrintMessage_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:track:print:message:complete', response);
    },

    getMessageTree : function(guid, vCallback) {
        var request = APIMessage.getMessageTree(guid);
        MessagingAPI.handleRequest(request, ServiceMessage.getMessageTree_, vCallback);
    },

    getMessageTree_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:get:message:tree:complete', response);
    },

    getCampaignMessages : function(options, vCallback) {
        options = options == undefined ? {} : options;
        var page = options.page ? options.page : 1;
        var pageSize = options.pageSize ? options.pageSize : 25;
        var filter = options.filter ? options.filter : {};
        var sort = options.sort;

        filter.campaignGuid = options.campaignGuid;
        var request = APIMessage.searchMessages(page, pageSize, filter, sort);
        MessagingAPI.handleRequest(request, ServiceMessage.getCampaignMessages_, vCallback);
    },

    getCampaignMessages_ : function(response) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:get:campaign:messages:complete', response);
    },

    searchMessages : function(options, vCallback) {
        options = options == undefined ? {} : options;
        var page = options.page;
        var pageSize = options.pageSize;
        var filter = options.filter;
        var sort = options.sort;
        var request = APIMessage.searchMessages(page, pageSize, filter, sort);
        MessagingAPI.handleRequest(request, ServiceMessage.searchMessages_, vCallback);
    },

    searchMessages_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:search:messages:complete', response);
    },

    searchMessagesDetour : function(options, vCallback) {
        options = options == undefined ? {} : options;
        var page = options.page;
        var pageSize = options.pageSize;
        var filter = options.filter;
        var sort = options.sort;
        var request = APIMessage.searchMessages(page, pageSize, filter, sort);
        MessagingAPI.handleRequest(request, ServiceMessage.searchMessagesDetour_, vCallback);
    },

    searchMessagesDetour_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:search:messages:detour:complete', response);
    },

    linkAttachment : function(mGuid, aGuid, vCallback) {
        mGuid = mGuid.replace(/-/g, '');
        aGuid = aGuid.replace(/-/g, '');
        var request = APIMessage.linkAttachment(mGuid, aGuid);
        MessagingAPI.handleRequest(request, ServiceMessage.linkAttachment_, vCallback);
    },

    linkAttachment_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:link:attachment:complete', response);
    },

    unlinkAttachment : function(mGuid, aGuid, vCallback) {
        var request = APIMessage.unlinkAttachment(mGuid, aGuid);
        MessagingAPI.handleRequest(request, ServiceMessage.unlinkAttachment_, vCallback);
    },

    unlinkAttachment_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:unlink:attachment:complete', response);
    },

    getMessage : function(options, vCallback) {
        options = options == undefined ? {} : options;
        var guid = options.messageGuid;
        var password = options.password;
        var request = APIMessage.getMessage(guid, password);
        MessagingAPI.handleRequest(request, ServiceMessage.getMessage_, vCallback);
    },

    getMessage_ : function(response, vCallback) {
        var hasHtmlTag = function(str) {
            var htmlTagRe = /<\/?[\w\s="/.':;#-\/\?]+>/gi;
            return htmlTagRe.test(str);
        }
        if(response.subject) {
            if (hasHtmlTag(response.subject)) {
                response.subject = striptags(response.subject, MessagingAPI.allowedTags, true)
            }
            response.subject = htmlEnDeCode.htmlDecode(response.subject);
        }
        if(response.body) {
            response.body = striptags(response.body, MessagingAPI.allowedTags, true);
        }
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:get:message:complete', response);
    },

    getMessageList : function(page, pageSize, filterGroup, filterSearch, sortType, sortDirection, vCallback) {
        var request = APIMessage.getMessageList(page, pageSize, filterGroup, filterSearch, sortType, sortDirection);
        MessagingAPI.handleRequest(request, ServiceMessage.getMessageList_, vCallback);
    },

    getMessageList_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:get:message:list:complete', response);
    },

    preCreateMessage : function(options, vCallback) {
        options = options == undefined ? {} : options;
        var actionCode = options.actionCode;
        var parentGuid = options.parentGuid;
        var password = options.password;
        var campaignGuid = options.campaignGuid;
        var request = APIMessage.preCreateMessage(actionCode, parentGuid, password, campaignGuid);
        MessagingAPI.handleRequest(request, ServiceMessage.preCreateMessage_, vCallback);
        return request.request;
    },
    preCreateMessage_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:create:message:complete', response);
    },

    saveMessage : function(options, vCallback) {
        options = options == undefined ? {} : options;
        var messageGuid = options.messageGuid;
        if (options.guid && !messageGuid) {
            messageGuid = options.guid;
        }
        var subject = options.subject;
        var recipients = options.recipients ? options.recipients : {};
        var body = options.body;
        var bodyFormat = options.bodyFormat;
        var options = options.options;
        var request = APIMessage
                .saveMessage(messageGuid, subject, recipients.to, recipients.cc, recipients.bcc, body, bodyFormat, options.allowForward, options.allowReply, options.allowTracking, options.shareTracking, options.fyeoType, options.expiryDate, options.expiryGroup);
        MessagingAPI.handleRequest(request, ServiceMessage.saveMessage_, vCallback);
    },
    saveMessage_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:save:message:complete', response);
    },

    sendMessage : function(messageGuid, password, createMembers, sendNotification, craCode, expiryDate, expiryGroup, vCallback) {
        var request = APIMessage.sendMessage(messageGuid, password, createMembers, sendNotification, craCode);
        MessagingAPI.handleRequest(request, ServiceMessage.sendMessage_, vCallback);
        return request.request;
    },
    sendMessage_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:send:message:complete', response);
    },

    preCreateAttachments : function(messageGuid, attachmentPlaceholders, vCallback) {
        var request = APIMessage.preCreateAttachments(messageGuid, attachmentPlaceholders);
        MessagingAPI.handleRequest(request, ServiceMessage.preCreateAttachments_, vCallback);
    },
    preCreateAttachments_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:create:attachments:complete', response);
    },
    uploadAttachmentChunk : function(attachmentGuid, chunkNumber, vCallback) {
        var request = APIMessage.uploadAttachmentChunk(attachmentGuid, chunkNumber);
        MessagingAPI.handleRequest(request, ServiceMessage.uploadAttachmentChunk_, vCallback);
    },
    uploadAttachmentChunk_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:upload:attachment:chunks:complete', response);
    }
};

var ServiceAttachment = {
    chunks : {},

    mapAttachmentUrl : function(guid) {
        return MessagingAPI.vpsUrl + "/api" + MessagingAPI.apiVersion + "/attachments/" + guid;
    },

    bind : function() {
        App.vent.on('api:get:attachment:url', this.getAttachmentUrl, this);
        App.vent.on('api:get:attachment:details', this.getAttachmentDetails, this);
        App.vent.on('api:track:print:attachment', this.trackPrintAttachment, this);
        App.vent.on('api:search:attachments', this.searchAttachments, this);
        App.vent.on('api:search:esignatures', this.searchESignatures, this);
        App.vent.on('api:get:signatures', this.getSignatures, this);
        App.vent.on('api:download:attachment', this.downloadAttachment, this);
        App.vent.on('api:update:attachment', this.updateAttachment, this);
        App.vent.on('api:remove:attachment', this.removeAttachment, this);
        App.vent.on('api:delete:attachment', this.deleteAttachment, this);
        App.vent.on('api:sign:attachment', this.signAttachment, this);
        App.vent.on('api:get:attachment:progress', this.getAttachmentsUploadProgress, this);
        App.vent.on('api:download:attachment:chunks', this.downloadChunks, this);
        App.vent.on('api:create:attachment:download:token', this.createAttachmentDownloadToken, this);
        App.vent.on('api:download:attachment:with:token', this.downloadAttachmentWithToken, this);
    },

    unbind : function() {
        App.vent.off('api:get:attachment:url', this.getAttachmentUrl, this);
        App.vent.off('api:get:attachment:details', this.getAttachmentDetails, this);
        App.vent.off('api:track:print:attachment', this.trackPrintAttachment, this);
        App.vent.off('api:search:attachments', this.searchAttachments, this);
        App.vent.off('api:search:esignatures', this.searchESignatures, this);
        App.vent.off('api:get:signatures', this.getSignatures, this);
        App.vent.off('api:download:attachment', this.downloadAttachment, this);
        App.vent.off('api:update:attachment', this.updateAttachment, this);
        App.vent.off('api:remove:attachment', this.removeAttachment, this);
        App.vent.off('api:delete:attachment', this.deleteAttachment, this);
        App.vent.off('api:sign:attachment', this.signAttachment, this);
        App.vent.off('api:get:attachment:progress', this.getAttachmentsUploadProgress, this);
        App.vent.off('api:download:attachment:chunks', this.downloadChunks, this);
        App.vent.off('api:create:attachment:download:token', this.createAttachmentDownloadToken, this);
        App.vent.off('api:download:attachment:with:token', this.downloadAttachmentWithToken, this);
    },

    getAttachmentUrl : function(guid, vCallback){
        var path;

        path = MessagingAPI.vpsUrl + "/api" + MessagingAPI.apiVersion + "/attachments/" + guid;

        var query = "?";
        query += 'x-sm-client-name=WebApp';
        query += '&x-sm-client-version='+Version.VERSION;
        var token = "";
        if (Application.getPreferences && Application.getPreferences().token) {
            token = "&X-sm-session-token=" + Application.getPreferences().token;
        }

        if (Application && Application.sessionToken) {
            token = "&X-sm-session-token=" + Application.sessionToken;
        }

        if (token.length) {
            query += token;
        }

        path += query;

        if(vCallback) {
            vCallback(path);
        }
        App.vent.pub('api:get:attachment:url:complete', path);
        return path;
    },

    getAttachmentUrlByToken : function(token, download, vCallback){
        var path;

        path = MessagingAPI.vpsUrl + "/api" + MessagingAPI.apiVersion + "/attachments/download/" + token + "?preview=" + !download;

        if(vCallback) {
            vCallback(path);
        }
        App.vent.pub('api:get:attachment:url:by:token:complete', path);
        return path;
    },

    createAttachmentDownloadToken: function(options, vCallback) {
        options = options == undefined ? {} : options;
        var attachmentGuid = options.attachmentGuid;
        var password = options.password;
        var request = APIMessage.createAttachmentDownloadToken(attachmentGuid, password);
        MessagingAPI.handleRequest(request, ServiceAttachment.createAttachmentDownloadToken_, vCallback);
    },

    createAttachmentDownloadToken_: function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:create:attachment:download:token:complete', response);
    },

    downloadAttachmentWithToken: function(options, vCallback) {
        options = options == undefined ? {} : options;
        var token = options.token;
        var name = options.name;
        var download = options.download;
        var request = APIMessage.downloadAttachmentWithToken(token, name, download);
        MessagingAPI.handleRequestAttachment(request, ServiceAttachment.downloadAttachmentWithToken_, vCallback);
        return request.request;
    },

    downloadAttachmentWithToken_ : function(response, data, vCallback) {
        if (response && !response.responseStatus) {
            var blob, url;
            if(App.clientInfo && App.clientInfo.isSafari()) {
                var intArray = new Uint8Array(response);
                blob = new Blob([intArray.buffer], {
                    type: "application/octet-stream"
                });
            } else {
                blob = new Blob([response], {
                    type: "application/octet-stream"
                });
            }
            url = window.URL.createObjectURL(blob);

            if (data.download && data.name) {
                if (App.clientInfo.isIE()) {
                    if (window.navigator.msSaveOrOpenBlob) {
                        window.navigator.msSaveOrOpenBlob(blob, data.name);
                    }
                } else {
                    var a = document.createElement("a");
                    document.body.appendChild(a);
                    a.style = "display: none";
                    a.href = url;
                    a.download = data.name;
                    a.click();
                }
                setTimeout(function() {
                    window.URL.revokeObjectURL(url);
                }, 100);
            }
            response = {
                blob : blob,
                data : response
            };
        }
        if(vCallback){
            vCallback(response);
        }

        App.vent.pub('api:download:attachment:with:token:complete', response);
    },

    getAttachmentDetails: function(guid, vCallback) {
        var request = APIMessage.getAttachmentDetails(guid);
        MessagingAPI.handleRequest(request, ServiceAttachment.getAttachmentDetails_, vCallback);
        return request.request;
    },

    getAttachmentDetails_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:get:attachment:details:complete', response);
    },

    trackPrintAttachment : function(guid, vCallback) {
        var request = APIMessage.trackPrintAttachment(guid);
        MessagingAPI.handleRequest(request, ServiceAttachment.trackPrintAttachment_, vCallback);
    },

    trackPrintAttachment_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:track:print:attachment:complete', response);
    },

    searchAttachments : function(options, vCallback) {
        options = options == undefined ? {} : options;
        var page = options.page;
        var pageSize = options.pageSize;
        var filter = options.filter;
        var sort = options.sort;
        if(typeof filter != 'object') {
            filter = {}
        }
        if (!filter.types) {
            filter.types = ['Normal'];
        }
        var request = APIMessage.searchAttachments(page, pageSize, filter, sort);
        MessagingAPI.handleRequest(request, ServiceAttachment.searchAttachments_, vCallback);
    },

    searchAttachments_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:search:attachments:complete', response);
    },

    searchESignatures : function(options, vCallback) {
        options = options == undefined ? {} : options;
        var page = options.page;
        var pageSize = options.pageSize;
        var filter = options.filter;
        var sort = options.sort;
        if(typeof filter != 'object') {
            filter = {}
        }
        if (!filter.types) {
            filter.types = 'ESignature';
         }

        var request = APIMessage.searchAttachments(page, pageSize, filter, sort);
        MessagingAPI.handleRequest(request, ServiceAttachment.searchESignatures_, vCallback);
    },

    searchESignatures_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:search:esignatures:complete', response);
    },

    updateAttachment : function(guid, type, vCallback) {
        var request = APIMessage.updateAttachment(guid, type);
        MessagingAPI.handleRequest(request, ServiceAttachment.updateAttachment_, vCallback);
    },

    updateAttachment_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:update:attachment:complete', response);
    },

    deleteAttachment : function(guid, vCallback) {
        var request = APIMessage.deleteAttachment(guid);
        MessagingAPI.handleRequest(request, ServiceAttachment.deleteAttachment_, vCallback);
    },

    deleteAttachment_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:delete:attachment:complete', response);
    },

    removeAttachment : function(mGuid, aGuid, vCallback) {
        var request = APIMessage.removeAttachment(mGuid, aGuid);
        MessagingAPI.handleRequest(request, ServiceAttachment.removeAttachment_, vCallback);
    },

    removeAttachment_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:remove:attachment:complete', response);
    },

    signAttachment : function(guid, answer, vCallback) {
        var request = APIMessage.signAttachment(guid, answer);
        MessagingAPI.handleRequest(request, ServiceAttachment.signAttachment_, vCallback);
    },

    signAttachment_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.pub('api:sign:attachment:complete', response);
    },

    getSignatures : function(guid, vCallback) {
        var request = APIMessage.getSignatures(guid);
        MessagingAPI.handleRequest(request, ServiceAttachment.getSignatures_, vCallback);
    },

    getSignatures_ : function(response, vCallback, req) {
        if(vCallback){
            vCallback(response);
        }
        App.vent.pub('api:get:signatures:complete', response, req);
    },

    downloadAttachment : function(guid, name, download, vCallback) {
        var request = APIMessage.downloadAttachment(guid, name, download);
        MessagingAPI.handleRequestAttachment(request, ServiceAttachment.downloadAttachment_, vCallback);
        return request.request;
    },

    downloadAttachment_ : function(response, data, vCallback) {
        if (response && !response.responseStatus) {
            var blob, url;
            if(App.clientInfo && App.clientInfo.isSafari()) {
                var intArray = new Uint8Array(response);
                blob = new Blob([intArray.buffer], {
                    type: "application/octet-stream"
                });
            } else {
                blob = new Blob([response], {
                    type: "application/octet-stream"
                });
            }
            url = window.URL.createObjectURL(blob);

            if (data.download && data.name) {
                if (App.clientInfo.isIE()) {
                    if (window.navigator.msSaveOrOpenBlob) {
                        window.navigator.msSaveOrOpenBlob(blob, data.name);
                    }
                } else {
                    var a = document.createElement("a");
                    document.body.appendChild(a);
                    a.style = "display: none";
                    a.href = url;
                    a.download = data.name;
                    a.click();
                }
                setTimeout(function() {
                    window.URL.revokeObjectURL(url);
                }, 100);
            }
            response = {
                blob : blob,
                data : response
            };
        }
        if(vCallback){
            vCallback(response);
        }

        App.vent.pub('api:download:attachment:complete', response);
    },

    getAttachmentsUploadProgress : function(attachmentGuid, vCallback) {
        var request = APIMessage.getAttachmentsUploadProgress(attachmentGuid);
        MessagingAPI.handleRequest(request, ServiceAttachment.getAttachmentsUploadProgress_, vCallback);
    },
    getAttachmentsUploadProgress_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }

        App.vent.pub('api:get:attachment:progress:complete', response);
    },

    downloadChunks : function(guid, name, download, vCallback) {
        ServiceAttachment.getAttachmentsUploadProgress(guid, function(response) {
            if (response && !response.responseStatus) {
                var chunkProgresses = response.attachmentProgresses[0].chunkProgresses, i;
                console.log(response);
                ServiceAttachment.chunks[guid] = {
                    data : [],
                    totalCount : chunkProgresses.length,
                    currentCount : 0,
                    name : name,
                    download : download

                };
                for(i = 0; i < chunkProgresses.length; i++) {
                    ServiceAttachment.downloadAttachmentChunk(guid, chunkProgresses[i].chunkNumber, download, vCallback);
                }
            }
        });
    },

    completeChunkDownload : function(guid, vCallback) {
        if (ServiceAttachment.chunks[guid] && ServiceAttachment.chunks[guid].totalCount == ServiceAttachment.chunks[guid].currentCount) {
            var blob = new Blob(ServiceAttachment.chunks[guid].blob, {
                type : "application/octet-stream"
            }), url = window.URL.createObjectURL(blob);
            if (ServiceAttachment.chunks[guid].download) {
                var a = document.createElement("a");
                document.body.appendChild(a);
                a.style = "display: none";
                a.href = url;
                a.download = ServiceAttachment.chunks[guid].name;
                a.click();
                setTimeout(function() {
                    window.URL.revokeObjectURL(url);
                }, 100);
            }
            response = {
                blob : blob,
                data : ServiceAttachment.chunks[guid].data
            };
            if(vCallback) {
                vCallback(response);
            }
            App.vent.pub('api:download:attachment:chunks:complete', response);
        }
    },

    downloadAttachmentChunk : function(guid, chunkNumber, download, vCallback) {
        var request = APIMessage.downloadAttachmentChunk(guid, chunkNumber, download);
        MessagingAPI.handleRequestAttachment(request, ServiceAttachment.downloadAttachmentChunk_, vCallback);
    },

    downloadAttachmentChunk_ : function(response, data, vCallback) {
        if (!(response && response.responseStatus)) {
            if (data.guid && data.chunk) {
                var guid = data.guid;
                var chunk = data.chunk;
                var blob = new Blob([response], {
                    type : "application/octet-stream"
                });
                ServiceAttachment.chunks[guid].blob[chunk - 1] = blob;
                ServiceAttachment.chunks[guid].data[chunk - 1] = response;
                ServiceAttachment.chunks[guid].currentCount++;
                ServiceAttachment.completeChunkDownload(guid, vCallback);
            }
        }
        vCallback(response);
    }
};

var ServiceService = {

    bind : function() {
        Application.vent.subscribe('api:public:get:service:settings', this.getServicePublicSettings, this);
        Application.vent.subscribe('api:get:service:settings', this.getServiceSettings, this);
    },

    unbind : function() {
        Application.vent.unsubscribe('api:public:get:service:settings', this.getServicePublicSettings, this);
        Application.vent.unsubscribe('api:get:service:settings', this.getServiceSettings, this);
    },

    Data : {
    // public_settings : {},
    // settings : {}
    },
    /*
     * getServiceConfiguration : function(vCallback) { var request =
     * APIService.getServiceConfiguration(); MessagingAPI.handleRequest(request,
     * ServiceService.getServiceConfiguration_, vCallback); },
     * 
     * getServiceConfiguration_ : function(response, vCallback) {
     * //console.log('=== getServiceConfiguration_ ===');
     * //console.log(response); vCallback(response); },
     */

    getServicePublicSettings : function(vCallback) {
        var useCached;
        if (App.getPreferences) {
            var encodeResponse = App.getPreferences().servicepublicsettings;
            try {
                var response = JSON.parse(encodeResponse);
                var now = new Date().getTime();
                if(response.timestamp && (response.timestamp + 60 * 60 * 1000) > now) {
                    useCached = true;
                }

                if(useCached) {
                    if (vCallback) {
                        vCallback(response);
                    }
                    vCallback = function() {
                    };
                }
            } catch (e) {

            }
        }

        var request = APIService.getServicePublicSettings();
        MessagingAPI.handleRequest(request, ServiceService.getServicePublicSettings_, vCallback);
    },

    getServicePublicSettings_ : function(response, vCallback) {
        // console.log('=== getServicePublicSettings_ ===');

        if (response && !response.responseStatus) {
            ServiceService.Data.public_settings = response;
            ServiceService.Data.settings = response;
            if (App.setPreferences) {
                response.timestamp = new Date().getTime();
                var encodeResponse = JSON.stringify(response);
                App.setPreferences({'servicepublicsettings': encodeResponse});
            }
        }
        if(vCallback) {
            vCallback(response);
        }
        Application.vent.publish('api:public:get:service:settings:complete', response);
    },

    getServiceSettings : function(vCallback) {
        var request = APIService.getServiceSettings();
        MessagingAPI.handleRequest(request, ServiceService.getServiceSettings_, vCallback);
    },

    getServiceSettings_ : function(response, vCallback) {
        // console.log('=== getServiceSettings_ ===');
        if (response && !response.responseStatus) {
            ServiceService.Data.private_settings = response;
        }
        if(vCallback) {
            vCallback(response);
        }
        Application.vent.publish('api:get:service:settings:complete', response);
    }
};

var ServiceUser = {
    Data : {
    // settings : {}
    },

    bind : function() {
        App.vent.on('api:public:get:quickregistration', this.getQuickRegistration, this);
        App.vent.on('api:user:aliases:confirm', this.confirmUserAlias, this);
        App.vent.on('api:remove:user:alias', this.removeUserAlias, this);
        App.vent.on('api:promote:user:alias', this.promoteUserAlias, this);
        App.vent.on('api:add:user:alias', this.addUserAlias, this);
        App.vent.on('api:get:user:alias', this.getUserAlias, this);
        App.vent.on('api:confirm:registration', this.confirmRegistration, this);
        App.vent.on('api:register:user', this.registerUser, this);
        App.vent.on('api:expire:auth:token', this.expireAuthenticationToken, this);
        App.vent.on('api:expire:auth:tokens', this.expireAuthenticationTokens, this);
        App.vent.on('api:get:new:authentication:token', this.getNewAuthenticationToken, this);
        App.vent.on('api:update:user:settings', this.updateUserSettings, this);
        App.vent.on('api:get:user:settings', this.getUserSettings, this);
        App.vent.on('api:forget:password', this.forgetPassword, this);
        App.vent.on('api:reset:password', this.resetPassword, this);
        App.vent.on('api:update:password', this.updatePassword, this);
        App.vent.on('api:get:user:contacts', this.getUserContacts, this);
        App.vent.on('api:activeate:user:message', this.activateUserMessage, this);
    },

    unbind : function() {
        App.vent.off('api:public:get:quickregistration', this.getQuickRegistration, this);
        App.vent.off('api:user:aliases:confirm', this.confirmUserAlias, this);
        App.vent.off('api:remove:user:alias', this.removeUserAlias, this);
        App.vent.off('api:promote:user:alias', this.promoteUserAlias, this);
        App.vent.off('api:add:user:alias', this.addUserAlias, this);
        App.vent.off('api:get:user:alias', this.getUserAlias, this);
        App.vent.off('api:confirm:registration', this.confirmRegistration, this);
        App.vent.off('api:register:user', this.registerUser, this);
        App.vent.off('api:expire:authentication:token', this.expireAuthenticationToken, this);
        App.vent.off('api:expire:authentication:tokens', this.expireAuthenticationTokens, this);
        App.vent.off('api:get:new:authentication:token', this.getNewAuthenticationToken, this);
        App.vent.off('api:update:user:settings', this.updateUserSettings, this);
        App.vent.off('api:get:user:settings', this.getUserSettings, this);
        App.vent.off('api:forget:password', this.forgetPassword, this);
        App.vent.off('api:reset:password', this.resetPassword, this);
        App.vent.off('api:update:password', this.updatePassword, this);
        App.vent.off('api:get:user:contacts', this.getUserContacts, this);
        App.vent.off('api:activeate:user:message', this.activateUserMessage, this);
    },

    getQuickRegistration : function(token, vCallback) {
        var request = APIUser.getQuickRegistration(token);
        MessagingAPI.handleRequest(request, ServiceUser.getQuickRegistration_, vCallback);
    },

    getQuickRegistration_ : function(response, vCallback) {
        if (vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:public:get:quickregistration:complete', response);
    },

    confirmUserAlias : function(token, password, vCallback) {
        var request = APIUser.confirmUserAlias(token, password);
        MessagingAPI.handleRequest(request, ServiceUser.confirmUserAlias_, vCallback);
    },

    confirmUserAlias_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:user:aliases:confirm:complete', response);
    },

    removeUserAlias : function(email, vCallback) {
        var request = APIUser.removeUserAlias(email);
        MessagingAPI.handleRequest(request, ServiceUser.removeUserAlias_, vCallback);
    },
    removeUserAlias_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:remove:user:alias:complete', response);
    },

    promoteUserAlias : function(email, opword, npword, vCallback) {
        var request = APIUser.promoteUserAlias(email, opword, npword);
        MessagingAPI.handleRequest(request, ServiceUser.promoteUserAlias_, vCallback);
    },
    promoteUserAlias_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:promote:user:alias:complete', response);
    },

    addUserAlias : function(email, vCallback) {
        var request = APIUser.addUserAlias(email);
        MessagingAPI.handleRequest(request, ServiceUser.addUserAlias_, vCallback);
    },
    addUserAlias_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:add:user:alias:complete', response);
    },

    getUserAlias : function(vCallback) {
        var request = APIUser.getUserAlias();
        MessagingAPI.handleRequest(request, ServiceUser.getUserAlias_, vCallback);
    },
    getUserAlias_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:get:user:alias:complete', response);
    },

    confirmRegistration : function(token, vCallback) {
        var request = APIUser.confirmRegistration(token);
        MessagingAPI.handleRequest(request, ServiceUser.confirmRegistration_, vCallback);
    },
    confirmRegistration_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:confirm:registration:complete', response);
    },

    resendRegistration : function(token, emailAddress, vCallback) {
        var request = APIUser.resendRegistration(token, emailAddress);
        MessagingAPI.handleRequest(request, ServiceUser.confirmRegistration_, vCallback);
    },
    resendRegistration_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:resend:registration:complete', response);
    },

    registerUser : function(emailAddress, firstName, lastName, password, quickRegistrationKey, craCode, language, terms, vCallback) {
        firstName = striptags(firstName);
        lastName = striptags(lastName);
        var request = APIUser.registerUser(emailAddress, firstName, lastName, password, quickRegistrationKey, craCode, language, terms);
        MessagingAPI.handleRequest(request, ServiceUser.registerUser_, vCallback);
    },
    registerUser_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:register:user:complete', response);
    },

    expireAuthenticationToken : function(vCallback) {
        var request = APIUser.expireAuthenticationToken();
        MessagingAPI.handleRequest(request, ServiceUser.expireAuthenticationToken_, vCallback);
    },
    expireAuthenticationToken_ : function(response, vCallback) {
        if (response && !response.responseStatus) {
            MessagingAPI.setAuthToken('');
        }
        if(vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:expire:auth:token:complete', response);
    },

    expireAuthenticationTokens : function(vCallback) {
        var request = APIUser.expireAuthenticationTokens();
        MessagingAPI.handleRequest(request, ServiceUser.expireAuthenticationTokens_, vCallback);
    },
    expireAuthenticationTokens_ : function(response, vCallback) {
        if (response && !response.responseStatus) {
            MessagingAPI.setAuthToken('');
        }
        if(vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:expire:auth:tokens:complete', response);
    },

    getNewAuthenticationToken : function(vCallback) {
        var request = APIUser.getNewAuthenticationToken();
        MessagingAPI.handleRequest(request, ServiceUser.getNewAuthenticationToken_, vCallback);
    },
    getNewAuthenticationToken_ : function(response, vCallback) {
        // console.log('=== getNewAuthenticationToken_ ===');
        // console.log(response);
        if (response && !response.responseStatus) {
            MessagingAPI.setAuthToken(response.authenticationToken);
        }
        if(vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:get:new:authentication:token:complete', response);
    },

    updateUserSettings : function(settings, vCallback) {
        var request = APIUser.updateUserSettings(settings);
        MessagingAPI.handleRequest(request, ServiceUser.updateUserSettings_, vCallback);
    },
    updateUserSettings_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:update:user:settings:complete', response);
    },

    forgetPassword : function(emailAddress, vCallback) {
        var request = APIUser.forgetPassword(emailAddress);
        MessagingAPI.handleRequest(request, ServiceUser.forgetPassword_, vCallback);
    },
    forgetPassword_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:forget:password:complete', response);
    },

    resetPassword : function(token, password, vCallback) {
        var request = APIUser.resetPassword(token, password);
        MessagingAPI.handleRequest(request, ServiceUser.resetPassword_, vCallback);
    },
    resetPassword_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:reset:password:complete', response);
    },

    updatePassword : function(oldPassword, newPassword, vCallback) {
        var request = APIUser.updatePassword(oldPassword, newPassword);
        MessagingAPI.handleRequest(request, ServiceUser.updatePassword_, vCallback);
    },
    updatePassword_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:update:password:complete', response);
    },

    getUserContacts : function(options, vCallback) {
        options = options == undefined ? {} : options;
        var page = options.page;
        var pageSize = options.pageSize;
        var request = APIUser.getUserContacts(page, pageSize);
        MessagingAPI.handleRequest(request, ServiceUser.getUserContacts_, vCallback);
    },
    getUserContacts_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:get:user:contacts:complete', response);
    },

    getUserSettings : function(vCallback) {
        var request = APIUser.getUserSettings();
        MessagingAPI.handleRequest(request, ServiceUser.getUserSettings_, vCallback);
    },
    getUserSettings_ : function(response, vCallback) {
        // console.log("==== getUserSettings_ ====");
        // console.log(response);
        if (response && !response.responseStatus) {
            ServiceUser.Data.settings = response;
        }
        if(vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:get:user:settings:complete', response);
    },
    activateUserMessage : function(vCallback) {
        var request = APIUser.activateUserMessage();
        MessagingAPI.handleRequest(request, ServiceUser.activateUserMessage_, vCallback);
    },
    activateUserMessage_ : function(response, vCallback) {
        if(vCallback) {
            vCallback(response);
        }
        App.vent.publish('api:activeate:user:message:complete', response);
    }
};

var API = {
    publicRoute : '/public',
    apiRoute : '',

    getAuthData : function(authGuid) {
        var command = this.apiRoute + '/authdata/' + authGuid;
        var data = {
                authGuid : authGuid
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET', data, true);
    },

    getData : function(token) {
        var command = this.apiRoute + '/data/' + token;
        var data = {
            token : token
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET', data, true);
    },

    login : function(username, password) {
        var command = this.apiRoute + "/login";
        var data = {
            username : username,
            password : password,
            cookieless: MessagingAPI.cookieless
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'POST', data);
    },

    authenticate : function() {
        var command = this.apiRoute + "/authenticate";
        var data = {
            authenticationToken: MessagingAPI.authToken,
            cookieless: MessagingAPI.cookieless
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'POST', data);
    },


    pingVPS : function(vps) {
        var command = this.apiRoute + this.publicRoute + "/ping";
        return MessagingAPI.requestVPS(vps, command, 'GET');
    },

    ping : function() {
        var command = this.apiRoute + this.publicRoute + "/ping";
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET');
    },

    cping : function() {
        var command = this.apiRoute + "/ping";
        return MessagingAPI.request(MessagingAPI.ssoUrl, command, 'GET');
    },
    logoutProxy : function() {
        var command = this.apiRoute + "/logout";
        var data = {};
        return MessagingAPI.proxyRequest(MessagingAPI.vpsUrl, command, 'POST', data);
    },

    logout : function() {
        var command = this.apiRoute + "/logout";
        var data = {};
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'POST', data);
    },

    publicAuthenticateSSOUser : function(emailAddress, password) {
        var command = this.publicRoute + '/sso';
        var data = {
            emailAddress : emailAddress,
            password : password
        };
        return MessagingAPI.request(MessagingAPI.ssoUrl, command, 'POST', data);
    },

    publicGetSSOUser : function(emailAddress, serviceGuid) {
        var command = this.publicRoute + '/sso';
        var data = {
            emailAddress : emailAddress
        };
        if(serviceGuid) {
            data.serviceGuid = serviceGuid;
        }
        return MessagingAPI.request(MessagingAPI.ssoUrl, command, 'GET', data, true);
    },

    publicGetService : function(guid) {
        var command = this.publicRoute + "/services/" + guid;
        var data = {
            'serviceGuid': guid
        };
        return MessagingAPI.request(MessagingAPI.ssoUrl, command, 'GET', data);
    },

    publicGetServiceSingle : function(code) {
        var command = this.publicRoute + "/services/single";
        var data = {
            'serviceCode': code
        };
        return MessagingAPI.request(MessagingAPI.ssoUrl, command, 'GET', data, true);
    },

    searchService : function(code) {
        var command = this.apiRoute + "/services/";
        var data = {
            'code': code
        };
        return MessagingAPI.request(MessagingAPI.ssoUrl, command, 'GET', data, true);
    }
};

if (typeof module != "undefined" && module.exports) {
    module.exports = API;
} else {
    window.API = API;
}

var APIMessage = {
    apiRoute : '/messages',
    attachRoute : '/attachments',

    createAttachmentDownloadToken: function(guid, password) {
        var command = this.attachRoute + '/' + guid + '/downloadtoken';
        var data = {
            password: password
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'POST', data, false);
    },

    getAttachmentDetails : function(guid) {
        var command = this.attachRoute + '/' + guid + '/details';
        var data = {
            attachmentGuid : guid
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET', data, false);
    },

    trackPrintAttachment : function(guid) {
        var command = this.attachRoute + '/' + guid + '/tracking/print';
        var data = {
                attachmentGuid : guid
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'POST', data);
    },

    trackPrintMessage : function(guid) {
        var command = this.apiRoute + '/' + guid + '/tracking/print';
        var data = {
                messageGuid : guid
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'POST', data);
    },

    preCreateMessage : function(actionCode, parentGuid, password) {
        var command = this.apiRoute;
        var data = {
            actionCode : actionCode
        };
        if (parentGuid) {
            data.parentGuid = parentGuid;
        }
        if (password) {
            data.password = password;
        }
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'POST', data);
    },

    getSignatures : function(guid) {
        var command = this.attachRoute + '/' + guid + '/signatures';
        var data = {
            attachmentGuid: guid
        };

        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET', data);
    },


    getMessageTree : function(guid) {
        var command = this.apiRoute + '/' + guid + '/tree';
        var data = {
            messageGuid: guid
        };

        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET', data);
    },

    searchAttachments : function(page, pageSize, filter, sort) {
        var command = this.attachRoute + '/search';
        var data = {};
        if(page) {
            data.page = page;
        }
        if(pageSize) {
            data.pageSize = pageSize;
        }
        if(filter) {
            data.filter = JSV.stringify(filter);
        }
        if(sort) {
            data.sort = JSV.stringify(sort);
        } else {
            sort = {
                    type: 'sentOn',
                    direction: 'desc',
            };
            data.sort = JSV.stringify(sort);
        }
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET', data, true);
    },

    searchMessages : function(page, pageSize, filter, sort) {
        var command = this.apiRoute + '/search';
        var data = {};
        if(page) {
            data.page = page;
        }
        if(pageSize) {
            data.pageSize = pageSize;
        }
        if(filter) {
            data.filter = JSV.stringify(filter);
        }
        if(sort) {
            data.sort = JSV.stringify(sort);
        }

        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET', data, true);
    },

    getMessage : function(guid, password) {
        var command = this.apiRoute + '/' + guid, header = [];
        var data = {
            messageGuid: guid
        };

        if(password) {
            header.push({
                title: 'x-sm-password',
                value: Base64.encode(password)
            });
        }
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET', data, true, header);
    },
    getMessageList : function(page, pageSize, filterGroup, filterSearch, sortType, sortDirection) {
        var command = this.apiRoute + '/list';
        var data = {
            pageNumber : page,
            pageSize : pageSize,
            filter : {
                group : filterGroup,
                searchCriteria : filterSearch
            },
            sort : {
                type : sortType,
                direction : sortDirection
            }
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET', data);
    },
    preCreateMessage : function(actionCode, parentGuid, password, campaignGuid) {
        var command = this.apiRoute;
        var data = {
            actionCode : actionCode
        };
        if (parentGuid) {
            data.parentGuid = parentGuid;
        }
        if (password) {
            data.password = password;
        }
        if (campaignGuid) {
            data.campaignGuid = campaignGuid;
        }
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'POST', data);
    },
    saveMessage : function(messageGuid, subject, to, cc, bcc, body, bodyFormat, allowForward, allowReply, allowTracking, shareTracking, fyeoType, expiryDate, expiryGroup) {
        var command = this.apiRoute + '/' + messageGuid + '/save';
        var data = {
            "messageGuid" : messageGuid,
            "to" : to ? to : [],
            "cc" : cc ? cc : [],
            "bcc" : bcc ? bcc : [],
            "messageOptions" : {
                "allowForward" : allowForward,
                "allowReply" : allowReply,
                "allowTracking" : allowTracking,
                "fyeoType" : fyeoType,
                "shareTracking" : shareTracking
            }
        };
        if(subject) {
            data.subject = subject;
        }
        if(body) {
            data.body = body;
        }
        if(bodyFormat) {
            data.bodyFormat = bodyFormat;
        }
        if(expiryDate) {
            data.expiryDate = expiryDate
        }
        if(expiryGroup) {
            data.expiryGroup = expiryGroup
        }
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'PUT', data);
    },
    sendMessage : function(messageGuid, password, createMembers, sendNotification, craCode) {
        var command = this.apiRoute + '/' + messageGuid + '/send';
        var data = {
                "messageGuid": messageGuid,
                "password": password,
                "inviteNewUsers": createMembers,
                "sendNotification": sendNotification
        };
        if(craCode) {
            data.craCode = craCode;
        }
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'PUT', data);
    },
    preCreateAttachments : function(messageGuid, attachmentPlaceholders) {
        var command = this.attachRoute + '/precreate';
        var data = {
                "messageGuid": messageGuid,
                "attachmentPlaceholders": attachmentPlaceholders

        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'POST', data);
    },
    uploadAttachmentChunk : function(attachmentGuid, chunkNumber) {
        var command = this.attachRoute + '/' + attachmentGuid + '/chunk/' + chunkNumber;
        var data = {
                "attachmentGuid": attachmentGuid,
                "chunkNumber": chunkNumber

        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'POST', data);
    },
    getAttachmentsUploadProgress : function(attachmentGuid) {
        var command = this.attachRoute + '/progress';
        var guidArray = [].concat(attachmentGuid);
        var data = {
                "attachmentGuids": JSV.stringify(guidArray),
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET', data, true);
    },
    removeAttachment : function(messageGuid, attachmentGuid) {
        var command = this.apiRoute + '/' + messageGuid + this.attachRoute + '/' + attachmentGuid;
        var data = {
            messageGuid : messageGuid,
            attachmentGuid : attachmentGuid
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'DELETE', data);
    },
    deleteAttachment : function(attachmentGuid) {
        var command = this.attachRoute + '/' + attachmentGuid;
        var data = {
            attachmentGuid : attachmentGuid
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'DELETE', data);
    },
    linkAttachment : function(messageGuid, attachmentGuid) {
        var command = this.apiRoute + '/' + messageGuid + this.attachRoute + '/' + attachmentGuid + '/link';
        var data = {
            messageGuid : messageGuid,
            attachmentGuid : attachmentGuid
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'PUT', data);
    },
    unlinkAttachment : function(messageGuid, attachmentGuid) {
        var command = this.apiRoute + '/' + messageGuid + this.attachRoute + '/' + attachmentGuid + '/unlink';
        var data = {
            messageGuid : messageGuid,
            attachmentGuid : attachmentGuid
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'PUT', data);
    },

    downloadAttachment : function(attachmentGuid, name, download) {
        var command = this.attachRoute + '/' + attachmentGuid;
        var data = {
                "attachmentGuid": attachmentGuid,
                "preview": !download
        };
        return MessagingAPI.requestAttachment(MessagingAPI.vpsUrl, command, name, download, data, true);
    },
    downloadAttachmentChunk : function(attachmentGuid, chunkNumber, download) {
        var command = this.attachRoute + '/' + attachmentGuid + '/chunk/' + chunkNumber;
        var data = {
                "attachmentGuid": attachmentGuid,
                "chunkNumber": chunkNumber,
                "preview": !download
        };
        return MessagingAPI.requestAttachment(MessagingAPI.vpsUrl, command, name, download, data, true);
    },
    downloadAttachmentWithToken : function(token, name, download) {
        var command = this.attachRoute + '/download/' + token;
        var data = {
            "downloadToken": token,
            "preview": !download
        };
        return MessagingAPI.requestAttachment(MessagingAPI.vpsUrl, command, name, download, data, true);
    },
    updateAttachment : function(attachmentGuid, type) {
        var command = this.attachRoute + '/' + attachmentGuid;
        var data = {
            type : type,
            attachmentGuid : attachmentGuid
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'PUT', data);
    },
    signAttachment : function(attachmentGuid, answer) {
        var command = this.attachRoute + '/' + attachmentGuid + '/signature';
        var data = {
            answer : answer,
            attachmentGuid : attachmentGuid
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'POST', data);
    },
};

var APIService = {
    publicRoute : '/public',
    apiRoute : '/service',
    /*
    getServiceConfiguration : function() {
        var command = this.publicRoute + this.apiRoute + "/configuration";
        var data = {};
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET', data);
    },
    */
    getServicePublicSettings : function() {
        var command = this.publicRoute + this.apiRoute + "/settings";
        var data = {};
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET', data);
    },    
    getServiceSettings : function() {
        var command = this.apiRoute + "/settings";
        var data = {};
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET', data);
    }
};

var APIUser = {
    publicRoute : '/public',
    apiRoute : '/user',
    apiRoute2 : '/users',

    getQuickRegistration : function(token) {
        var command = this.publicRoute + this.apiRoute2 + "/quickregistration";
        var data = {
            'quickRegistrationToken': token
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET', data, true);
    },

    confirmUserAlias : function(token, password) {
        var command = this.apiRoute + '/aliases/confirm';
        var data = {
            confirmationToken : token
        };
        if(password && password.length) {
            data.password = password;
        }
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'POST', data);
    },

    removeUserAlias : function(email) {
        var command = this.apiRoute + '/aliases';
        var data = {
            emailAlias : email
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'DELETE', data);
    },
    promoteUserAlias : function(email, opword, npword) {
        var command = this.apiRoute + '/aliases';
        var data = {
            emailAlias : email,
            oldPassword : opword,
            newPassword : npword
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'PUT', data);
    },
    addUserAlias : function(email) {
        var command = this.apiRoute + '/aliases';
        var data = {
            emailAlias : email
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'POST', data);
    },

    getUserAlias : function() {
        var command = this.apiRoute + '/aliases';
        var data = {};
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET', data);
    },

    confirmRegistration : function(token) {
        var command = this.publicRoute + this.apiRoute2 + '/registration';
        var data = {
            registrationConfirmationToken : token
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'PUT', data);
    },

    resendRegistration : function(token, emailAddress) {
        var command = this.publicRoute + this.apiRoute2 + '/registration/resendconfirmation';
        var data = {};

        if (emailAddress) {
            data.emailAddress = emailAddress;
        }

        if (token) {
            data.registrationConfirmationToken = token;
        }

        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'POST', data);
    },

    registerUser : function(emailAddress, firstName, lastName, password, quickRegistrationKey, craCode, language, terms) {
        var command = this.publicRoute + this.apiRoute2 + '/registration';
        var data = {
            emailAddress : emailAddress,
            firstName : striptags(firstName),
            lastName : striptags(lastName),
            password : password,
            quickRegistrationKey : quickRegistrationKey,
            craCode : craCode,
            language : language,
            termsAccepted : terms
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'POST', data);
    },
    expireAuthenticationToken : function() {
        var command = this.apiRoute + "/authenticationtoken";
        var data = {
            authenticationToken : MessagingAPI.authToken
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'DELETE', data);
    },
    expireAuthenticationTokens : function() {
        var command = this.apiRoute + "/authenticationtokens";
        var data = {};
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'DELETE', data);
    },
    getNewAuthenticationToken : function() {
        var command = this.apiRoute + "/authenticationtoken";
        var data = {};
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET', data);
    },
    updateUserSettings : function(settings) {
        var command = this.apiRoute + '/settings';
        var data = settings;
        if (data.firstName) {
            data.firstName = striptags(data.firstName).replace(/&amp;/g, '&')
        }
        if (data.lastName) {
            data.lastName = striptags(data.lastName).replace(/&amp;/g, '&')
        }
        if (data.signatureHtml) {
            data.signatureHtml = striptags(data.signatureHtml, MessagingAPI.allowedTags, true);
        }
        if (data.outOfOfficeMessage) {
            data.outOfOfficeMessage = striptags(data.outOfOfficeMessage, MessagingAPI.allowedTags, true);
        }
        /*
         * { firstName : settings.firstName, lastName : settings.lastName,
         * language : settings.language, autoRetrieveMessage :
         * settings.autoRetrieveMessage, outOfOfficeEnabled :
         * settings.outOfOffice.enabled, outOfOfficeMessage :
         * settings.outOfOffice.message };
         */
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'PUT', data);
    },
    forgetPassword : function(emailAddress) {
        var command = this.publicRoute + this.apiRoute2 + '/forgotpassword';
        var data = {
            emailAddress : emailAddress
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'POST', data);
    },
    resetPassword : function(forgotPasswordToken, newPassword) {
        var command = this.publicRoute + this.apiRoute2 + '/resetpassword';
        var data = {
            forgotPasswordToken : forgotPasswordToken,
            newPassword : newPassword
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'POST', data);
    },
    updatePassword : function(oldPassword, newPassword) {
        var command = this.apiRoute + '/updatepassword';
        var data = {
            oldPassword : oldPassword,
            newPassword : newPassword
        };
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'PUT', data);

    },
    getUserContacts : function(page, pageSize) {
        var command = this.apiRoute + '/contacts';
        var data = {};
        if(page) {
            data.page = page;
        }
        if(pageSize) {
            data.pageSize = pageSize;
        }
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET', data, true);
    },
    getUserSettings : function() {
        var command = this.apiRoute + '/settings';
        var data = {};
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'GET', data);
    },
    activateUserMessage : function() {
        var command = this.apiRoute + '/activationmessage';
        var data = {};
        return MessagingAPI.request(MessagingAPI.vpsUrl, command, 'POST', data);
    }
};

// moment.js
// version : 1.7.2
// author : Tim Wood
// license : MIT
// momentjs.com
(function(a){function E(a,b,c,d){var e=c.lang();return e[a].call?e[a](c,d):e[a][b]}function F(a,b){return function(c){return K(a.call(this,c),b)}}function G(a){return function(b){var c=a.call(this,b);return c+this.lang().ordinal(c)}}function H(a,b,c){this._d=a,this._isUTC=!!b,this._a=a._a||null,this._lang=c||!1}function I(a){var b=this._data={},c=a.years||a.y||0,d=a.months||a.M||0,e=a.weeks||a.w||0,f=a.days||a.d||0,g=a.hours||a.h||0,h=a.minutes||a.m||0,i=a.seconds||a.s||0,j=a.milliseconds||a.ms||0;this._milliseconds=j+i*1e3+h*6e4+g*36e5,this._days=f+e*7,this._months=d+c*12,b.milliseconds=j%1e3,i+=J(j/1e3),b.seconds=i%60,h+=J(i/60),b.minutes=h%60,g+=J(h/60),b.hours=g%24,f+=J(g/24),f+=e*7,b.days=f%30,d+=J(f/30),b.months=d%12,c+=J(d/12),b.years=c,this._lang=!1}function J(a){return a<0?Math.ceil(a):Math.floor(a)}function K(a,b){var c=a+"";while(c.length<b)c="0"+c;return c}function L(a,b,c){var d=b._milliseconds,e=b._days,f=b._months,g;d&&a._d.setTime(+a+d*c),e&&a.date(a.date()+e*c),f&&(g=a.date(),a.date(1).month(a.month()+f*c).date(Math.min(g,a.daysInMonth())))}function M(a){return Object.prototype.toString.call(a)==="[object Array]"}function N(a,b){var c=Math.min(a.length,b.length),d=Math.abs(a.length-b.length),e=0,f;for(f=0;f<c;f++)~~a[f]!==~~b[f]&&e++;return e+d}function O(a,b,c,d){var e,f,g=[];for(e=0;e<7;e++)g[e]=a[e]=a[e]==null?e===2?1:0:a[e];return a[7]=g[7]=b,a[8]!=null&&(g[8]=a[8]),a[3]+=c||0,a[4]+=d||0,f=new Date(0),b?(f.setUTCFullYear(a[0],a[1],a[2]),f.setUTCHours(a[3],a[4],a[5],a[6])):(f.setFullYear(a[0],a[1],a[2]),f.setHours(a[3],a[4],a[5],a[6])),f._a=g,f}function P(a,c){var d,e,g=[];!c&&h&&(c=require("./lang/"+a));for(d=0;d<i.length;d++)c[i[d]]=c[i[d]]||f.en[i[d]];for(d=0;d<12;d++)e=b([2e3,d]),g[d]=new RegExp("^"+(c.months[d]||c.months(e,""))+"|^"+(c.monthsShort[d]||c.monthsShort(e,"")).replace(".",""),"i");return c.monthsParse=c.monthsParse||g,f[a]=c,c}function Q(a){var c=typeof a=="string"&&a||a&&a._lang||null;return c?f[c]||P(c):b}function R(a){return a.match(/\[.*\]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function S(a){var b=a.match(k),c,d;for(c=0,d=b.length;c<d;c++)D[b[c]]?b[c]=D[b[c]]:b[c]=R(b[c]);return function(e){var f="";for(c=0;c<d;c++)f+=typeof b[c].call=="function"?b[c].call(e,a):b[c];return f}}function T(a,b){function d(b){return a.lang().longDateFormat[b]||b}var c=5;while(c--&&l.test(b))b=b.replace(l,d);return A[b]||(A[b]=S(b)),A[b](a)}function U(a){switch(a){case"DDDD":return p;case"YYYY":return q;case"S":case"SS":case"SSS":case"DDD":return o;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":case"a":case"A":return r;case"Z":case"ZZ":return s;case"T":return t;case"MM":case"DD":case"YY":case"HH":case"hh":case"mm":case"ss":case"M":case"D":case"d":case"H":case"h":case"m":case"s":return n;default:return new RegExp(a.replace("\\",""))}}function V(a,b,c,d){var e,f;switch(a){case"M":case"MM":c[1]=b==null?0:~~b-1;break;case"MMM":case"MMMM":for(e=0;e<12;e++)if(Q().monthsParse[e].test(b)){c[1]=e,f=!0;break}f||(c[8]=!1);break;case"D":case"DD":case"DDD":case"DDDD":b!=null&&(c[2]=~~b);break;case"YY":c[0]=~~b+(~~b>70?1900:2e3);break;case"YYYY":c[0]=~~Math.abs(b);break;case"a":case"A":d.isPm=(b+"").toLowerCase()==="pm";break;case"H":case"HH":case"h":case"hh":c[3]=~~b;break;case"m":case"mm":c[4]=~~b;break;case"s":case"ss":c[5]=~~b;break;case"S":case"SS":case"SSS":c[6]=~~(("0."+b)*1e3);break;case"Z":case"ZZ":d.isUTC=!0,e=(b+"").match(x),e&&e[1]&&(d.tzh=~~e[1]),e&&e[2]&&(d.tzm=~~e[2]),e&&e[0]==="+"&&(d.tzh=-d.tzh,d.tzm=-d.tzm)}b==null&&(c[8]=!1)}function W(a,b){var c=[0,0,1,0,0,0,0],d={tzh:0,tzm:0},e=b.match(k),f,g;for(f=0;f<e.length;f++)g=(U(e[f]).exec(a)||[])[0],g&&(a=a.slice(a.indexOf(g)+g.length)),D[e[f]]&&V(e[f],g,c,d);return d.isPm&&c[3]<12&&(c[3]+=12),d.isPm===!1&&c[3]===12&&(c[3]=0),O(c,d.isUTC,d.tzh,d.tzm)}function X(a,b){var c,d=a.match(m)||[],e,f=99,g,h,i;for(g=0;g<b.length;g++)h=W(a,b[g]),e=T(new H(h),b[g]).match(m)||[],i=N(d,e),i<f&&(f=i,c=h);return c}function Y(a){var b="YYYY-MM-DDT",c;if(u.exec(a)){for(c=0;c<4;c++)if(w[c][1].exec(a)){b+=w[c][0];break}return s.exec(a)?W(a,b+" Z"):W(a,b)}return new Date(a)}function Z(a,b,c,d,e){var f=e.relativeTime[a];return typeof f=="function"?f(b||1,!!c,a,d):f.replace(/%d/i,b||1)}function $(a,b,c){var e=d(Math.abs(a)/1e3),f=d(e/60),g=d(f/60),h=d(g/24),i=d(h/365),j=e<45&&["s",e]||f===1&&["m"]||f<45&&["mm",f]||g===1&&["h"]||g<22&&["hh",g]||h===1&&["d"]||h<=25&&["dd",h]||h<=45&&["M"]||h<345&&["MM",d(h/30)]||i===1&&["y"]||["yy",i];return j[2]=b,j[3]=a>0,j[4]=c,Z.apply({},j)}function _(a,c){b.fn[a]=function(a){var b=this._isUTC?"UTC":"";return a!=null?(this._d["set"+b+c](a),this):this._d["get"+b+c]()}}function ab(a){b.duration.fn[a]=function(){return this._data[a]}}function bb(a,c){b.duration.fn["as"+a]=function(){return+this/c}}var b,c="1.7.2",d=Math.round,e,f={},g="en",h=typeof module!="undefined"&&module.exports,i="months|monthsShort|weekdays|weekdaysShort|weekdaysMin|longDateFormat|calendar|relativeTime|ordinal|meridiem".split("|"),j=/^\/?Date\((\-?\d+)/i,k=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|YYYY|YY|a|A|hh?|HH?|mm?|ss?|SS?S?|zz?|ZZ?|.)/g,l=/(\[[^\[]*\])|(\\)?(LT|LL?L?L?)/g,m=/([0-9a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+)/gi,n=/\d\d?/,o=/\d{1,3}/,p=/\d{3}/,q=/\d{1,4}/,r=/[0-9a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+/i,s=/Z|[\+\-]\d\d:?\d\d/i,t=/T/i,u=/^\s*\d{4}-\d\d-\d\d(T(\d\d(:\d\d(:\d\d(\.\d\d?\d?)?)?)?)?([\+\-]\d\d:?\d\d)?)?/,v="YYYY-MM-DDTHH:mm:ssZ",w=[["HH:mm:ss.S",/T\d\d:\d\d:\d\d\.\d{1,3}/],["HH:mm:ss",/T\d\d:\d\d:\d\d/],["HH:mm",/T\d\d:\d\d/],["HH",/T\d\d/]],x=/([\+\-]|\d\d)/gi,y="Month|Date|Hours|Minutes|Seconds|Milliseconds".split("|"),z={Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6},A={},B="DDD w M D d".split(" "),C="M D H h m s w".split(" "),D={M:function(){return this.month()+1},MMM:function(a){return E("monthsShort",this.month(),this,a)},MMMM:function(a){return E("months",this.month(),this,a)},D:function(){return this.date()},DDD:function(){var a=new Date(this.year(),this.month(),this.date()),b=new Date(this.year(),0,1);return~~((a-b)/864e5+1.5)},d:function(){return this.day()},dd:function(a){return E("weekdaysMin",this.day(),this,a)},ddd:function(a){return E("weekdaysShort",this.day(),this,a)},dddd:function(a){return E("weekdays",this.day(),this,a)},w:function(){var a=new Date(this.year(),this.month(),this.date()-this.day()+5),b=new Date(a.getFullYear(),0,4);return~~((a-b)/864e5/7+1.5)},YY:function(){return K(this.year()%100,2)},YYYY:function(){return K(this.year(),4)},a:function(){return this.lang().meridiem(this.hours(),this.minutes(),!0)},A:function(){return this.lang().meridiem(this.hours(),this.minutes(),!1)},H:function(){return this.hours()},h:function(){return this.hours()%12||12},m:function(){return this.minutes()},s:function(){return this.seconds()},S:function(){return~~(this.milliseconds()/100)},SS:function(){return K(~~(this.milliseconds()/10),2)},SSS:function(){return K(this.milliseconds(),3)},Z:function(){var a=-this.zone(),b="+";return a<0&&(a=-a,b="-"),b+K(~~(a/60),2)+":"+K(~~a%60,2)},ZZ:function(){var a=-this.zone(),b="+";return a<0&&(a=-a,b="-"),b+K(~~(10*a/6),4)}};while(B.length)e=B.pop(),D[e+"o"]=G(D[e]);while(C.length)e=C.pop(),D[e+e]=F(D[e],2);D.DDDD=F(D.DDD,3),b=function(c,d){if(c===null||c==="")return null;var e,f;return b.isMoment(c)?new H(new Date(+c._d),c._isUTC,c._lang):(d?M(d)?e=X(c,d):e=W(c,d):(f=j.exec(c),e=c===a?new Date:f?new Date(+f[1]):c instanceof Date?c:M(c)?O(c):typeof c=="string"?Y(c):new Date(c)),new H(e))},b.utc=function(a,c){return M(a)?new H(O(a,!0),!0):(typeof a=="string"&&!s.exec(a)&&(a+=" +0000",c&&(c+=" Z")),b(a,c).utc())},b.unix=function(a){return b(a*1e3)},b.duration=function(a,c){var d=b.isDuration(a),e=typeof a=="number",f=d?a._data:e?{}:a,g;return e&&(c?f[c]=a:f.milliseconds=a),g=new I(f),d&&(g._lang=a._lang),g},b.humanizeDuration=function(a,c,d){return b.duration(a,c===!0?null:c).humanize(c===!0?!0:d)},b.version=c,b.defaultFormat=v,b.lang=function(a,c){var d;if(!a)return g;(c||!f[a])&&P(a,c);if(f[a]){for(d=0;d<i.length;d++)b[i[d]]=f[a][i[d]];b.monthsParse=f[a].monthsParse,g=a}},b.langData=Q,b.isMoment=function(a){return a instanceof H},b.isDuration=function(a){return a instanceof I},b.lang("en",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D YYYY",LLL:"MMMM D YYYY LT",LLLL:"dddd, MMMM D YYYY LT"},meridiem:function(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinal:function(a){var b=a%10;return~~(a%100/10)===1?"th":b===1?"st":b===2?"nd":b===3?"rd":"th"}}),b.fn=H.prototype={clone:function(){return b(this)},valueOf:function(){return+this._d},unix:function(){return Math.floor(+this._d/1e3)},toString:function(){return this._d.toString()},toDate:function(){return this._d},toArray:function(){var a=this;return[a.year(),a.month(),a.date(),a.hours(),a.minutes(),a.seconds(),a.milliseconds(),!!this._isUTC]},isValid:function(){return this._a?this._a[8]!=null?!!this._a[8]:!N(this._a,(this._a[7]?b.utc(this._a):b(this._a)).toArray()):!isNaN(this._d.getTime())},utc:function(){return this._isUTC=!0,this},local:function(){return this._isUTC=!1,this},format:function(a){return T(this,a?a:b.defaultFormat)},add:function(a,c){var d=c?b.duration(+c,a):b.duration(a);return L(this,d,1),this},subtract:function(a,c){var d=c?b.duration(+c,a):b.duration(a);return L(this,d,-1),this},diff:function(a,c,e){var f=this._isUTC?b(a).utc():b(a).local(),g=(this.zone()-f.zone())*6e4,h=this._d-f._d-g,i=this.year()-f.year(),j=this.month()-f.month(),k=this.date()-f.date(),l;return c==="months"?l=i*12+j+k/30:c==="years"?l=i+(j+k/30)/12:l=c==="seconds"?h/1e3:c==="minutes"?h/6e4:c==="hours"?h/36e5:c==="days"?h/864e5:c==="weeks"?h/6048e5:h,e?l:d(l)},from:function(a,c){return b.duration(this.diff(a)).lang(this._lang).humanize(!c)},fromNow:function(a){return this.from(b(),a)},calendar:function(){var a=this.diff(b().sod(),"days",!0),c=this.lang().calendar,d=c.sameElse,e=a<-6?d:a<-1?c.lastWeek:a<0?c.lastDay:a<1?c.sameDay:a<2?c.nextDay:a<7?c.nextWeek:d;return this.format(typeof e=="function"?e.apply(this):e)},isLeapYear:function(){var a=this.year();return a%4===0&&a%100!==0||a%400===0},isDST:function(){return this.zone()<b([this.year()]).zone()||this.zone()<b([this.year(),5]).zone()},day:function(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return a==null?b:this.add({d:a-b})},startOf:function(a){switch(a.replace(/s$/,"")){case"year":this.month(0);case"month":this.date(1);case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return this},endOf:function(a){return this.startOf(a).add(a.replace(/s?$/,"s"),1).subtract("ms",1)},sod:function(){return this.clone().startOf("day")},eod:function(){return this.clone().endOf("day")},zone:function(){return this._isUTC?0:this._d.getTimezoneOffset()},daysInMonth:function(){return b.utc([this.year(),this.month()+1,0]).date()},lang:function(b){return b===a?Q(this):(this._lang=b,this)}};for(e=0;e<y.length;e++)_(y[e].toLowerCase(),y[e]);_("year","FullYear"),b.duration.fn=I.prototype={weeks:function(){return J(this.days()/7)},valueOf:function(){return this._milliseconds+this._days*864e5+this._months*2592e6},humanize:function(a){var b=+this,c=this.lang().relativeTime,d=$(b,!a,this.lang()),e=b<=0?c.past:c.future;return a&&(typeof e=="function"?d=e(d):d=e.replace(/%s/i,d)),d},lang:b.fn.lang};for(e in z)z.hasOwnProperty(e)&&(bb(e,z[e]),ab(e.toLowerCase()));bb("Weeks",6048e5),h&&(module.exports=b),typeof ender=="undefined"&&(this.moment=b),typeof define=="function"&&define.amd&&define("moment",[],function(){return b})}).call(this);
var E2Service = {

    apiUrl : '',
    // e2casUrl: 'http://www.e2cas.com/preprod/api/directory.aspx',
    e2casUrl : 'https://secure.email2.com/e2cas/api/directory.aspx',
    // proxyUrl: 'http://192.168.23.43/WebAPI/webapi.aspx',
    clientName : 'SecureMessaging.Mobile',
    clientVersion : '2.0.1',
    token : '',

    bindEvent : function() {
        E2Deliveryslip.bind();
        E2Mailbox.bind();
        E2Push.bind();
        E2Tracking.bind();
    },

    unbindEvent : function() {
        E2Deliveryslip.unbind();
        E2Mailbox.unbind();
        E2Push.unbind();
        E2Tracking.unbind();
    },

    updateAPIUrl : function(url) {
        E2Service.apiUrl = url;
        if (typeof MessagingAPI != 'undefined') {
            MessagingAPI.vpsUrl = E2Service.apiUrl.replace('/services/api.aspx', '');
        }
    },

    //Legacy helper methods
    fixLegacyDate : function(oldDate) {
        try {
            if (oldDate)
                return new Date(moment(oldDate.replace('new ', '')));
        } catch (e) {
            return oldDate;
        }
        return oldDate;
    },

    handleLegacyDate : function(json) {
        var js = JSON.parse(json);
        var data = JSON.stringify(js.data);
        var header = JSON.stringify(js.header);
        var fi = /\"new Date\(([0-9]+)\)\"/gi;
        header = header.replace(fi, "new Date($1)");
        var newjson = '{"header":' + header + ',"data":' + data + '}';
        return newjson;
    },
    //Legacy helper methods

    batchRequest : function(arrayDeferreds, callback) {
        $.when.apply(null, arrayDeferreds).done(function() {
            var handledResponse = [];
            for (var i = 0; i < arguments.length; i++) {
                var response = arguments[i][2].responseText ? arguments[i][2].responseText : arguments[i][0];
                handledResponse.push(E2RequestHandler.createResponse(arguments[i][0]));
            }
            callback.apply(null, handledResponse);
        });
    },

    createRequest : function(command, data) {
        var request = {
            "header" : {
                command : command,
                timestamp : 'new Date(' + new Date().getTime() + ')',
                clientName : E2Service.clientName,
                clientVersion : E2Service.clientVersion,
                token : E2Service.token
            },
            "data" : data
        };
        Application.log(command + " request:", request);
        return JSON.stringify(request);
    },

    createPenDirRequest : function(command, data) {
        var request = {
            "header" : {
                command : command,
                timestamp : 'new Date(' + new Date().getTime() + ')',
                clientName : E2Service.clientName,
                clientVersion : E2Service.clientVersion
            },
            "data" : data
        };
        return JSON.stringify(request);
    },

    request : function(json, url) {
        //Disable CORS withCrediential for legacy API
        if(Application.shouldEnableCors) {
            Application.shouldEnableCors(false);
        }

        var js = JSON.parse(json);
        json = E2Service.handleLegacyDate(json);
        var request = jQuery.ajax({
            url : url + '?' + js.header.command,
            type : "POST",
            crossDomain : true,
            //mozSystem:              true, //for testing in firefox simulator
            data : json,
            dataType : "html",
            // timeout: 5000,
            beforeSend : function(x) {
                x.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
                x.setRequestHeader("X-email2Cmd", js.header.command);
                console.log(Application.proxySessionToken)
                if (Application && Application.proxySessionToken) {
                    //x.setRequestHeader("X-sm-session-token", Application.proxySessionToken);
                }
            }
        });
        return {
            request : request,
            json : json
        };
    },

    login : function(user, password, keepMeLoggedIn) {
        var request = E2Service.createRequest('login', {
            emailAddress : user,
            password : password,
            requestAuthKey : keepMeLoggedIn
        });

        return E2Service.request(request, E2Service.apiUrl);
    },

    authenticate : function(callback, vCallback) {
        var request = E2Service.createRequest('authenticate', {
            authKey : E2Service.authKey
        });

        return E2Service.request(request, E2Service.apiUrl);
    },

    logout : function(callback) {
        E2Service.token = '';
        E2Service.authKey = '';
        E2Database.updateDatabase('options', {
            keepLoggedIn : 'false',
            authKey : ''
        }, function() {
        });
        callback();
    },

    getUnreadCount : function(callback) {
        var request = E2Service.createRequest('getUnreadCount', {});
        return E2Service.request(request, E2Service.apiUrl);
    },

    getMessageList : function(pageNum, responseType, pageSize, filterGroup, filterSearch, sortType, sortDirection) {
        var request = E2Service.createRequest('getMessageList', {
            pageNum : pageNum,
            responseType : responseType,
            pageSize : pageSize,
            filter : {
                group : filterGroup,
                searchCriteria : filterSearch
            },
            sort : {
                type : sortType,
                direction : sortDirection
            }
        });
        return E2Service.request(request, E2Service.apiUrl);
    },

    getMessageDetails : function(guid, messagePassword, responseType) {
        var request = E2Service.createRequest('getMessageDetails', {
            guid : guid,
            messagePassword : messagePassword,
            responseType : responseType
        });

        return E2Service.request(request, E2Service.apiUrl);
    },

    preCreateMessage : function(action, parentMsgGuid, msgPass) {
        var request = E2Service.createRequest('preCreateMessage', {
            action : action,
            parentMsgGuid : parentMsgGuid,
            msgPass : msgPass
        });

        return E2Service.request(request, E2Service.apiUrl);
    },

    saveMessage : function(msgGuid, recipients, subject, body, format, msgOptions, validateDraft) {
        var request = E2Service.createRequest('saveMessage', {
            msgGuid : msgGuid,
            recipients : recipients,
            subject : subject,
            body : body,
            format : format,
            msgOptions : msgOptions,
            validateDraft : validateDraft
        });

        return E2Service.request(request, E2Service.apiUrl);
    },

    addAttachments : function(msgGuid, attachments) {
        var request = E2Service.createRequest('addAttachments', {
            msgGuid : msgGuid,
            attachments : attachments
        });

        return E2Service.request(request, E2Service.apiUrl);
    },

    sendMessage : function(msgGuid, messagePassword, createNewMembers, craCode) {
        var data = {
            msgGuid : msgGuid,
            messagePassword : messagePassword,
            createNewMembers : createNewMembers,
        };

        if(craCode) {
            data.craCode = craCode;
        }
        var request = E2Service.createRequest('sendMessage', data);

        return E2Service.request(request, E2Service.apiUrl);
    },

    getMessageTracking : function(guid, messagePassword, type, responseType) {
        var request = E2Service.createRequest('getMessageTracking', {
            guid : guid,
            messagePassword : messagePassword,
            type : type,
            responseType : responseType
        });
        return E2Service.request(request, E2Service.apiUrl);
    },

    deleteMessage : function(guids, purgeMsg) {
        var params = {
            guids: [],
            purgeMsg: false
        };

        if(guids) {
            params.guids = guids;
        }

        if(purgeMsg) {
            params.purgeMsg = purgeMsg;
        }

        var request = E2Service.createRequest('deleteMessage', params);
        return E2Service.request(request, E2Service.apiUrl);
    },

    archiveMessage : function(guids) {
        var request = E2Service.createRequest('archiveMessage', {
            guids : guids,
        });
        return E2Service.request(request, E2Service.apiUrl);
    },

    recallMessage : function(guid, message) {
        var request = E2Service.createRequest('recallMessage', {
            guid : guid,
            message : message
        });
        return E2Service.request(request, E2Service.apiUrl);
    },

    getMemberInfo : function(emailAddress) {
        var request = E2Service.createRequest('getMember', {
            emailAddress : emailAddress
        });
        return E2Service.request(request, E2Service.apiUrl);
    },

    getMemberList : function(pageNum, pageSize, criteria) {
        var request = E2Service.createRequest('getMemberList', {
            pageNum : pageNum,
            pageSize : pageSize,
            criteria : criteria,
        });
        return E2Service.request(request, E2Service.apiUrl);
    },

    getUnreadCount : function(penGuid) {
        var request = E2Service.createRequest('getUnreadCount', {});
        return E2Service.request(request, E2Service.apiUrl);
    },

    getUserTracking : function(sessionValue, afterDate) {

        var object = {};
        object.sessionValue = sessionValue;
        if(afterDate!=null && typeof(afterDate)!='undefined')
            object.afterDate = afterDate;
        var request = E2Service.createRequest('getUserTracking', object);
        return E2Service.request(request, E2Service.apiUrl);
    },

    singleSignOn : function(userId, password) {
        var request = E2Service.createPenDirRequest('singleSignOn', {
            userId : userId,
            password : password
        });
        return E2Service.request(request, E2Service.e2casUrl);
    },

    getPenInfo : function(penGuid) {
        var request = E2Service.createPenDirRequest('getPenInfo', {
        });
        return E2Service.request(request, E2Service.e2casUrl + '?' + new Date().getTime());
    },

    createUserPushSession : function(deviceType, deviceId, devicePushToken) {
        var data = {
            deviceType : deviceType,
            deviceId : deviceId,
            pushToken : devicePushToken
        };

        if(E2Service.authKey) {
            data.authKey = E2Service.authKey;
        }
        var request = E2Service.createRequest('createUserPushSession', data);
        return E2Service.request(request, E2Service.apiUrl);
    },

    removeUserPushSession : function(deviceId) {
        var request = E2Service.createRequest('removeUserPushSession', {
            deviceId : deviceId
        });
        return E2Service.request(request, E2Service.apiUrl);
    },

    getUserPushEvents : function() {
        var request = E2Service.createRequest('getUserPushEvents', {
        });
        return E2Service.request(request, E2Service.apiUrl);
    },

    updateUserPushEvents : function(events) {
        var request = E2Service.createRequest('updateUserPushEvents', {
            pushEvents : events
        });
        return E2Service.request(request, E2Service.apiUrl);
    }
};


if (typeof module != "undefined" && module.exports) {
    module.exports = E2Service;
} else {
    window.E2Service = E2Service;
}

E2Compose = {

	/*==============================================*/
        
    //deprecated

	/* Compose Message */

	composeMessage : function(action, parentMsgGuid, msgPass, vCallback) {
		var request = E2Service.preCreateMessage(action, parentMsgGuid, msgPass);
		E2RequestHandler.handleRequest(request, E2Compose.composeMessage_, vCallback);
		return request.request;
	},

	composeMessage_ : function(e2Response, vCallback) {
		vCallback(e2Response);
	},

	addAttachments : function(msgGuid, attachments, vCallback) {
		var request = E2Service.addAttachments(msgGuid, attachments);
		E2RequestHandler.handleRequest(request, E2Compose.addAttachments_, vCallback);
	},

	addAttachments_ : function(e2Response, vCallback) {
		vCallback(e2Response);
	},

	saveMessage : function(msgGuid, recipients, subject, body, format, options, validateDraft, vCallback) {
		var request = E2Service.saveMessage(msgGuid, recipients, subject, body, format, options, validateDraft);
		E2RequestHandler.handleRequest(request, E2Compose.saveMessage_, vCallback);
		return request.request;
	},

	saveMessage_ : function(e2Response, vCallback) {
		vCallback(e2Response);
	},

	sendMessage : function(msgGuid, messagePassword, invite, craCode, vCallback) {
		var request = E2Service.sendMessage(msgGuid, messagePassword, invite, craCode);
		E2RequestHandler.handleRequest(request, E2Compose.sendMessage_, vCallback);
		return request.request;
	},

	sendMessage_ : function(e2Response, vCallback) {
		vCallback(e2Response);
	},
}; 
E2Login = {
	login: function(user, password, rememberMe, keepLoggedIn, vCallback){
		var request = E2Service.login(user, password, keepLoggedIn);
		E2RequestHandler.handleRequest(request, E2Login.loginComplete, vCallback);
		return request.request;
	},

	loginComplete: function(e2Response, vCallback){
		if(e2Response.success){
			E2Service.token = e2Response.data.token;
			E2Service.authKey = e2Response.data.authKey;	
			vCallback(e2Response);
		}else{
			vCallback(e2Response);
		}
	},

	loginWithToken: function(token,vCallback){
		var penInfo = E2.getPenInfo();
		E2Service.token = token;
		vCallback();
	},

	loginWithOptions: function (e2Response, vCallback){
		E2Database.getLoginOptions(function(e2DBResponse){
			e2Response.data.loginOptions = e2DBResponse;
			vCallback(e2Response);
		});
	},

	getLoginOptions: function(vCallback){
		E2Database.getLoginOptions(E2Login.getLoginOptionsComplete, vCallback);
	},

	getLoginOptionsComplete:function(e2DBResponse, vCallback){
		vCallback(e2DBResponse);
	},

	getMemberInfo: function(emailAddress, vCallback){
		var request = E2Service.getMemberInfo(emailAddress);
		E2RequestHandler.handleRequest(request, E2Login.getMemberInfoComplete, vCallback);
	},

	getMemberInfoComplete: function(e2Response, vCallback){
		vCallback.apply(null, [e2Response]);
	},

	authenticate: function(vCallback){
		var request = E2Service.authenticate();
		E2RequestHandler.handleRequest(request, E2Login.authenticateComplete, vCallback);
	},

	authenticateComplete: function(e2Response, vCallback){
		if(e2Response.success){
			E2Service.token = e2Response.data.token;
			vCallback(e2Response);
		}else{
			vCallback(e2Response);
		}	
	},

	singleSignOn: function(userId, password, vCallback){
		var request = E2Service.singleSignOn(userId, password);
		E2RequestHandler.handleRequest(request, E2Login.singleSignOnComplete, vCallback);
		return request.request;
	},

	singleSignOnComplete: function(e2Response, vCallback){
		vCallback(e2Response);
	},

	getPenInfo: function(penGuid,vCallback){
		var request = E2Service.getPenInfo(penGuid);
		E2RequestHandler.handleRequest(request, E2Login.singleSignOnComplete, vCallback);
	},

	getPenInfoComplete: function(e2Response, vCallback){
		vCallback(e2Response);
	},

	deauthorize: function(){
		E2Database.updateDatabase('options', {authKey: "", rememberMe:false, keepLoggedIn:false, emailAddress:"", penName: "", penImage: "", apiUrl: "", poweredByImage: "", penCode: ""}, function(){});
	}
};

E2RequestHandler = {
	
	createResponse: function(oResponse){
		if(oResponse != null){
			var re = /new Date\((\-)*[0-9]+\)/gi;
		    var fi = /\\"[\s]*:[\s]*"new Date\(((\-)*[0-9]+)\)"/gi;
			var replaced = oResponse.replace(re, '"$&"');
			var fixed = replaced.replace(fi, '\\":\\"new Date($1)\\"');
			//var fixed = oResponse;
			//var afterfix = JSON.parse(fixed);
			oResponse = JSON.parse(fixed);
			var success, errCode, errDesc;
            /*
            if(afterfix.data) {
                var di, hi;
                di = oResponse.indexOf('"data":{');
                hi = oResponse.lastIndexOf(',"header":');
                Application.log(oResponse.slice(di+7, hi));
                afterfix.data = JSON.parse(oResponse.slice(di+7, hi));
            }
            
            oResponse = afterfix;
            */
			if(!oResponse){
				success = false;
				errCode = -1;
				errDesc = 'Null response returned';
			}else if(oResponse.header.errCode == 0){
				success = true;
				errCode = 0;
				errDesc = '';
			}else{
				success = false;
				errCode = oResponse.header.errCode;
				errDesc = oResponse.header.errDesc;
			}

			var response = 
			{
				success: success,
				errCode: errCode,
				errDesc: errDesc,
				command: oResponse.header.command,
				data: ((errCode != -1 && oResponse.data) ? oResponse.data : null )
			};
			Application.log(oResponse.header.command + ' completed: ', response);
			return response;
		}else{
			var response = 
			{
				success: false,
				errCode: -500,
				errDesc: 'Request failed at server',
				command: 'unknown',
				data: null
			};
			return response;
		}
		
		
	},

	handleRequest: function(deferred, callback, vCallback){
		deferred.request.done(function(oResponse, textStatus, jqx) {
			oResponse = E2RequestHandler.createResponse(oResponse);
			E2RequestHandler.onRequestComplete(oResponse, deferred.json, callback, vCallback);
		});

		deferred.request.fail(function(jqx, textStatus) {
			oResponse = E2RequestHandler.createResponse(null);
			E2RequestHandler.onRequestFail(oResponse, deferred.json, callback, vCallback);
			//navigator.notification.alert('There is a internet connection problem. Please try again later.');
            Application.log('it looks like there is an internet connection problem');
		});
		// if(resendFunc) resendFunc();
	},

	onRequestComplete: function(e2Response, json, callback, vCallback){ 
		callback(e2Response, vCallback);
	},

	onRequestFail: function(e2Response, json, callback, vCallback){
		callback(e2Response, vCallback);
	}
};

E2Message = {

	getMessageDetails: function(guid, password, responseType, vCallback){
		var messagePassword = (password)?password:'';
		responseType = 'full';
		var request = E2Service.getMessageDetails(guid, messagePassword, responseType);
		E2RequestHandler.handleRequest(request, E2Message.getMessageDetails_, vCallback);
		return request.request;
	},

	getMessageDetails_: function(e2Response, vCallback){
		vCallback(e2Response);
	},
};
E2Deliveryslip = {
    bind : function() {
        Application.vent.subscribe('api:get:message:tracking', this.getMessageTracking, this);
    },
    
    unbind : function() {
        Application.vent.unsubscribe('api:get:message:tracking', this.getMessageTracking, this);        
    },
    
	getMessageTracking: function(guid, messagePassword, type, responseType, vCallback){
		var request = E2Service.getMessageTracking(guid, messagePassword, type, responseType);
		E2RequestHandler.handleRequest(request, E2Deliveryslip.getMessageTracking_, vCallback);
	},

	getMessageTracking_: function(e2Response, vCallback){
	    if(vCallback) {
	        vCallback(e2Response);
	    }
	    Application.vent.publish('api:get:message:tracking:complete', e2Response);
	},	
};