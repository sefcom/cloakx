
var sendTabRequest = function(request) {
    
    var reloadMessage = "Please refresh/relaunch the browser to load the extension.";
    
    chrome.tabs.query({
        active : true,
        currentWindow : true
    }, function(tabs) {
  
        chrome.tabs.executeScript(tabs[0].id, {code:"typeof Application != 'undefined' && typeof View != 'undefined'"}, function(appload) {
            console.log(appload[0]);
            if(appload[0]) {
                chrome.tabs.sendMessage(tabs[0].id, request, function(response) {
                    console && console.log(response);
                });
            } else {
                chrome.tabs.executeScript(tabs[0].id, {code:'var div = document.createElement("div");var text = document.createTextNode("' + reloadMessage + '");div.setAttribute("id","cirius-popup-alert");div.appendChild(text);div.setAttribute("style","position: absolute;width: 400px;height: 50px;top: 100px;left: 50%;margin-left: -200px;text-align: center;line-height: 50px;background-color: rgb(119, 116, 116);z-index: 10000000000;color: white;border: 1px solid rgb(208, 208, 208);box-shadow: 4px 4px 5px 0px rgba(0,0,0,0.2);");div.setAttribute("onclick","setTimeout(function(){var elem = document.getElementById(\\"cirius-popup-alert\\");elem.parentNode.removeChild(elem);},10);");document.getElementsByTagName("body")[0].appendChild(div);'}, function(){});
                /*
                chrome.tabs.executeScript(tabs[0].id, {code:loadfile()}, function(){
                    chrome.tabs.sendMessage(tabs[0].id, request, function(response) {
                        console && console.log(response);
                    });                    
                });
                */
            }
        });
    });
};

chrome.browserAction.onClicked.addListener(function(tab) {
    // No tabs or host permissions needed!
    sendTabRequest({
        command : 'clickIcon'
    });
});

/*
 var injectSrc = {};
 var requestDeffered = [];

 var injectContent = function(src, id) {
 if ( typeof injectSrc[src] == "undefined") {
 requestDeffered.push($.get(src, function(sScriptBody, textStatus, jsXHR) {
 injectSrc[src] = sScriptBody;
 chrome.tabs.executeScript(id, {
 code : sScriptBody
 }, function() {
 });
 }));
 } else {
 chrome.tabs.executeScript(id, {
 code : injectSrc[src]
 }, function() {
 });
 }
 };*/

var Model = {

    setPreference : function(pref) {
        for (var i in pref) {
            window.localStorage.setItem(i, pref[i]);
        }
    },

    getPreference : function() {
        var list = {};
        for (var i in window.localStorage) {
            list[i] = window.localStorage[i];
            if (list[i] == 'true')
                list[i] = true;
            else if (list[i] == 'false')
                list[i] = false;
        }
        return list;
    },

    clear : function() {
        window.localStorage.clear();
    }
};

var loadLocale = function() {
    var lang = Model.getPreferences().lang ? Model.getPreferences().lang : 'en';
    chrome.tabs.executeScript(null, {
        file : chrome.extension.getURL('css/webfont.css')
    });
};

var loadWebFont = function() {
    chrome.tabs.insertCSS(null, {
        file : chrome.extension.getURL('lang/locale_' + lang + '.js')
    });
};

var loadCSS = function() {

    var css = ["webapp/chrome/contentscript.css", "webapp/chrome/Module/status.css", "webapp/chrome/Module/deliveryslip.css", "webapp/chrome/Module/messages.css"];
    chrome.tabs.insertCSS(null, {
        file : [chrome.extension.getURL(css[0]), chrome.extension.getURL(css[1]), chrome.extension.getURL(css[2]), chrome.extension.getURL(css[3])]
    });
};

var loadSweetAlert = function(request) {

    var css = "webapp/chrome/Module/sweet-alert.css";
    var js = "webapp/chrome/Module/sweet-alert.min.js";
    console.log(request);
    chrome.tabs.insertCSS(null, {
        file : css
    });
    
    chrome.tabs.executeScript(null, {file: js});
};

chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
    if (request.command) {
        switch(request.command) {
            case 'getPreference':
                sendResponse(Model.getPreference());
                break;
            case 'setPreference':
                Model.setPreference(request.preference);
                sendResponse(Model.getPreference());
                break;
            case 'cleanPreference':
                Model.clear();
                sendResponse(Model.getPreference());
                break;
            case 'loadCSS':
                loadCSS();
                break;
            case 'loadLocale':
                loadLocale();
                break;
            case 'loadWebFont':
                loadWebFont();
                break;
            case 'loadSweetAlert':
                loadSweetAlert(request);
                break;                
        }

    }
});
